<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>！！！！！</title>
    <url>/2021/12/06/%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    <content><![CDATA[<ol>
<li>图床使用的github，所以图片可能加载不会很顺利，多刷新就可以了。</li>
<li>如发现有任何争议，请联系作者进行修改。</li>
</ol>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211206083540542.png" alt="image-20211206083540542"></p>
]]></content>
  </entry>
  <entry>
    <title>CSS-05-动画</title>
    <url>/2022/02/22/CSS-05-%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="1、过渡-transition"><a href="#1、过渡-transition" class="headerlink" title="1、过渡(transition)"></a>1、过渡(transition)</h2><p>通过过渡可以指定一个属性发生变化时的切换方式。</p>
<ul>
<li><p>transition-property 指定要执行过渡的属性</p>
<p>多个属性间使用 , 隔开，如果所有属性都需要过渡，则使用all关键字。大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡。</p>
</li>
<li><p>transition-duration 指定过渡效果的持续时间</p>
</li>
<li><p>transition-timing-function 过渡的时序函数，指定过渡的执行的方式，可选值有：</p>
<ul>
<li>ease 默认，慢速开始，先加速，再减速</li>
<li>linear 匀速</li>
<li>ease-in 加速</li>
<li>ease-out 减速</li>
<li>ease-in-out 先加速，后减速</li>
</ul>
</li>
</ul>
<h2 id="2、动画"><a href="#2、动画" class="headerlink" title="2、动画"></a>2、动画</h2><h2 id="3、变形"><a href="#3、变形" class="headerlink" title="3、变形"></a>3、变形</h2><h2 id="4、z轴平移"><a href="#4、z轴平移" class="headerlink" title="4、z轴平移"></a>4、z轴平移</h2><h2 id="5、旋转"><a href="#5、旋转" class="headerlink" title="5、旋转"></a>5、旋转</h2><h2 id="6、缩放"><a href="#6、缩放" class="headerlink" title="6、缩放"></a>6、缩放</h2>]]></content>
  </entry>
  <entry>
    <title>Network-007-计算机网络和因特网的历史</title>
    <url>/2022/02/21/Network-007-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E7%9A%84%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h2 id="1、分组交换的发展：1961-1972"><a href="#1、分组交换的发展：1961-1972" class="headerlink" title="1、分组交换的发展：1961~1972"></a>1、分组交换的发展：1961~1972</h2><h2 id="2、专用网络和网络互联：1972-1980"><a href="#2、专用网络和网络互联：1972-1980" class="headerlink" title="2、专用网络和网络互联：1972~1980"></a>2、专用网络和网络互联：1972~1980</h2><h2 id="3、网络的激增：1980-1990"><a href="#3、网络的激增：1980-1990" class="headerlink" title="3、网络的激增：1980~1990"></a>3、网络的激增：1980~1990</h2><h2 id="4、因特网爆炸：20世纪90年代"><a href="#4、因特网爆炸：20世纪90年代" class="headerlink" title="4、因特网爆炸：20世纪90年代"></a>4、因特网爆炸：20世纪90年代</h2><h2 id="5、最新发展"><a href="#5、最新发展" class="headerlink" title="5、最新发展"></a>5、最新发展</h2>]]></content>
  </entry>
  <entry>
    <title>Network-006-面对攻击的网络</title>
    <url>/2022/02/21/Network-006-%E9%9D%A2%E5%AF%B9%E6%94%BB%E5%87%BB%E7%9A%84%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>网络安全领域主要探讨以下问题：</p>
<ul>
<li>坏家伙如何攻击计算机网络</li>
<li>我们如何防御</li>
<li>如何设计能够事先免除这样的攻击的新型体系结构</li>
</ul>
<h2 id="1、坏家伙能够经因特网将有害程序放入你的计算机中"><a href="#1、坏家伙能够经因特网将有害程序放入你的计算机中" class="headerlink" title="1、坏家伙能够经因特网将有害程序放入你的计算机中"></a>1、坏家伙能够经因特网将有害程序放入你的计算机中</h2><p>恶意软件</p>
<p>僵尸网络</p>
<h2 id="2、坏家伙能够攻击服务器和网络基础设施"><a href="#2、坏家伙能够攻击服务器和网络基础设施" class="headerlink" title="2、坏家伙能够攻击服务器和网络基础设施"></a>2、坏家伙能够攻击服务器和网络基础设施</h2><h2 id="3、坏家伙能够嗅探分组"><a href="#3、坏家伙能够嗅探分组" class="headerlink" title="3、坏家伙能够嗅探分组"></a>3、坏家伙能够嗅探分组</h2><h2 id="4、坏家伙能够伪装成你信任的人"><a href="#4、坏家伙能够伪装成你信任的人" class="headerlink" title="4、坏家伙能够伪装成你信任的人"></a>4、坏家伙能够伪装成你信任的人</h2>]]></content>
  </entry>
  <entry>
    <title>Network-005-协议层次及其服务模型</title>
    <url>/2022/02/21/Network-005-%E5%8D%8F%E8%AE%AE%E5%B1%82%E6%AC%A1%E5%8F%8A%E5%85%B6%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="1、分层的体系结构"><a href="#1、分层的体系结构" class="headerlink" title="1、分层的体系结构"></a>1、分层的体系结构</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220223101218683.png" alt="image-20220223101218683"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220223101233332.png" alt="image-20220223101233332"></p>
<h3 id="1-1-协议分层"><a href="#1-1-协议分层" class="headerlink" title="1.1 协议分层"></a>1.1 协议分层</h3><p>为了给网络协议的设计提供一个结构，网络设计者以分层(layer)的方式组织协议以及实现这些协议的网络硬件和软件。每个协议属于这些层次之一，就像上图所示的航线体系结构中的每种功能属于某一层一样。</p>
<p>一个协议层能够利用软件、硬件或两者的结合来实现。诸如HTTP和SMTP这样的应用层协议几乎总是在端系统中用软件实现的，运输层协议也是如此。因为物理层和数据链路层负责处理跨越特定链路的通信，它们通常是实现在与给定链路相联系的网络接口卡中。网络层经常是硬件和软件实现的混合体。还要注意的是，一个第n层协议也分布在构成网路的端系统、分组交换机和其它组件中。这就是说，第n层协议的不同部分常常位于这些网络组件的各部分中。</p>
<p>协议分层特点：</p>
<ul>
<li>概念化、结构化</li>
<li>模块化使更新系统组件更为容易</li>
</ul>
<p>可能存在的缺点：</p>
<ul>
<li>可能冗余较低层的功能</li>
<li>某层的功能可能需要仅在其它某层才出现的信息</li>
</ul>
<p>各层的所有协议被称为协议栈(protocol stack)，因特网的协议栈由5个层次组成：物理层、链路层、网络层、运输层和应用层。</p>
<h4 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1. 应用层"></a>1. 应用层</h4><p>网络应用程序及它们的应用层协议存留的地方，它分布在多个端系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息的分组。我们把这种位于应用层的信息分组成为报文(message)。</p>
<p>常见协议包括：HTTP、SMTP、FTP……</p>
<h4 id="2-运输层"><a href="#2-运输层" class="headerlink" title="2. 运输层"></a>2. 运输层</h4><p>在应用程序端点之间传送应用层报文，运输层分组成为报文段(segment)。有两个协议TCP和UDP，利用其中任意一个都能运输应用层报文。</p>
<p>TCP提供面向连接的服务，这种服务包括了应用层报文向目的地的确保传递和流量控制(即发送方/接收方速率匹配)。它也就长报文划分成短报文，并提供拥塞控制机制。</p>
<p>UDP协议向它的应用程序提供无连接服务，一种不提供不必要服务的服务，没有可靠性，没有流量控制，也没有拥塞控制。</p>
<h4 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3. 网络层"></a>3. 网络层</h4><p>网络层负责将称为数据报(datagram)的网络层分组从一台主机移动到另一台主机。</p>
<p>因特网的网络层包括著名的IP协议，该协议定义了在数据包中的各个字段以及端系统和路由器如何作用于这些字段。仅有一个IP协议，所有具有网络层的因特网组件必须运行IP协议。</p>
<p>网络层也包括决定路由的路由选择协议，它使得数据报根据该路由从源传输到目的地。</p>
<p>尽管网络层包括了IP协议和一些路由选择协议，但通常把它简单地称为IP层，这反映了IP是将因特网连接在一起的粘合剂。</p>
<h4 id="4-链路层"><a href="#4-链路层" class="headerlink" title="4. 链路层"></a>4. 链路层</h4><p>因特网的网络层通过源和目的地之间的一系列路由器路由数据报。为了将分组从一个结点(主机或路由器)移动到路径上的下一个结点，网络层必须依靠该链路层的服务。特别是在每个结点，网络层将数据报下传给链路层，链路层沿着路径将数据报传递给下一个结点。在下个结点，链路层将数据报上传给网络层。</p>
<p>链路层分组称为帧(frame)。</p>
<h4 id="5-物理层"><a href="#5-物理层" class="headerlink" title="5. 物理层"></a>5. 物理层</h4><p>虽然链路层的任务是将整个帧从一个网路元素移动到邻近的网络元素，而物理层的任务是将该帧中的一个一个比特从一个结点移动到下一个结点。</p>
<h3 id="1-2-OSI模型"><a href="#1-2-OSI模型" class="headerlink" title="1.2 OSI模型"></a>1.2 OSI模型</h3><p>因特网协议栈并不是唯一的协议栈，在20世纪70年代后期，国际标准化组织(ISO)提出计算机网路应组织为大约7层，称为开发系统互联(OSI)模型。</p>
<p>五层的功能大致与因特网协议栈对应层相同，因此，我们考虑附加的两个层：表示层和会话层。</p>
<p>表示层的作用是使通信的应用程序能够解释交换数据的含义。这些服务包括数据压缩和数据加密以及数据描述。会话层提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法。</p>
<h2 id="2、封装-encapsulation"><a href="#2、封装-encapsulation" class="headerlink" title="2、封装(encapsulation)"></a>2、封装(encapsulation)</h2><p>在发送主机端，一个应用层报文(application-layer message)被传送给运输层。在最简单情况下，运输层收取到报文并附上附加信息(所谓运输层首部信息)，该首部将被接收端的运输层使用。应用层报文和运输层首部信息一起构成了运输层报文段(transport-layer segment)。运输层报文段因此封装了应用层报文。运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，产生了网络层数据报(network-layer datagram)。该数据报接下来被传递给链路层，链路层增加它自己的链路层首部信息并创建链路层帧(link-layer frame)。所以，我们看到在每一层，一个分组具有两种类型的字段：首部字段和有效载荷字段(payload field)。有效载荷通常是来自上一层的分组。</p>
]]></content>
  </entry>
  <entry>
    <title>Network-003-网络核心</title>
    <url>/2022/02/21/Network-003-%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83/</url>
    <content><![CDATA[<p><strong>网络核心，即由互联因特网端系统的分组交换机和链路构成的网状网络。</strong></p>
<h2 id="1、分组交换"><a href="#1、分组交换" class="headerlink" title="1、分组交换"></a>1、分组交换</h2><p>在各种网络应用中，端系统彼此交换<em>*报文(message)<strong>。报文能够包含协议设计者需要的任何东西，可以执行一种控制功能，也可以包含数据。为了从源端系统向目的端系统发送一个报文，源将长报文划分为较小的数据块，称之为</strong>分组(packet)<strong>。在源和目的之间，每个分组都通过通信链路和分组交换机(packet switch)传送。</strong>*分组以等于该链路最大传输速率的速度通过通信链路传输</em>**。因此，如果某源端系统或分组交换机经过一条链路发送一个L比特的分组，链路传输速率为R比特/秒，则传输该分组的时间为L/R秒。</p>
<blockquote>
<p>交换机主要有两类：路由器和链路层交换机。</p>
</blockquote>
<h3 id="1-1-存储转发传输"><a href="#1-1-存储转发传输" class="headerlink" title="1.1 存储转发传输"></a>1.1 存储转发传输</h3><p>多数分组交换机在链路的输入端使用<strong>存储转发传输(store-and-forward-transmission)机制</strong>。它是指<em><strong>在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组</strong></em>。</p>
<p>我们考虑一个例子，它由两个经一台路由器连接的端系统构成的简单网络：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222124827479.png" alt="image-20220222124827479"></p>
<p>在这里有三个分组，每个分组都是L比特，链路传输速率R比特/秒。那么，在L/R时刻，路由器接收到了第一个分组的完整信息。此时，它开始向目的端系统发送分组1；同时还在接收分组2。以此类推，目的端系统收到这个3个分组需要时间4L/R，即总时延。</p>
<p>通过这个例子我们再考虑由N条速率均为R的链路组成的路径(所以，在源和目的地之间有N-1台路由器)，从源到目的地发送一个分组的总体情况。应用上面的逻辑，我们看到端到端时延是：N * L/R。</p>
<blockquote>
<p>在这里，我们不考虑其它影响传输时间的因素，认为在理想环境下。</p>
</blockquote>
<h3 id="1-2-排队时延和分组丢失"><a href="#1-2-排队时延和分组丢失" class="headerlink" title="1.2 排队时延和分组丢失"></a>1.2 排队时延和分组丢失</h3><p>每个分组交换机有多条链路与之相连，对于每条相连的链路，该分组交换机具有一个<strong>输出缓存</strong>(output buffer)(也成为输出队列output queue)，它<em><strong>用于存储路由器准备发往哪条链路的分组</strong></em>。</p>
<p>如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其它分组，该到达分组必须在该输出缓存中等待。因此，除了存储转发时延以外，分组还要承受输出缓存的**排队时延(queue delay)**。这些时延是变化的，变化程度取决于网络中的拥塞程度。</p>
<p>既然是缓存，那么缓存空间的大小是有限的，一个到达的分组可能发现该缓存已被其它等待传输的分组完全充满了。在这种情况下，将出现**分组丢失(丢包)(packet lost)**，到达的分组或已经排队的分组之一将被丢弃。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222124852358.png" alt="image-20220222124852358"></p>
<h3 id="1-3-转发表和路由选择协议"><a href="#1-3-转发表和路由选择协议" class="headerlink" title="1.3 转发表和路由选择协议"></a>1.3 转发表和路由选择协议</h3><p>通过上面的介绍我们了解到：路由器会从与它相连的一条通信链路得到分组，再将其通过另一条通信链路转发给目的端系统。那么，它是如何转发的呢？</p>
<p>在因特网中，<strong>每个端系统具有一个称为IP地址的地址</strong>。当源主机要向目的端系统发送一个分组时，源在该分组的首部包含了目的地的IP地址(类似于我们写的信，有收信人地址)。当一个分组到达网络中的路由器时，路由器检查该分组的目的地址的一部分，并向一台相邻路由器转发该分组。更特别的是，每台路由器具有一个<em><em>转发表(forwarding table)<strong>，</strong></em>用于将目的地址(或目的地址的一部分)映射称为输出链路</em>**。当某分组到达一台路由器时，路由器检查该地址，并用这个目的地址搜索其转发表，以发现适当的出链路。路由器则将分组导向该出链路。</p>
<p>因特网具有一些特殊的<em><strong>路由选择协议(routing protocol)，用于自动地设置这些转发表</strong></em>。例如，一个路由选择协议可以决定从每台路由器到每个目的地的最短路径，并使用这些路径结果来配置路由器中的转发表。</p>
<h2 id="2、电路交换"><a href="#2、电路交换" class="headerlink" title="2、电路交换"></a>2、电路交换</h2><p>通过网络链路和交换机移动数据有两种基本方法：电路交换(circuit switching)和分组交换。</p>
<p>在电路交换网络中，在端系统间通信会话期间，预留了端系统间通信沿路径所需要的资源(缓存，链路传输速率)。在分组交换网络中，这些资源则不是预留的；会话的报文按需使用这些资源，其后果可能是不得不等待接入通信线路。</p>
<p>以传统的电话网络为例，考虑当一个人通过电话网向另一个人发送信息时所发生的情况。在发送方能够发送信息之前，该网络必须在发送方和接收方之间建立一条连接。这是一个名副其实的连接，因为此时沿着发送方和接收方之间路径上的交换机都将为该连接维护连接状态。用电话的术语来说，该连接被称为一条电路(circuit)。当网络创建这种电路时，它也在连接期间在该网络链路上预留了恒定的传输速率(表示为每条链路传输容量的一部分)。既然已经为该发送方-接收方连接预留了带宽，则发送方能够以确保的恒定速率向接收方传送数据。</p>
<h3 id="2-1-电路交换网路中的复用"><a href="#2-1-电路交换网路中的复用" class="headerlink" title="2.1 电路交换网路中的复用"></a>2.1 电路交换网路中的复用</h3><p>链路中的电路是通过<strong>频分复用</strong>(Frequency-Division Multiplexing，FDM)或<strong>时分复用</strong>(Time-Division Multiplexing，TDM)来实现的。对于FDM，链路的频谱由跨越链路创建的所有连接所共享。特别是，在连接期间链路为每条连接专用一个频段，该频段的宽度就称为**带宽(bandwidth)**。</p>
<p>对于一条TDM链路，时间被划分为固定区间的帧，并且每帧又被划分为固定数量的时隙。当网络跨越一条链路创建一条连接时，网络在每个帧中为该连接指定一个时隙。这些时隙专门由该连接单独使用，一个时隙可用于传送该连接的数据。<strong>对于TDM，一条电路的传输速率等于帧速率乘以一个时隙中比特数量</strong>。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222131128961.png" alt="image-20220222131128961"></p>
<h3 id="2-2-分组交换与电路交换的对比"><a href="#2-2-分组交换与电路交换的对比" class="headerlink" title="2.2 分组交换与电路交换的对比"></a>2.2 分组交换与电路交换的对比</h3><p>分组交换不适合实时服务，因为它的端到端时延是可变和不可预测的。但是它提供了比电路交换更好的带宽共享，并且比电路交换更简单、更有效、实现成本更低。概括而言，嫌餐馆预定麻烦的人宁可要分组交换而不愿意电路交换。</p>
<p>两种形式在多个数据流之间共享链路传输速率的关键差异在于：<em><strong>电路交换不考虑需求，而预先分配了传输链路的使用，这使得已分配而并不需要的链路时间未被利用。另一方面，分组交换按需分配链路使用。链路传输能力将在所有用户之间逐分组地被共享，这些用户有分组需要在链路上传输</strong></em>。</p>
<p>虽然分组交换和电路交换在今天的电信网络中都是普遍采用的方式，但趋势无疑是朝着分组交换方向发展。特别是，电话网经常在昂贵的海外电话部分使用分组交换。</p>
<h2 id="3、网络的网络"><a href="#3、网络的网络" class="headerlink" title="3、网络的网络"></a>3、网络的网络</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222132702020.png" alt="image-20220222132702020"></p>
<p>今天的因特网是一个网络的网络，其结构复杂，由十多个第一次ISP和数十万个较低层ISP组成。ISP覆盖的区域有所不同，有些跨越多个大洲和大洋，有些限于很小的地理区域。较低层的ISP和较高层的ISP相连，较高层ISP彼此互联。用户和内容提供商是较低层ISP的客户，较低层ISP是较高层ISP的客户。近年来，主要的内容提供商也已经创建自己的网络，直接在可能的地方与较低层ISP互联。</p>
]]></content>
  </entry>
  <entry>
    <title>Network-002-网络边缘</title>
    <url>/2022/02/21/Network-002-%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%98/</url>
    <content><![CDATA[<p>前面讲到，通常把与因特网相连的计算机和其它设备称为端系统。因为它们位于因特网的边缘，故而称为端系统。因特网的端系统包括了桌面计算机、服务器和移动计算机，。此外，越来越多的非传统设备正在被作为端系统与因特网相连。</p>
<p>端系统也称为主机，因为它们运行应用程序，这两个术语有时候不作区分(主机 = 端系统)。主机有时又被分为客户(client)和服务器(server)。客户非正式地等同于桌面PC、移动PC和智能手机等，而服务器非正式地等同于更强大的机器。今天，大部分提供搜索结果、电子邮件、Web页面和视频的服务器都属于大型数据中心(data center)。例如，谷歌公司拥有30-50个数据中心，其中许多数据中心都有10万台以上的服务器。</p>
<h2 id="接入网-access-network"><a href="#接入网-access-network" class="headerlink" title="接入网(access network)"></a>接入网(access network)</h2><p>在这里，我们指的是将端系统连接到其边缘路由器(edge router)的物理链路。而边缘路由器是端系统到如何其它远程端系统路径上的第一台路由器。</p>
]]></content>
  </entry>
  <entry>
    <title>HTML-01-表格</title>
    <url>/2022/02/20/HTML-01-%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>现实中，我们经常需要使用表格来表示一些格式化的数据，比如：课程表、成绩单、……同样的，这些需求在网页中也需要。在网页中，我们通过table标签来创建一个表格；在table中使用tr表示表格中的一行，有几个tr就有几行；在tr中使用td表示一个单元格，有几个td就有几个单元格。其中，可以使用rowspan属性来纵向(向下)的合并单元格，colspan属性横向(向右)合并单元格。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>D2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h2><p>我们可以将一个表格分成三部分：</p>
<ul>
<li>头部 thead</li>
<li>主体 tbody</li>
<li>底部 tfoot</li>
</ul>
<p>在头部里面，我们使用th标签表示头部的单元格(而不是td)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&#x27;50%&#x27;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>收入<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>支出<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222091308996.png" alt="image-20220222091308996"></p>
<h2 id="表格的样式"><a href="#表格的样式" class="headerlink" title="表格的样式"></a>表格的样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">                <span class="comment">/* border-spacing: 指定边框之间的距离 */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* border-spacing: 0px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">                <span class="comment">/* border-collapse: collapse; 设置边框的合并 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="comment">/* 默认情况下元素在td中是垂直居中的 可以通过 vertical-align 来修改*/</span></span></span><br><span class="line"><span class="css">                <span class="attribute">vertical-align</span>:middle;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center; </span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">            如果表格中没有使用tbody而是直接使用tr，</span></span></span><br><span class="line"><span class="comment"><span class="css">            那么浏览器会自动创建一个tbody，并且将tr全都放到tbody中</span></span></span><br><span class="line"><span class="comment"><span class="css">            tr不是table的子元素</span></span></span><br><span class="line"><span class="comment"><span class="css">            */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd)&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">                <span class="comment">/* 将元素设置为单元格 td  */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="css">                <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唐僧<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女儿国<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>在现实生活中，表单用于提交数据。网页中的表单用于将本地的数据提交到远程服务器，我们使用form标签来创建一个表单。</p>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>表单要提交的服务器的地址</p>
<h4 id="文本框-text"><a href="#文本框-text" class="headerlink" title="文本框(text)"></a>文本框(text)</h4><p>数据要提交到服务器中，必须要为元素指定一个name属性值</p>
<h4 id="密码框-password"><a href="#密码框-password" class="headerlink" title="密码框(password)"></a>密码框(password)</h4><h4 id="单选按钮-radio"><a href="#单选按钮-radio" class="headerlink" title="单选按钮(radio)"></a>单选按钮(radio)</h4><p>像这种选择框，必须要指定一个value属性，value属性最终会作为用户填写的值传递给服务器。</p>
<h4 id="多选框-checkbox"><a href="#多选框-checkbox" class="headerlink" title="多选框(checkbox)"></a>多选框(checkbox)</h4><h4 id="下拉列表-select"><a href="#下拉列表-select" class="headerlink" title="下拉列表(select)"></a>下拉列表(select)</h4><h4 id="提交按钮-submit"><a href="#提交按钮-submit" class="headerlink" title="提交按钮(submit)"></a>提交按钮(submit)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span></span><br><span class="line">        文本框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        单选按钮 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        多选框 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;iii&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="readonly-将表单项设置为只读，数据不会提交"><a href="#readonly-将表单项设置为只读，数据不会提交" class="headerlink" title="readonly 将表单项设置为只读，数据不会提交"></a>readonly 将表单项设置为只读，数据不会提交</h4><h4 id="disabled-将表单项设置为禁用，数据不会提交"><a href="#disabled-将表单项设置为禁用，数据不会提交" class="headerlink" title="disabled 将表单项设置为禁用，数据不会提交"></a>disabled 将表单项设置为禁用，数据不会提交</h4><h4 id="autofocus-设置表单项自动获取焦点"><a href="#autofocus-设置表单项自动获取焦点" class="headerlink" title="autofocus 设置表单项自动获取焦点"></a>autofocus 设置表单项自动获取焦点</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222093840570.png" alt="image-20220222093840570"></p>
<h4 id="autocomplete-“off”-关闭自动补全"><a href="#autocomplete-“off”-关闭自动补全" class="headerlink" title="autocomplete = “off” 关闭自动补全"></a>autocomplete = “off” 关闭自动补全</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220222093923816.png" alt="image-20220222093923816"></p>
<p>没有关闭自动补全，浏览器会自动列出曾经输入的相关数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">readonly</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 重置按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通的按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS-04-字体&amp;背景色</title>
    <url>/2022/02/20/CSS-04-%E5%AD%97%E4%BD%93-%E8%83%8C%E6%99%AF%E8%89%B2/</url>
    <content><![CDATA[<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul>
<li><p>color 设置字体颜色</p>
</li>
<li><p>font-size 字体的大小</p>
<p>和font-size相关的单位有：em(相当于当前元素的一个font-size)、rem(相当于根元素的一个font-size)。</p>
</li>
<li><p>font-family 字体族（字体的格式），可选值有：</p>
<ul>
<li>serif 衬线字体</li>
<li>sans-serif 非衬线字体</li>
<li>monospace 等宽字体</li>
</ul>
<p>指定字体的类别，浏览器会自动使用该类别下的字体。font-family可以同时指定多个字体，多个字体间使用 , 隔开，字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推。</p>
</li>
<li><p>font-face 可以将服务器中的字体直接提供给用户去使用，但是存在一些问题，比如：加载速度、版权、字体格式等。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="comment">/* 指定字体的名字，要使用时填写这个名字 */</span></span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&#x27;myfont&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 服务器中字体的路径 */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font/ZCOOLKuaiLe-Regular.ttf&#x27;</span>).<span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图标字体-iconfont"><a href="#图标字体-iconfont" class="headerlink" title="图标字体(iconfont)"></a>图标字体(iconfont)</h2><p>在网页中，我们经常需要使用一些图标，这些图标可以通过图片来引入，但是图片本身比较大，并且非常不灵活。所以在使用图标时，我们还可以将图标直接设置为字体，然后通过font-face的形式来对字体进行引入，这样我们就可以通过使用字体的形式来使用图标。</p>
<h4 id="fontawesome-使用步骤"><a href="#fontawesome-使用步骤" class="headerlink" title="fontawesome 使用步骤"></a>fontawesome 使用步骤</h4><ol>
<li>下载 <a href="https://fontawesome.com/">https://fontawesome.com/</a></li>
<li>解压</li>
<li>将css和webfonts移动到项目中</li>
<li>将all.css引入到网页中</li>
<li>使用图标字体，直接通过类名使用图标字体，比如：class=”fas fa-bell”</li>
</ol>
<h4 id="通过伪元素嘞设置图标字体"><a href="#通过伪元素嘞设置图标字体" class="headerlink" title="通过伪元素嘞设置图标字体"></a>通过伪元素嘞设置图标字体</h4><ol>
<li>找到要设置图标的元素通过before或after选中</li>
<li>在content中设置字体的编码</li>
<li>设置字体的样式</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;/f1b0&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Font Awesome 5 Free&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过实体嘞使用图标字体"><a href="#通过实体嘞使用图标字体" class="headerlink" title="通过实体嘞使用图标字体"></a>通过实体嘞使用图标字体</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas&quot;</span>&gt;</span><span class="symbol">&amp;#xf0f3;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="阿里的字体库"><a href="#阿里的字体库" class="headerlink" title="阿里的字体库"></a>阿里的字体库</h2><h2 id="行高-line-height"><a href="#行高-line-height" class="headerlink" title="行高(line height)"></a>行高(line height)</h2><p>行高指的是文字占有的实际高度，可以通过 line-height 来设置行高。它可以直接指定一个大小(px em)，也可以直接为行高设置一个整数(行高将会是字体的指定的倍数)。</p>
<p>行高经常还用来设置文字的行间距，行间距 = 行高 - 字体大小。</p>
<p>可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中。</p>
<h4 id="字体框"><a href="#字体框" class="headerlink" title="字体框"></a>字体框</h4><p>就是字体存在的格子，设置font-size实际上就是在设置字体框的高度，而行高会在字体框的上下平均分配。</p>
<h2 id="字体的简写属性-font"><a href="#字体的简写属性-font" class="headerlink" title="字体的简写属性(font)"></a>字体的简写属性(font)</h2><p>语法：字体大小/行高 字体族</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* font: 50px/2  微软雅黑, &#x27;Times New Roman&#x27;, Times, serif; */</span></span><br><span class="line">    <span class="attribute">font</span>: bold italic <span class="number">50px</span>/<span class="number">2</span> 微软雅黑, <span class="string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行高可以省略不写，有默认值。</p>
<p>font-weight 字重 字体的加粗，可选值有：</p>
<ul>
<li>normal 默认值，不加粗</li>
<li>bold 加粗</li>
<li>100-900 九个级别(没什么用)</li>
</ul>
<p>font-style 字体的风格</p>
<ul>
<li>normal 正常的</li>
<li>italic 斜体</li>
</ul>
<h2 id="文本的样式"><a href="#文本的样式" class="headerlink" title="文本的样式"></a>文本的样式</h2><p>text-align 文本的水平对齐</p>
<ul>
<li>left</li>
<li>right</li>
<li>center</li>
<li>justify 两端对齐</li>
</ul>
<p>vertical-align 设置元素垂直对齐的方式</p>
<ul>
<li>baseline 默认，基线对齐</li>
<li>top 顶部对齐</li>
<li>bottom 底部对齐</li>
<li>middle 居中对齐</li>
</ul>
<p>text-decoration 设置文本修饰</p>
<ul>
<li>none </li>
<li>underline 下划线</li>
<li>line-through 删除线</li>
<li>overline 上划线</li>
</ul>
<p>white-space 设置网页如何处理空白</p>
<ul>
<li>normal 正常</li>
<li>nowrap 不换行</li>
<li>pre 保留空白</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>background-color 设置背景颜色</p>
<p>background-image 设置背景图片</p>
<ul>
<li>可以同时设置背景图片和颜色，这样背景颜色将会成为图片的背景色</li>
<li>如果背景的图片小于元素，则背景图片会自动在元素中平铺，将元素铺满</li>
<li>如果背景的图片大于元素，将有一部分背景无法完全显示</li>
<li>如果背景图片和元素一样大，则会直接正常显示</li>
</ul>
<p>background-repeat 设置背景的重复方式</p>
<ul>
<li>repeat 默认值，背景会沿着x轴、y轴双方向重复</li>
<li>repeat-x 沿着x轴方向重复</li>
<li>repeat-y</li>
<li>no-repeat</li>
</ul>
<p>background-position 设置背景图片的位置</p>
<ul>
<li>通过top、left、right、bottom、center几个表示方位的词来设置背景图片的位置，使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是center。</li>
<li>通过偏移量来指定背景图片的位置：水平方向的偏移量 垂直方向偏移量。</li>
</ul>
<p>background-clip 设置背景范围</p>
<ul>
<li>border-box 默认，背景会出现在边框的下边</li>
<li>padding-box 背景不会出现在边框，只出现在内容区和内边距</li>
<li>content-box 背景只会出现在内容区</li>
</ul>
<p>background-origin 背景图片的偏移量计算的原点</p>
<ul>
<li>padding-box 默认，background-position从内边距处开始计算</li>
<li>content-box </li>
<li>border-box </li>
</ul>
<p>background-size 设置背景图片大小</p>
<ul>
<li><p>第一个值表示宽度</p>
</li>
<li><p>第二个值表示高度</p>
<p>只写一个，默认第二个是auto</p>
</li>
<li><p>cover 图片的比例不变，将元素铺满</p>
</li>
<li><p>contain 图片比例不变，将图片在元素中完整显示</p>
</li>
</ul>
<p>background-attachment 设置背景图片是否跟随元素移动</p>
<ul>
<li>scroll 默认，移动</li>
<li>fixed 背景固定</li>
</ul>
<p>background 背景相关的简写属性，所有背景相关的样式都可以通过该样式来设置，并且没有顺序要求，也没有哪个属性是必须写的。只是要注意：</p>
<ul>
<li><p>background-size必须写在background-position的后边，并且使用 / 隔开</p>
<p>background-position/background-size</p>
</li>
<li><p>background-origin、background-clip两个样式，origin要在clip前边</p>
</li>
</ul>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其它颜色的过渡效果。</p>
<blockquote>
<p>渐变是图片，需要通过background-image来设置</p>
</blockquote>
<p>linear-gradient() 线性渐变，颜色沿着一条直线发生变化</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 红色开头在左边，黄色结尾在右边，to right指明的方向向右 */</span></span><br><span class="line">linear-gradient(<span class="selector-tag">to</span> <span class="attribute">right</span>, red, yellow);</span><br></pre></td></tr></table></figure>

<p>除了to right，还有to left、to bottom、to top、deg(表示度数)、turn(表示圈)。渐变可以同时指定多个颜色，多个颜色默认情况平均分配，也可以手动指定渐变的分布情况。</p>
<blockquote>
<p>repeating-linear-gradient() 可以平铺的线性渐变</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(to right ,red, yellow <span class="number">50px</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>radial-gradient() 径向渐变(放射性的效果)</p>
<p>默认情况下径向渐变的形状根据元素的形状来计算，比如：正方形 —&gt; 圆形， 长方形 —&gt; 椭圆形。我们也可以手动指定径向渐变的大小：circle、ellipse。</p>
<p>还可以指定渐变的位置：radial-gradient(大小 at 位置, 颜色 位置, 颜色 位置, 颜色 位置)</p>
<p>大小：</p>
<ul>
<li>circle 圆形</li>
<li>ellipse 椭圆形</li>
<li>closest-side 近边</li>
<li>closest-corner 近角</li>
<li>farthest-side 远边</li>
<li>farthest-corner 远角</li>
</ul>
<p>位置</p>
<ul>
<li>top right left center bottom</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(farthest-corner at <span class="number">100px</span> <span class="number">100px</span>, red , <span class="number">#bfa</span>)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS-03-定位</title>
    <url>/2022/02/20/CSS-03-%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>定位(position)是一种更加高级的布局手段，通过定位可以将元素摆放到页面的任意位置。使用 position 属性来设置定位，可选值有：</p>
<ul>
<li>static 默认值，元素是静止的没有开启定位</li>
<li>relative 开启元素的相对定位</li>
<li>absolute 开启元素的绝对定位</li>
<li>fixed 开启元素的固定定位</li>
<li>sticky 开启元素的粘滞定位</li>
</ul>
<h2 id="偏移量-offset"><a href="#偏移量-offset" class="headerlink" title="偏移量(offset)"></a>偏移量(offset)</h2><p>当元素开启了定位以后，可以通过偏移量来设置元素的位置。</p>
<ul>
<li>top 定位元素和定位位置上边的距离</li>
<li>bottom 定位元素和定位位置下边的距离</li>
</ul>
<blockquote>
<p>定位元素垂直方向的位置由top和bottom两个属性来控制，通常情况下我们只会使用其中一个。tom值越大，定位元素越往下移动；bottom值越大，定位元素越向上移动。</p>
</blockquote>
<ul>
<li>left 定位元素和定位位置的左侧距离</li>
<li>right 定位元素和定位位置的右侧距离</li>
</ul>
<blockquote>
<p>定位元素水平方向的位置由left和right两个属性控制，通常也只会用一个。left越大越靠右；right越大越靠左。</p>
</blockquote>
<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><ul>
<li>元素开启相对定位以后，如果不设置偏移量，元素不会发生任何变化。</li>
<li>相对定位是参照元素在文档流中的位置进行定位的。</li>
<li>相对定位会提升元素的层级。</li>
<li>相对定位不会使元素脱离文档流。</li>
<li>相对定位不会改变元素的性质，块还是块，行内还是行内。</li>
</ul>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul>
<li>开启绝对定位后，如果不设置偏移量，元素不会发生任何变化。</li>
<li>绝对定位元素是相对于其包含块(containing block)进行定位的。<ul>
<li>正常情况下，包含块就是里当前元素最近的祖先块元素。</li>
<li>绝对定位的包含块就是离它最近的开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是它的包含块。</li>
</ul>
</li>
<li>会使元素提升一个层级。</li>
<li>会从文档流中脱离。</li>
<li>会改变元素性质，行内变成块，块的高度被内容撑开。</li>
</ul>
<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样。唯一不同的是固定定位永远参照浏览器的视窗进行定位，固定定位的元素不会随网页的滚动条滚动。</p>
<h2 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h2><p>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时将其固定。</p>
<h2 id="绝对定位元素的布局"><a href="#绝对定位元素的布局" class="headerlink" title="绝对定位元素的布局"></a>绝对定位元素的布局</h2><p><strong>left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块的内容区的宽度</strong></p>
<p>当我们开启绝对定位后，水平方向的布局等式需要添加 left 和 right 两个值，此时规则和之前一样，只是多添加了两个值。当发生过度约束时，如果9个值中没有auto，则自动调整right的值以使等式满足。可以设置为auto的属性有：margin、width、left、right。</p>
<p>因为left和right的值默认都是auto，所以如果不指定left和right，则等式不满足时，会自动调整这两个值。</p>
<p>垂直方向布局的等式也必须要满足：<strong>top + margin-top/bottom + padding-top/bottom + border-top/bottom + height = 包含块的高度</strong></p>
<h2 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h2><p>对于开启了定位元素，可以通过z-index属性来指定元素的层级。z-index需要一个整数作为参数，值越大元素的层级越高，元素的层级越高越优先显示。如果元素的层级一样，则优先显示靠下的元素。祖先的元素的层级再高也不会盖住后代元素。</p>
]]></content>
  </entry>
  <entry>
    <title>CSS-02-浮动</title>
    <url>/2022/02/20/CSS-02-%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="浮动简介"><a href="#浮动简介" class="headerlink" title="浮动简介"></a>浮动简介</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是三个div，效果如图：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220054247956.png" alt="image-20220220054247956"></p>
<p>通过浮动可以使一个元素向其父元素的左侧或右侧移动，我们使用 float 属性来设置子元素的浮动，可选值有：</p>
<ul>
<li>none 默认值，不浮动</li>
<li>left 元素向左浮动</li>
<li>right 元素向右浮动</li>
</ul>
<p>注意，元素设置浮动以后，水平布局的等式便不需要强制成立了。因为设置浮动以后，元素会完全从文档流中脱离，不再占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动。</p>
<p>我们给每个div的样式加上对应的浮动之后，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">float</span>: left; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它就变成下面这个样子，三个div都在水平方向上排列了：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220054514054.png" alt="image-20220220054514054"></p>
<h2 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h2><ol>
<li>浮动元素会完全脱离文档流，不再占据文档流中的位置。</li>
<li>设置浮动以后元素会向父元素的左侧或右侧移动。</li>
<li>浮动元素默认不会从父元素中移出。</li>
<li>浮动元素向左或向右移动时，不会超过它前边的其它浮动元素。</li>
<li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移。</li>
<li>浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高。</li>
<li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果。</li>
<li>元素设置浮动以后，将会从文档流中脱离，元素的一些特点也会发生变化：<ul>
<li>块元素<ul>
<li>块元素不再独占页面的一行。</li>
<li>宽度和高度默认都被内容撑开。</li>
</ul>
</li>
<li>行内元素<ul>
<li>脱离文档流以后会变成块元素，特点和块元素一样（也就是说，脱离文档流以后，不需要再区分块和行内了）。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="网页的布局"><a href="#网页的布局" class="headerlink" title="网页的布局"></a>网页的布局</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>, <span class="selector-tag">main</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置头部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置主体 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置左侧的导航 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置中间的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">article</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">580px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置右侧的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置底部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建网页的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧导航 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 中间的内容 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 右边的边栏 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 网页的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="高度塌陷的问题"><a href="#高度塌陷的问题" class="headerlink" title="高度塌陷的问题"></a>高度塌陷的问题</h2><p>在浮动布局中，父元素的高度默认是被子元素撑开的。但是当子元素浮动后，它会完全脱离文档流，而子元素从文档流中脱离意味着将会无法撑起父元素的高度，这也就导致了父元素的高度丢失。</p>
<p>父元素高度丢失以后，其下的元素会自动上移，导致页面布局混乱。所以高度塌陷是浮动布局中比较常见的一个问题，这个问题我们必须要进行处理！</p>
<h2 id="BFC-Block-Formatting-Context"><a href="#BFC-Block-Formatting-Context" class="headerlink" title="BFC(Block Formatting Context)"></a>BFC(Block Formatting Context)</h2><p>块级格式化环境。BFC是一个CSS中的一个隐含属性，可以为一个元素开启BFC，开启后该元素会变成一个独立的布局区域。</p>
<p>元素开启BFC后的特点：</p>
<ul>
<li>不会被浮动元素所覆盖。</li>
<li>子元素和父元素外边距不会重叠。</li>
<li>可以包含浮动的子元素。</li>
</ul>
<p>可以通过一些特殊方式来开启元素的BFC：</p>
<ul>
<li>设置元素的浮动（不推荐）。</li>
<li>将元素设置为行内块元素（不推荐）。</li>
<li>将元素的overflow设置为一个非visible的值（常用方式：为元素设置overflow: hidden 开启其BFC，以使其可以包含浮动元素）。</li>
</ul>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        <span class="comment">/* clear: both; */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从上面的例子中可以看到，由于box1的浮动，导致box3的位置上移了，也就是box3受到了浮动的影响，位置发生了改变。但有时，我们并不希望某个元素因为其它元素浮动的影响而改变位置。这时，我们就可以通过 clear 属性来清楚浮动元素对当前元素所产生的影响，可选值有：</p>
<ul>
<li>left 清楚左侧浮动元素对当前元素的影响</li>
<li>right 清楚右侧浮动元素对当前元素的影响</li>
<li>both 清楚两侧中最大影响的那侧</li>
</ul>
<p>原理：设置清楚浮动以后，浏览器会自动为元素添加一个上外边距，以使其位置不受其它元素的影响。</p>
<h2 id="高度塌陷的最终解决方案"><a href="#高度塌陷的最终解决方案" class="headerlink" title="高度塌陷的最终解决方案"></a>高度塌陷的最终解决方案</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* overflow: hidden; */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      box1</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h2><p>这个样式可以同时解决高度塌陷和外边距重叠的问题，当你在遇到这些问题时，直接使用clearfix这个类即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box1::before&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            display: table;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS-01-盒子模型</title>
    <url>/2022/02/19/CSS-01-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><p>网页是一个多层的结构，一层摞着一层。我们通过CSS可以分别为每一层来设置样式，而作为用户来讲他们只能看到最顶上的一层。在所有这些层中，最底下的一层称为“<strong>文档流</strong>”。文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列。对于我们来讲，元素主要有两个状态：在文档流中和不在文档流中(脱离文档流)。</p>
<h3 id="元素在文档流中特点"><a href="#元素在文档流中特点" class="headerlink" title="元素在文档流中特点"></a>元素在文档流中特点</h3><ul>
<li>块元素<ul>
<li>块元素会在页面中独占一行（自上而下垂直排列）。</li>
<li>默认宽度是父元素的全部（会把父元素撑满）。</li>
<li>默认高度是被内容撑开（子元素）。</li>
</ul>
</li>
<li>行内元素<ul>
<li>行内元素不会独占页面的一行，只占自身的大小。</li>
<li>行内元素在页面中自左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（与书写习惯一致）。</li>
<li>行内元素的默认宽度和高度都是被内容撑开。</li>
</ul>
</li>
</ul>
<h2 id="盒模型-box-model"><a href="#盒模型-box-model" class="headerlink" title="盒模型(box model)"></a>盒模型(box model)</h2><p>盒模型，也叫盒子模型、框模型。CSS将页面中的所有元素都设置为了一个矩形的盒子，从而将我们对页面的布局变成了将不同的盒子摆放到不同的位置。每一个盒子都由以下几部分组成：</p>
<ul>
<li><p>内容区(content)</p>
</li>
<li><p>外边距(padding)</p>
</li>
<li><p>边框(border)</p>
</li>
<li><p>内边距(margin)</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220052638085.png" alt="image-20220220052638085"></p>
</li>
</ul>
<h2 id="内容区-content"><a href="#内容区-content" class="headerlink" title="内容区(content)"></a>内容区(content)</h2><p>元素中的所有的子元素和文本内容都在内容区中排列，内容区的大小由 width 和 height 两个属性来设置。其中，width设置内容区的宽度；height设置内容区的高度。</p>
<h2 id="边框-border"><a href="#边框-border" class="headerlink" title="边框(border)"></a>边框(border)</h2><p>边框属于盒子边缘，边框里面属于盒子内容，出了边框都是盒子的外部，而边框的大小会影响到整个盒子的大小。</p>
<p>如果要设置边框，至少需要设置三个样式：</p>
<ul>
<li>边框的宽度 border-width</li>
<li>边框的颜色 border-color</li>
<li>边框的样式 border-style</li>
</ul>
<h3 id="border-width"><a href="#border-width" class="headerlink" title="border-width"></a>border-width</h3><p>默认值：一般都是3个像素。</p>
<p>通过四个值来指定四个方向的边框的宽度，这四个值的指定有四种情况：</p>
<ul>
<li>四个值：上 右 下 左</li>
<li>三个值：上 左右 下</li>
<li>两个值：上下 左右</li>
<li>一个值：上下左右</li>
</ul>
<p>eg：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 代码仅作实例使用 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="comment">/* 说明边框的上边宽度是10px、右边宽度是20px、下边宽度是30px、左边宽度是40px，下面以此类推 */</span></span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了用border-width，还可以使用border-xxx-width来单独指定一个边的宽度，xxx可以是top、right、bottom、left。</p>
<p>eg：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="border-color"><a href="#border-color" class="headerlink" title="border-color"></a>border-color</h3><p>默认使用color的颜色值。同border-color一样可以分别指定四个边，也可以使用border-xxx-color。</p>
<p>eg</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 没写border-color，就和color的颜色一样，color默认是黑色 */</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h3><p>默认值none，表示没有边框。</p>
<ul>
<li>solid 表示实线</li>
<li>dotted 点状虚线</li>
<li>dashed 虚线</li>
<li>double 双线</li>
</ul>
<p>同样的也可以分别指定四个边，和使用border-xxx-style。</p>
<blockquote>
<p>虽然我们之前说要使用边框，至少需要设置三个样式，但实际上这三个样式都有默认值，因此也可以省略不写。但不写默认的border-style是none，也就是没有边框。也就是说，我们可以省略width和color，但不能省略style。</p>
</blockquote>
<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p>边框的简写属性，通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求。</p>
<p>eg：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，它也有border-xxx。</p>
<h2 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h2><p>内边距就是内容区和边框之间的距离。一共有四个方向的内边距：</p>
<ul>
<li>padding-top</li>
<li>padding-right</li>
<li>padding-bottom</li>
<li>padding-left</li>
</ul>
<p>内边距的设置会影响到盒子的大小，背景颜色也会延伸到内边距上。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">10px</span> orange solid;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 内边距的简写属性padding，规则同border-width */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219232031045.png" alt="image-20220219232031045"></p>
<p>可以看到，一个盒子的可见框的大小，有内容区、内边距和边框共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算。</p>
<h2 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h2><p>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置以及盒子实际占用空间。一共有四个方向的外边距：</p>
<ul>
<li>margin-top 上外边距，设置一个正值，元素会向下移动。</li>
<li>margin-right 默认情况下设置margin-right不会产生任何效果。</li>
<li>margin-bottom 下外边距，设置一个正值，其下边的元素会向下移动。</li>
<li>margin-left 左外边距，设置一个正值，元素会向右移动。</li>
</ul>
<p>元素在页面中是按照自左向右的顺序排列的，所以默认情况下如果我们设置的左和上外边距会移动元素自身，而设置下和右外边距会移动其它元素。</p>
<p>简写属性margin，同时设置四个方向的外边距，用法和padding一样。</p>
<h2 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">	<span class="comment">/* 表示width的值默认是auto */</span></span><br><span class="line">	<span class="attribute">width</span>: auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元素在其父元素中水平方向的位置由以下几个元素共同决定：</p>
<ul>
<li>margin-left</li>
<li>border-left</li>
<li>padding-left</li>
<li>width</li>
<li>padding-right</li>
<li>border-right</li>
<li>margin-right</li>
</ul>
<p>并且，一个元素在其父元素中，水平布局必须要满足以下等式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度 （必须满足）</span><br></pre></td></tr></table></figure>

<p>如果相加的结果使等式不成立，则称为过度约束，并且等式会自动调整。调整的情况为：如果这七个值中没有为auto的情况，则浏览器会自动调整margin-right的值以使等式成立。</p>
<p>这七个值中有三个值的和设置为auto：width、margin-left、margin-right。</p>
<ol>
<li>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0。</li>
<li>如果将三个值都设置为auto，则外边距都是0，宽度最大。</li>
<li>如果将两个外边距值设置为auto，宽度固定值，则会将外边距设置为相同的值。</li>
</ol>
<p>所有我们经常利用第三个特点来使一个元素在其父元素中水平居中，eg：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="垂直方向的布局"><a href="#垂直方向的布局" class="headerlink" title="垂直方向的布局"></a>垂直方向的布局</h2><p>在文档流中介绍了：默认情况下父元素的高度是被内容撑开的。子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出。我们可以使用 overflow 属性来设置父元素如何处理溢出的子元素，可选值有：</p>
<ul>
<li>visible 默认值，子元素从父元素中溢出，在父元素外部的位置显示</li>
<li>hidden 移除内容会被裁剪不显示</li>
<li>scroll 生成两个滚动条，通过滚动条来查看完整内容</li>
<li>auto 根据需要生成滚动条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。</span><br><span class="line">      这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。</span><br><span class="line">      我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。</span><br><span class="line">      枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。</span><br><span class="line">      鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。</span><br><span class="line">      哇的一声，夜游的恶鸟飞过了。</span><br><span class="line">      我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。</span><br><span class="line">      后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。</span><br><span class="line">      猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。</span><br><span class="line">      我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。</span><br><span class="line">      一九二四年九月十五日。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用overflow-x和overflow-y来分别设置横向和纵向的效果。</p>
</blockquote>
<h2 id="外边距的折叠"><a href="#外边距的折叠" class="headerlink" title="外边距的折叠"></a>外边距的折叠</h2><p>相邻的垂直方向的外边距会发生重叠现象，分为兄弟元素和父子元素。</p>
<p>兄弟元素间的相邻外边距会取两者之间的较大值（两者都是正值），特殊情况：</p>
<ul>
<li>如果相邻的外边距一正一负，则取两者的和。</li>
<li>如果相邻的外边距都是负值，则取两者中绝对值较大的。</li>
</ul>
<p>兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理。</p>
<p>父子元素间的相邻外边距，子元素会传递给父元素（上外边距）。父子外边距的折叠会影响到页面的布局，必须要进行处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置一个下外边距 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置一个上外边距 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1兄弟元素有一个下外边距200px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2兄弟元素有一个上外边距100px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">      box3父元素</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>box4子元素有一个上外边距，自身往上移100px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h2><p>行内元素不支持设置宽度和高度，可以设置padding、border、margin，但是垂直方向padding、border、margin不会影响页面的布局。</p>
<p>display 用来设置元素显示的类型，可选值：</p>
<ul>
<li>inline 将元素设置为行内元素</li>
<li>block 将元素设置为块元素</li>
<li>inline-block 将元素设置为行内块元素（既可以设置宽度和高度又不会独占一行）</li>
<li>table 将元素设置为一个表格</li>
<li>none 元素不在页面中显示</li>
</ul>
<p>visibility 用来设置元素的显示状态，可选值：</p>
<ul>
<li>visible 默认值，在页面中正常显示</li>
<li>hidden 在页面中隐藏不显示，但是依然占据页面的位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.s1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">             <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220001511145.png" alt="image-20220220001511145"></p>
<h2 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h2><p>通常情况下，浏览器都会为元素设置一些默认样式，但是这些默认的样式会影响到页面的布局，因此编写网页时必须去除浏览器的默认样式（PC端的页面）。</p>
<p>重置样式表就是专门用来对浏览器的样式进行重置的。其中：</p>
<ul>
<li>reset.css 是直接去除了浏览器的默认样式</li>
<li>normalize.css 是对默认样式进行了统一</li>
</ul>
<p>要是用着两个样式表，在head中使用link标签引入即可，例如使用reset.css：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>reset.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* v2.0 | 20110126</span></span><br><span class="line"><span class="comment">  http://meyerweb.com/eric/tools/css/reset/ </span></span><br><span class="line"><span class="comment">  License: none (public domain)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">font</span>: inherit;</span><br><span class="line">	<span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">	<span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">	<span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="盒子的尺寸"><a href="#盒子的尺寸" class="headerlink" title="盒子的尺寸"></a>盒子的尺寸</h2><p>默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定。而 box-sizing 是用来设置盒子尺寸的计算方式（设置width和height的作用），可选值有：</p>
<ul>
<li>content-box 默认值，宽度和高度用来设置内容区的大小。</li>
<li>border-box 宽度和高度用来设置整个盒子可见框的大小，这时候，width和height指的就是内容区、内边距和边框的总大小。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="轮廓和圆角"><a href="#轮廓和圆角" class="headerlink" title="轮廓和圆角"></a>轮廓和圆角</h2><p>box-shadow 用来设置元素的阴影效果（阴影不会影响页面布局）：</p>
<ul>
<li>第一个值，水平偏移量，设置阴影的水平位置，正值向右移动，负值向左移动。</li>
<li>第二个值，垂直偏移量，设置阴影的水平位置，正值向下移动，负值向上移动。</li>
<li>第三个值，阴影的模糊半径。</li>
<li>第四个值，阴影的颜色。</li>
</ul>
<p>outline 用来设置元素的轮廓线，用法和border一模一样，和边框不同在于：轮廓不会影响可见框的大小。</p>
<p>border-radius 用来设置圆角，圆角设置的是圆的半径大小。</p>
<ul>
<li>border-top-left-radius</li>
<li>border-top-right-radius</li>
<li>border-bottom-left-radius</li>
<li>border-bottom-right-radius</li>
</ul>
<p>border-radius可以分别指定四个角的圆角：</p>
<ul>
<li>四个值：左上 右上 右下 左下</li>
<li>三个值：左上 右上/左下 右下</li>
<li>两个值：左上/右下 右上/左下</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">outline</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        <span class="comment">/* border-radius: 20px 400px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 将元素设置为一个圆形 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220004222713.png" alt="image-20220220004222713"></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot-请求处理</title>
    <url>/2022/02/13/SpringBoot-%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h2><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.request.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/20 14:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">测试REST风格：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220145534138.png" alt="image-20220220145534138"></p>
<p>来到WebMvcAutoConfiguration中，可以看到，如果我们没有配置HiddenHttpMethodFilter，那么需要在配置文件中开启spring.mvc.hiddenmethod.filter，而默认是不开启的（matchIfMissing默认等于false）。因此，SpringBoot要实现Rest风格的请求，还需要在配置文件中配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span> </span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="为什么在form表单中添加一个隐藏域？"><a href="#为什么在form表单中添加一个隐藏域？" class="headerlink" title="为什么在form表单中添加一个隐藏域？"></a>为什么在form表单中添加一个隐藏域？</h4><p>我们知道，form表单只能处理get和post请求，那为了支持Rest风格，我们就要想办法让它支持其它诸如delete、put等请求，为了实现这个功能，我们依旧在表单发起一个post请求，但是我们添加一个隐藏域，在隐藏域中配置一个“_method”属性，属性的值就是我们要请求的方式。</p>
<h4 id="隐藏域的值为什么是“-method”"><a href="#隐藏域的值为什么是“-method”" class="headerlink" title="隐藏域的值为什么是“_method”"></a>隐藏域的值为什么是“_method”</h4><p>hiddenHttpMethodFilter组件返回了一个OrderedHiddenHttpMethodFilter，OrderedHiddenHttpMethodFilter继承了HiddenHttpMethodFilter。来到HiddenHttpMethodFilter的doFilterInternal方法，我们知道，当form表单发起请求后，请求会来到这里进行处理，然后执行doFilter方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   HttpServletRequest requestToUse = request;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">         String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">         <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">            requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先它会判断你请求的方法是否是post方法，并且请求没有异常。接下来，它会获取请求中的“this.methodParam”参数的值，而this.methodParam就在doFilterInternal方法上面已经赋值为“_method”，也就是说：String paramValue = request.getParameter(this.methodParam) 其实就是在获取请求参数中“_method”的值：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220150746201.png" alt="image-20220220150746201"></p>
<p>接下来，判断你的值是否为空，然后，它通过 String method = paramValue.toUpperCase(Locale.ENGLISH) 将你传入的“_method”的值转换成大写（因此，我们在form表单中填的delete无论大小写均可，最后SpringBoot都会帮你转成大写）。</p>
<p>然后来到 ALLOWED_METHODS.contains(method) 判断我们传入的“_method”是否属于put、delete、patch的一种：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220152412969.png" alt="image-20220220152412969"></p>
<p>然后再经过一个包装器，将我们的DELETE包装到请求中：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220152507911.png" alt="image-20220220152507911"></p>
<p>最后将包装好的request作为参数传入doFilter方法处理请求，此时request中的method就是DELETE了。</p>
<h4 id="如何自定义“-method”"><a href="#如何自定义“-method”" class="headerlink" title="如何自定义“_method”"></a>如何自定义“_method”</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220152833854.png" alt="image-20220220152833854"></p>
<p>DEFAULT_METHOD_PARAM是一个常量，我们无法改变，但是我们可以改变HiddenHttpMethodFilter中的methodParam值来设置我们想要的“_method”。</p>
<p>也就是我们只需要在容器中注册一个HiddenHttpMethodFilter的组件，然后设置组件中methodParam属性的值即可，具体做法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.request.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.HiddenHttpMethodFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/20 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        hiddenHttpMethodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hiddenHttpMethodFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启项目，可以看到methodParam就是我们自定义的值了：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220153531867.png" alt="image-20220220153531867"></p>
<p>这时，如果我们的form表单依旧使用“_method”就失效了。</p>
<blockquote>
<p>ps：我们使用form表单实现Rest风格的时候需要配置一个隐藏域，但是如果我们使用客户端工具，如PostMan等。它可以直接发起DELETE、PUT等方式请求，而无须Filter。</p>
</blockquote>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220220155014608.png" alt="image-20220220155014608"></p>
<h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><p>我们知道，在SpringMVC的请求映射中，有一个重要的东西就是前端控制器DispatchServlet，它继承了原生的HttpServlet：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221152555512.png" alt="image-20220221152555512"></p>
<p>处理请求调用doGet、doPost等，在DispatchServlet中并没有这些方法的实现。但在它的父类FrameworkServlet中有：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221152828009.png" alt="image-20220221152828009"></p>
<p>可以看到，它们最终都是调用processRequest方法，我们给DispatchServlet中的doService方法打上断点，看一下它的执行流程！</p>
<p>所有的请求最终都会调用doService中的doDispatch方法：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221153251875.png" alt="image-20220221153251875"></p>
<p>在doDispatch中，通过 mappedHandler = getHandler(processedRequest) 会找到当前请求使用哪个Handler(Controller)处理：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221153528759.png" alt="image-20220221153528759"></p>
<p>在RequestMappingHandlerMapping中保存了所有@RequestMapping和handler的映射规则：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221153821610.png" alt="image-20220221153821610"></p>
<p>也就是说，所有的请求都在我们这个HandlerMapping中！可以看到，除了我们自己的四个Controller，SpringBoot还有自己默认的RequestMappingHandlerMapping。</p>
<p>除了RequestMappingHandlerMapping，我们还可以看到有WelcomePageHandlerMapping。顾名思义，它就是用来处理欢迎页的，这也就是说，为什么我们访问 / 能访问到index.html。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221154114739.png" alt="image-20220221154114739"></p>
<p>请求进来后，会挨个尝试所有的HandlerMapping，看是否有请求信息：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221154318323.png" alt="image-20220221154318323"></p>
<ul>
<li>如果有，就找到这个请求对应的handler；</li>
<li>如果没有就是下一个HandlerMapping。</li>
</ul>
<p>当然，如果我们需要一些自定义的映射处理，我们可以自己写一个HandlerMapping放到容器中(场景使用：v1和v2版本需要不同的处理，这时就可以自定义)。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220221155142493.png" alt="image-20220221155142493"></p>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.request.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/21 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@PathVariable</span> Map&lt;String, String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestHeader</span> Map&lt;String, String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestParam(&quot;inters&quot;)</span>List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestParam</span> Map&lt;String, String&gt; params,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@CookieValue(&quot;Webstorm-88f844b3&quot;)</span> String ga,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@CookieValue(&quot;Webstorm-88f844b3&quot;)</span> Cookie cookie)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;, id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;, name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;, pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;, userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;, header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>, inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>, params);</span><br><span class="line">        map.put(<span class="string">&quot;ga&quot;</span>, ga);</span><br><span class="line">        System.out.println(cookie.getName() + <span class="string">&quot;=====&gt;&quot;</span> + cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        SpringBoot默认禁用了矩阵变量</span></span><br><span class="line"><span class="comment">            手动开启：原理，对于路径的处理，UrlPathHelper进行解析</span></span><br><span class="line"><span class="comment">                removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line"><span class="comment">        矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span>List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>, low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>, brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;, pathVar = &quot;empId&quot;)</span> Integer empAge)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>, bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>, empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.request.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/21 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestAttributeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gotoPage</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;成功！！！&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(&quot;msg&quot;)</span> String msg,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestAttribute(&quot;code&quot;)</span> Integer code,</span></span></span><br><span class="line"><span class="params"><span class="function">                          HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Object msg1 = request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;reqMethod_msg&quot;</span>, msg1);</span><br><span class="line">        map.put(<span class="string">&quot;annotation_msg&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">测试REST风格：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT 提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">测试基本注解：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;car/3/owner/lisi&quot;</span>&gt;</span>car/&#123;id&#125;/owner/&#123;username&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;car/2/owner/zhangsan?age=213&amp;inters=basketball&amp;inters=game&quot;</span>&gt;</span>car/2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@PathVariable（路径变量）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@RequestHeader（获取请求头）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@RequestParam（获取请求参数）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@CookieValue（获取cookie值）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@RequestAttribute（获取request域属性）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@RequestBody（获取请求体）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>@MatrixVariable（矩阵变量）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">页面开发，cookie禁用了，session里面的内容怎么使用？</span><br><span class="line">session.set(a,b) ---&gt; jsessionid ---&gt; cookie ---&gt; 每次发请求携带</span><br><span class="line">url重写：/abc;jsessionid=xxxx 把cookie的值使用矩阵变量的方式进行传递</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/cars/sell;low=34;brand=byd,audi,yd&quot;</span>&gt;</span>@MatrixVariable（矩阵变量）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/cars/sell;low=34;brand=byd;brand=audi;brand=yd&quot;</span>&gt;</span>@MatrixVariable（矩阵变量）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/boss/1;age=20/2;age=2&quot;</span>&gt;</span>@MatrixVariable（矩阵变量）/boss/&#123;bossId&#125;/&#123;empId&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    测试@RequestBody获取数据 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>矩阵变量需要在SpringBoot中手动开启<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>根据RFC3986的规范，矩阵变量应当绑定在路径变量中<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>若是有多个矩阵变量，应当使用英文符号 ; 进行分割<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>若是一个矩阵变量有多个值，应当使用英文符号 , 隔开，或命名多个重复的key即可<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="参数处理原理"><a href="#参数处理原理" class="headerlink" title="参数处理原理"></a>参数处理原理</h2>]]></content>
  </entry>
  <entry>
    <title>SpringBoot-Web场景</title>
    <url>/2022/02/13/SpringBoot-Web%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>关于SpringBoot对Web场景的介绍见官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet">https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet</a></p>
<h2 id="简单功能分析"><a href="#简单功能分析" class="headerlink" title="简单功能分析"></a>简单功能分析</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213200021625.png" alt="image-20220213200021625"></p>
<p>官网介绍说明，我们可以将静态资源放在类路径下的static、public、resources、META-INF/resources下都可以，在访问的时候，使用“当前项目根路径 + 静态资源名”。我们可以测试一下：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213200600750.png" alt="image-20220213200600750"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213200919881.png" alt="image-20220213200919881"></p>
<p>原理：静态资源映射/**。当请求进来时，先去找controller看能不能处理；不能处理的所有请求都交给静态资源处理器；静态资源也找不到就报404！</p>
<h4 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h4><p>我们默认访问的时候是没有前缀的，直接就是“当前项目 + 静态资源名”即可访问！我们可以给它配上前缀：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">  	<span class="comment"># 配置静态资源访问前缀</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置静态资源目录</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置静态资源目录的时候，注意它是一个数组，可以配置多个。通过上面的配置，我们的访问就变成了“当前项目 + static-path-pattern + 静态资源名（静态资源放在配置的静态资源目录下）”。</p>
</blockquote>
<h4 id="webjar-了解"><a href="#webjar-了解" class="headerlink" title="webjar(了解)"></a>webjar(了解)</h4><p>SpringBoot把我们要用的js、css等东西封装成依赖了，我们要使用，导入相关依赖即可！webjars官网：<a href="https://www.webjars.org/%EF%BC%8C%E6%88%91%E4%BB%AC%E8%A6%81%E7%94%A8jQuery%E5%B0%B1%E5%8E%BB%E5%AE%98%E7%BD%91%E6%90%9C%E7%B4%A2%E5%BC%95%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96%EF%BC%9A">https://www.webjars.org/，我们要用jQuery就去官网搜索引入相关依赖：</a></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219152900630.png" alt="image-20220219152900630"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219152946196.png" alt="image-20220219152946196"></p>
<p>启动项目，访问测试：<a href="http://localhost:8080/webjars/jquery/3.6.0/jquery.js%EF%BC%88%E5%90%8E%E9%9D%A2%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%8A%E9%9D%A2%E7%9A%84%E4%BE%9D%E8%B5%96%E9%87%8C%E9%9D%A2%E7%9A%84%E5%8C%85%E5%9C%B0%E5%9D%80%EF%BC%89">http://localhost:8080/webjars/jquery/3.6.0/jquery.js（后面的地址也就是上面的依赖里面的包地址）</a></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219153415264.png" alt="image-20220219153415264"></p>
<h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3><p>SpringBoot说明了默认的欢迎页在静态资源目录下的index.html：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219153736356.png" alt="image-20220219153736356"></p>
<p>我们在配置的haha目录下新建一个index.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认欢迎页！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219155127949.png" alt="image-20220219155127949"></p>
<p>更改了index.html我们依然可以在controller中使用index请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/13 20:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index controller!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219161206311.png" alt="image-20220219161206311"></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>起点：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219164649312.png" alt="image-20220219164649312"></p>
<blockquote>
<ul>
<li>SpringBoot启动默认加载xxxAutoConfiguration自动配置类。</li>
<li>SpringMVC功能的自动配置类WebMvcAutoConfiguration。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">      ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Defined as a nested config to ensure WebMvcConfigurer is not read when not</span></span><br><span class="line"><span class="comment">// on the classpath</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ServletContextAware</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件的属性和xxx进行了绑定：WebMvcProperties = spring.mvc，WebProperties = spring.web</p>
</blockquote>
<p>在这个配置类中可以看到，它只有一个有参构造器（在Spring注册驱动开发的时候，我们讲过：这代表着构造器中的所有参数都是从容器中获取的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    // 获取和spring.web绑定的所有值的对象</span></span></span><br><span class="line"><span class="params"><span class="function">    WebProperties webProperties, </span></span></span><br><span class="line"><span class="params"><span class="function">    // 获取和spring.mvc绑定的所有值的对象</span></span></span><br><span class="line"><span class="params"><span class="function">    WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="params"><span class="function">    // spring的BeanFactory</span></span></span><br><span class="line"><span class="params"><span class="function">    ListableBeanFactory beanFactory, </span></span></span><br><span class="line"><span class="params"><span class="function">    // 找到所有的HttpMessageConverters</span></span></span><br><span class="line"><span class="params"><span class="function">    ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">    // 找到资源处理器的自定义器</span></span></span><br><span class="line"><span class="params"><span class="function">    ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">    // DispatchServlet</span></span></span><br><span class="line"><span class="params"><span class="function">    ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="params"><span class="function">    // 给应用注册Servlet、Filter</span></span></span><br><span class="line"><span class="params"><span class="function">    ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = webProperties.getResources();</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">        <span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">        <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">        <span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源处理的默认规则"><a href="#资源处理的默认规则" class="headerlink" title="资源处理的默认规则"></a>资源处理的默认规则</h3><p>Debug运行来到“!this.resourceProperties.isAddMappings()”，它判断你是否配置了spring.web.add-mappings。注意，这里前面加了否定，因此：如果你在配置文件中配置为false，就代表着“禁用所有静态资源规则”，那我们配置的诸如“静态资源目录”等就不会生效。而默认它是true的，也就是能生效：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219170928165.png" alt="image-20220219170928165"></p>
<p>在WebProperties中我们也可以看到为什么静态资源是放在之前说的目录下：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219173552006.png" alt="image-20220219173552006"></p>
<p>然后来到了我们的webjars的处理：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219173852333.png" alt="image-20220219173852333"></p>
<h3 id="欢迎页处理"><a href="#欢迎页处理" class="headerlink" title="欢迎页处理"></a>欢迎页处理</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220219174424847.png" alt="image-20220219174424847"></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot-配置文件</title>
    <url>/2022/02/13/SpringBoot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="1、文件类型"><a href="#1、文件类型" class="headerlink" title="1、文件类型"></a>1、文件类型</h1><h2 id="1-1、properties"><a href="#1-1、properties" class="headerlink" title="1.1、properties"></a>1.1、properties</h2><p>同以前的properties用法</p>
<h2 id="1-2、yaml"><a href="#1-2、yaml" class="headerlink" title="1.2、yaml"></a>1.2、yaml</h2><h3 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h3><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件</p>
<h3 id="1-2-2、基本语法"><a href="#1-2-2、基本语法" class="headerlink" title="1.2.2、基本语法"></a>1.2.2、基本语法</h3><ul>
<li><p>key: value；kv之间有空格</p>
</li>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进不允许使用tab，只允许空格</p>
</li>
<li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
</li>
<li><p>‘#’表示注释</p>
</li>
<li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p>
</li>
</ul>
<h3 id="1-2-3、数据类型"><a href="#1-2-3、数据类型" class="headerlink" title="1.2.3、数据类型"></a>1.2.3、数据类型</h3><ul>
<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象：键值对的集合。map、hash、set、object </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">	<span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组：一组按次序排列的值。array、list、queue</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-4、示例"><a href="#1-2-4、示例" class="headerlink" title="1.2.4、示例"></a>1.2.4、示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="keyword">private</span> Boolean boss;</span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> Pet pet;</span><br><span class="line">	<span class="keyword">private</span> String[] interests;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure>



<h1 id="2、配置提示"><a href="#2、配置提示" class="headerlink" title="2、配置提示"></a>2、配置提示</h1><p>自定义的类和配置文件绑定一般没有提示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot-开发小技巧</title>
    <url>/2022/02/13/SpringBoot-%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="Lombok简化开发"><a href="#Lombok简化开发" class="headerlink" title="Lombok简化开发"></a>Lombok简化开发</h2><p>我们现在写的这些JavaBean都需要我们自己去写构造器、getter、setter、toString…虽然这些都可以自动生成，但是代码看起来不是那么简洁，</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213145624337.png" alt="image-20220213145624337"></p>
<p>我们可以使用Lombok插件来简化我们的代码！</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213145904355.png" alt="image-20220213145904355"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>	<span class="comment">// 生成getter、setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>	<span class="comment">// 生成有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>	<span class="comment">// 生成无参构造器</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>	<span class="comment">// 生成equals、hashCode</span></span><br><span class="line"><span class="meta">@ToString</span>	<span class="comment">// 生成toString	</span></span><br><span class="line"><span class="meta">@Slf4j</span>		<span class="comment">// 简化日志开发</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目或者页面修改以后：Ctrl + F9 重启项目。（修改了才生效）</p>
<h2 id="Spring-Initailizr（项目初始化向导）"><a href="#Spring-Initailizr（项目初始化向导）" class="headerlink" title="Spring Initailizr（项目初始化向导）"></a>Spring Initailizr（项目初始化向导）</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213150909863.png" alt="image-20220213150909863"></p>
<p>选择需要的开发场景</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213151456052.png" alt="image-20220213151456052"></p>
<p>自动导入依赖</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213151605317.png" alt="image-20220213151605317"></p>
<p>自动创建项目结构</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213151553879.png" alt="image-20220213151553879"></p>
<p>自动写好主启动类</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213151617648.png" alt="image-20220213151617648"></p>
]]></content>
  </entry>
  <entry>
    <title>MySQL-添加用户与授权</title>
    <url>/2022/02/10/MySQL-%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>Win11、MySQL5.7.32</p>
<h2 id="root登录MySQL"><a href="#root登录MySQL" class="headerlink" title="root登录MySQL"></a>root登录MySQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210151040094.png" alt="image-20220210151040094"></p>
<h2 id="使用mysql库"><a href="#使用mysql库" class="headerlink" title="使用mysql库"></a>使用mysql库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有的localhost可以换成你自己的ip。</p>
<p>第一个atqingke是用户名</p>
<p>第二个atqingke是密码</p>
</blockquote>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;atqingke&#x27;@&#x27;%&#x27; identified by &#x27;atqingke&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="授予用户访问所有库所有表权限"><a href="#授予用户访问所有库所有表权限" class="headerlink" title="授予用户访问所有库所有表权限"></a>授予用户访问所有库所有表权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;atqingke&#x27;@&#x27;localhost&#x27; identified by &#x27;atqingke&#x27;;</span><br><span class="line"># *.* 意思是“数据库名.表名”</span><br><span class="line"># 我这里是所有库所有表</span><br></pre></td></tr></table></figure>

<h2 id="授予用户所有操作权限"><a href="#授予用户所有操作权限" class="headerlink" title="授予用户所有操作权限"></a>授予用户所有操作权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;atqingke&#x27;@&#x27;localhost&#x27; identified by &#x27;atqingke&#x27; with grant option;</span><br><span class="line"># all privileges 可以换成你想要授予的权限，我这里是所有权限</span><br><span class="line"># 比如可以只授予查询和添加权限：grant select, insert on *.* to &#x27;atqingke&#x27;@&#x27;localhost&#x27; identified by &#x27;atqingke&#x27; with grant option;</span><br></pre></td></tr></table></figure>

<h2 id="修改后刷新权限"><a href="#修改后刷新权限" class="headerlink" title="修改后刷新权限"></a>修改后刷新权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210152729496.png" alt="image-20220210152729496"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210152816026.png" alt="image-20220210152816026"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test_create;</span><br><span class="line"></span><br><span class="line">USE `test_create`;</span><br><span class="line">CREATE TABLE test( username VARCHAR(255), age INT ); </span><br><span class="line"></span><br><span class="line">INSERT INTO `test_create`.`test` (`username`, `age`) VALUES (&#x27;test_insert&#x27;, &#x27;11&#x27;); </span><br><span class="line">INSERT INTO `test_create`.`test` (`username`, `age`) VALUES (&#x27;test_update&#x27;, &#x27;11&#x27;); </span><br><span class="line">INSERT INTO `test_create`.`test` (`username`, `age`) VALUES (&#x27;test_delete&#x27;, &#x27;11&#x27;); </span><br><span class="line"></span><br><span class="line">UPDATE `test_create`.`test` SET `age` = &#x27;12&#x27; WHERE `username` = &#x27;test_update&#x27; AND`age` = &#x27;11&#x27;; </span><br><span class="line">DELETE FROM `test_create`.`test` WHERE `username` = &#x27;test_delete&#x27; AND`age` = &#x27;11&#x27;;</span><br><span class="line">SELECT * FROM `test_create`.`test` LIMIT 0, 30;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210152917712.png" alt="image-20220210152917712"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user username@localhost</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Redis——事务和锁机制</title>
    <url>/2022/02/08/Redis%E2%80%94%E2%80%94%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://redis.io/topics/transactions">Redis官网关于事务的介绍</a></p>
</blockquote>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208190341777.png" alt="image-20220208190341777"></p>
<p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行过程中，不会被其它客户端发送来的命令请求所打断。Redis事务的主要作用就是串联多个命令防止别的命令插队。</p>
<h2 id="Multi、Exec、Discard"><a href="#Multi、Exec、Discard" class="headerlink" title="Multi、Exec、Discard"></a>Multi、Exec、Discard</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208193735052.png" alt="image-20220208193735052"></p>
<p>Redis中使用Multi命令来开启事务，从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208193602365.png" alt="image-20220208193602365"></p>
<p>在组队的过程中可以通过discard命令来放弃组队。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208193634178.png" alt="image-20220208193634178"></p>
<h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><p>如果是在组队过程中，输入的命令有错误，则会退出事务，不再进行组队：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208193858810.png" alt="image-20220208193858810"></p>
<p>如果是在执行命令队列过程中，执行的命令有错误。那么正确的命令会正常执行，错误的命令不执行：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208193917320.png" alt="image-20220208193917320"></p>
<h2 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h2><p>一个请求想给金额减8000</p>
<p>一个请求想给金额减5000</p>
<p>一个请求想给金额减1000</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208195311824.png" alt="image-20220208195311824"></p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208195343488.png" alt="image-20220208195343488"></p>
<p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208195404397.png" alt="image-20220208195404397"></p>
<p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。</p>
<h2 id="watch-key"><a href="#watch-key" class="headerlink" title="watch key"></a>watch key</h2><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208201548769.png" alt="image-20220208201548769"></p>
<p>unwatch 取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208201611454.png" alt="image-20220208201611454"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——RedisTemplate(SpringBoot集成Redis)</title>
    <url>/2022/02/08/Redis%E2%80%94%E2%80%94RedisTemplate-SpringBoot%E9%9B%86%E6%88%90Redis/</url>
    <content><![CDATA[<h2 id="新建SpringBoot工程"><a href="#新建SpringBoot工程" class="headerlink" title="新建SpringBoot工程"></a>新建SpringBoot工程</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atqingke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>SpringBoot??Redis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引入集成redis相关依赖"><a href="#引入集成redis相关依赖" class="headerlink" title="引入集成redis相关依赖"></a>引入集成redis相关依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写配置文件application-properties"><a href="#编写配置文件application-properties" class="headerlink" title="编写配置文件application.properties"></a>编写配置文件application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">pengbin102</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis密码</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">redis63799</span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"># 最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h2 id="编写配置类RedisConfig"><a href="#编写配置类RedisConfig" class="headerlink" title="编写配置类RedisConfig"></a>编写配置类RedisConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 15:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RedisSpringBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208161729340.png" alt="image-20220208161729340"></p>
<h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208162043750.png" alt="image-20220208162043750"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——Jedis(Java操作Redis)</title>
    <url>/2022/02/08/Redis%E2%80%94%E2%80%94Jedis-Java%E6%93%8D%E4%BD%9CRedis/</url>
    <content><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h3><h3 id="引入所需依赖："><a href="#引入所需依赖：" class="headerlink" title="引入所需依赖："></a>引入所需依赖：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atqingke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Redis-Jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试类："><a href="#编写测试类：" class="headerlink" title="编写测试类："></a>编写测试类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 10:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Jedis对象</span></span><br><span class="line">        Jedis pengbin102 = <span class="keyword">new</span> Jedis(<span class="string">&quot;pengbin102&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试连接</span></span><br><span class="line">        String ping = pengbin102.ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功：&quot;</span> + ping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行报错："><a href="#运行报错：" class="headerlink" title="运行报错："></a>运行报错：</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208111207280.png" alt="image-20220208111207280"></p>
<p>原因：没有输入密码（我们之前在配置文件中设置了requirepass）。</p>
<p>解决办法：输入密码即可！</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208111543548.png" alt="image-20220208111543548"></p>
<h2 id="Jedis-API"><a href="#Jedis-API" class="headerlink" title="Jedis-API"></a>Jedis-API</h2><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 13:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StructureTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis pengbin102 = <span class="keyword">new</span> Jedis(<span class="string">&quot;pengbin102&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        pengbin102.auth(<span class="string">&quot;redis63799&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pengbin102;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">        jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;k1 = &quot;</span> + jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;k1 is exists?=====&gt;&quot;</span> + jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;k1&#x27;s ttl is：&quot;</span> + jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208135314196.png" alt="image-20220208135314196"></p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">    jedis.mset(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208135529560.png" alt="image-20220208135529560"></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">    jedis.lpush(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;l1&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;l2&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;l3&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;myList&quot;</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">    List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;myList&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208140607954.png" alt="image-20220208140607954"></p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order04&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String order : smembers) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208140650235.png" alt="image-20220208140650235"></p>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">    jedis.hset(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;13810169999&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;atqingke&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@163.com&quot;</span>);</span><br><span class="line">    jedis.hmset(<span class="string">&quot;hash2&quot;</span>,map);</span><br><span class="line">    List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>, <span class="string">&quot;telphone&quot;</span>, <span class="string">&quot;address&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208140718693.png" alt="image-20220208140718693"></p>
<h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jedis jedis = connect();</span><br><span class="line"></span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;w5&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;z6&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; zrange = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String e : zrange) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208140740600.png" alt="image-20220208140740600"></p>
<h2 id="手机验证码实例"><a href="#手机验证码实例" class="headerlink" title="手机验证码实例"></a>手机验证码实例</h2><p>要求：</p>
<p>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</p>
<p>2、输入验证码，点击验证，返回成功或失败</p>
<p>3、每个手机号每天只能输入3次</p>
<h3 id="实现分析："><a href="#实现分析：" class="headerlink" title="实现分析："></a>实现分析：</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208142741558.png" alt="image-20220208142741558"></p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.redis.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟手机发送验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/2/8 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String phone = <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> sendCode = sendCode(phone);</span><br><span class="line">        <span class="keyword">if</span>(sendCode) &#123;</span><br><span class="line">            String code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            code = scanner.next();</span><br><span class="line">            validateCode(phone, code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 校验手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 用户输入的验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateCode</span><span class="params">(String phone, String code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接redis</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;pengbin102&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;redis63799&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码Key</span></span><br><span class="line">        String codeKey = phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line">        String redisCode = jedis.get(codeKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(redisCode.equals(code)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 要发送的号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功返回true；失败返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接redis</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;pengbin102&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;redis63799&quot;</span>);</span><br><span class="line">        <span class="comment">// 一个号码一天不能发送超过三次Key</span></span><br><span class="line">        String countKey = phone + <span class="string">&quot;:count&quot;</span>;</span><br><span class="line">        <span class="comment">// 验证码Key</span></span><br><span class="line">        String codeKey = phone + <span class="string">&quot;:code&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断今天是否已经发送三次了</span></span><br><span class="line">        String count = jedis.get(countKey);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            jedis.setex(countKey, <span class="number">60</span> * <span class="number">60</span> *<span class="number">24</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) &lt; <span class="number">3</span>) &#123;</span><br><span class="line">           jedis.incr(countKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phone【&quot;</span> + phone + <span class="string">&quot;】today is send 3 times&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有超过三次，发送验证码，存入redis</span></span><br><span class="line">        String code = getCode(<span class="number">6</span>);</span><br><span class="line">        jedis.setex(codeKey, <span class="number">60</span> * <span class="number">2</span>, code);</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codeLength 验证码的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成好的验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCode</span><span class="params">(<span class="keyword">int</span> codeLength)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String code = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">            code += random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>第一次测试正确情况：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208150838862.png" alt="image-20220208150838862"></p>
<p>第二次测试验证码过期：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208151148130.png" alt="image-20220208151148130"></p>
<p>第三次测试验证码错误：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208151322861.png" alt="image-20220208151322861"></p>
<p>第四次测试手机号码超三次：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220208151545191.png" alt="image-20220208151545191"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——发布和订阅</title>
    <url>/2022/02/07/Redis%E2%80%94%E2%80%94%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<h2 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h2><p>Redis发布订阅(pub/sub)是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。Redis客户端可以订阅任意数量的频道。</p>
<p>客户端可以订阅频道如下图：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207115827750.png" alt="image-20220207115827750"></p>
<p>当给这个频道发布消息后，消息就会发送给订阅的客户端：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207115858554.png" alt="image-20220207115858554"></p>
<h2 id="发布和订阅的命令行实现"><a href="#发布和订阅的命令行实现" class="headerlink" title="发布和订阅的命令行实现"></a>发布和订阅的命令行实现</h2><ul>
<li>打开一个客户端订阅channel1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe channel1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207120353698.png" alt="image-20220207120353698"></p>
<ul>
<li>打开另一个客户端，给channel1发布消息hello redis6</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publish channel1 &#x27;hello redis6&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207120425694.png" alt="image-20220207120425694"></p>
<ul>
<li>打开第一个客户端可以看到发送的消息</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207120444428.png" alt="image-20220207120444428"></p>
<blockquote>
<p>ps：需要注意的是，发布的消息没有持久化，如果在订阅的客户端收不到hello redis6，只能收到订阅后发布的消息（类似于平时进入直播间只能看到你进去之后的消息，看不到你进去之前的消息）。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207120610393.png" alt="image-20220207120610393"></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Redis——Redis6新增数据类型</title>
    <url>/2022/02/07/Redis%E2%80%94%E2%80%94Redis6%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><p>现代计算机用二进制（位）作为信息的基础单位，1个字节等于8位，例如“abc”字符串是由3个字节组成，但实际在计算机存储时将其用二进制表示，“abc”分别对应的ASCII码分别是97、98、99，对应的二进制分别是01100001、01100010和01100011，如下图：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207142015398.png" alt="image-20220207142015398"></p>
<p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p>
<p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p>
<ul>
<li>Bitmaps本身不是一种数据类型，实际上它就是字符串（key-value），但是它可以对字符串的位进行操作。</li>
<li>Bitmaps单独提供了一套命令，所以在Redis中使用Bitmaps和使用字符串的方法不太相同。可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量。</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207142232341.png" alt="image-20220207142232341"></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li><h4 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h4></li>
</ul>
<p>格式：</p>
<p>​    setbit <key> <offset> <value> 设置Bitmaps中某个偏移量的值（0或1），offset偏移量从0开始。</p>
<p>实例：</p>
<p>​    每个独立用户是否访问过网站存放在Bitmaps中，将访问的用户记作1，没有访问的用户记作0，用偏移量作为用户的id。设置键的第offset个位的值（从0算起），假设现在有20个用户，userid = 1、6、11、15、19的用户对网站进行了访问，那么当前Bitmaps初始化结果如图：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207142622854.png" alt="image-20220207142622854"></p>
<p>unique:users:20220207代表2022-02-07这天的独立访问用户的Bitmaps：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207142907787.png" alt="image-20220207142907787"></p>
<blockquote>
<p>ps：很多应用的用户id是以一个指定数字（例如10000）开头，直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费，通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p>
<p>在第一次初始化Bitmaps时，如果偏移量非常大，那么整个初始化过程执行会比较慢，可能会造成Redis的阻塞。</p>
</blockquote>
<ul>
<li><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4></li>
</ul>
<p>格式：getbit <key> <offset> 获取Bitmaps中某个偏移量的值。</p>
<p>实例：获取id = 8的用户是否在2022-02-07这天访问过，返回0表示没有访问过。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207143312835.png" alt="image-20220207143312835"></p>
<p>100不存在，所以也是返回0。</p>
<ul>
<li><h4 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h4></li>
</ul>
<p>统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的start或end参数，可以让计数只在特定的位上进行。start和end参数的设置，都可以使用负数值。比如-1表示最后一个位，而-2表示倒数第二个位。start、end是指bit组的字节的下标树，二者皆为包含。</p>
<p>格式：bitcount <key> [start end] 统计字符串从start字节到end字节的比特值为1的数量。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207145007635.png" alt="image-20220207145007635"></p>
<blockquote>
<p>ps：Redis的setbit设置或清除的是bit位置，而bitcount计算的是btye位置。</p>
</blockquote>
<ul>
<li><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h4></li>
</ul>
<p>bitop and(or/not/xor) <destkey> [key…] bitop是一个复合操作，它可以做多个Bitmaps的and(交集)、or(并集)、not(非)、xor(异或)操作并将结果保存在destkey中。</p>
<p>实例：</p>
<p>​    20220206访问网站的userid = 1、2、5、9：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207145515693.png" alt="image-20220207145515693"></p>
<p>​    20220205访问网站的userid = 0、1、4、9：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207145528024.png" alt="image-20220207145528024"></p>
<p>计算出两天都访问过网站的用户数量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitop and unique:users:and:20220205_06 unique:users:20220205 unique:users:20220206</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207145755183.png" alt="image-20220207145755183"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207145831955.png" alt="image-20220207145831955"></p>
<p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种），可以使用or求并集：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207150022745.png" alt="image-20220207150022745"></p>
<h3 id="Bitmaps和Set对比"><a href="#Bitmaps和Set对比" class="headerlink" title="Bitmaps和Set对比"></a>Bitmaps和Set对比</h3><p>假设网站有一亿用户，每天独立访问的用户有五千万，如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>每个用户id占用空间</th>
<th>需要存储的用户量</th>
<th>全部内存量</th>
</tr>
</thead>
<tbody><tr>
<td>Set</td>
<td>64byte</td>
<td>5000 0000</td>
<td>64byte * 50000000 = 400MB</td>
</tr>
<tr>
<td>Bitmaps</td>
<td>1byte</td>
<td>1 0000 0000</td>
<td>1byte * 100000000 = 12.5MB</td>
</tr>
</tbody></table>
<p>很明显，这种情况下使用Bitmaps能节省很多的内存空间，尤其是随着时间推移节省的内存还是非常可观的：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>一天</th>
<th>一个月</th>
<th>一年</th>
</tr>
</thead>
<tbody><tr>
<td>Set</td>
<td>400MB</td>
<td>12GB</td>
<td>144GB</td>
</tr>
<tr>
<td>Bitmaps</td>
<td>12.5MB</td>
<td>375MB</td>
<td>4.5GB</td>
</tr>
</tbody></table>
<p>但Bitmaps并不是万金油，假如该网站每天的独立访问用户很少，例如只有十万（大量的僵尸用户），那么两者的对比如下表所示，很显然，这时候用Bitmaps就不太合适了，因为基本上大部分位都是0：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>每个用户id占用空间</th>
<th>需要存储的用户量</th>
<th>全部内存量</th>
</tr>
</thead>
<tbody><tr>
<td>Set</td>
<td>64byte</td>
<td>10 0000</td>
<td>64byte * 100000 = 800KB</td>
</tr>
<tr>
<td>Bitmaps</td>
<td>1byte</td>
<td>1 0000 0000</td>
<td>1byte * 100000000 = 12.5MB</td>
</tr>
</tbody></table>
<h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>
<p>解决基数问题有很多种方案：</p>
<ul>
<li>数据存储在MySQL表中，使用distinct count计算不重复个数</li>
<li>使用Redis提供的hash、set、bitmaps等数据结构来处理</li>
</ul>
<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>
<p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<blockquote>
<p>什么是基数?</p>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
</blockquote>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><ul>
<li>pfadd 添加指定元素到HyperLogLog。添加后，基数发生变化返回1，否则返回0。</li>
<li>pfcount 计算HLL的近似基数，可以计算多个HLL。</li>
<li>pfmerge 将一个或多个HLL合并后的结果存储在另一个HLL中。</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207153158317.png" alt="image-20220207153158317"></p>
<h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>
<h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><ul>
<li>geoadd 添加地理位置。</li>
<li>geopos 获取指定地区的坐标值。</li>
<li>geodist 获取两位置之间的直线距离。</li>
<li>georadius 以给定的经纬度为中心，找出某一半径内的元素。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># geoadd key 经度 纬度 名称</span><br><span class="line">geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</span><br><span class="line"># 两极无法直接添加，一般会下载城市数据，直接通过Java程序一次性导入。有效的经度从-180~180。有效纬度从-85.05112878~85.05112878。</span><br><span class="line"># 当坐标位置超出指定范围时，该命令将会返回一个错误。</span><br><span class="line"># 已经添加的数据，是无法再次往里面添加的。</span><br><span class="line"></span><br><span class="line">geopos china:city shanghai</span><br><span class="line"></span><br><span class="line"># 单位：m米（默认值）、km千米、mi英里、ft英尺</span><br><span class="line">geodist china:city beijing shanghai km</span><br><span class="line"></span><br><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207154610610.png" alt="image-20220207154610610"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——配置文件介绍</title>
    <url>/2022/02/05/Redis%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>来到我们的拷贝的配置文件/etc/redis/6379.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/redis/6379.conf</span><br><span class="line">:set nu # 开启行号</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205212916027.png" alt="image-20220205212916027"></p>
<h2 id="Units单位"><a href="#Units单位" class="headerlink" title="Units单位"></a>Units单位</h2><p>配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit，并且大小写不敏感。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205213040529.png" alt="image-20220205213040529"></p>
<h2 id="INCLUDES包含"><a href="#INCLUDES包含" class="headerlink" title="INCLUDES包含"></a>INCLUDES包含</h2><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205213140870.png" alt="image-20220205213140870"></p>
<h2 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h2><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>默认情况bind = 127.0.0.1只能接收本机的访问请求，如果不写的话，可以无限制接受任何ip地址的访问。在生产环境肯定是写你应用服务器的地址，在这里，我们先将其注释掉。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207121251549.png" alt="image-20220207121251549"></p>
<blockquote>
<p>ps：如果开启了protected-mode，并且在没有设定bind ip，而且没有设置密码的情况下（也就是默认情况），Redis只允许接受本机的访问。</p>
</blockquote>
<p>保存配置，重启服务，查看进程，可以看到，不再是本机访问了（*表示任意主机皆可访问）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart redis.service</span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207121508397.png" alt="image-20220207121508397"></p>
<h3 id="protected-mode"><a href="#protected-mode" class="headerlink" title="protected-mode"></a>protected-mode</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207122011311.png" alt="image-20220207122011311"></p>
<p>从它的注释中可以看到，protected-mode是为了禁止redis被外网访问的，加强redis的安全，它开启有两个前提条件：</p>
<ul>
<li>没有设置bind ip。</li>
<li>没有设置密码。</li>
</ul>
<p>我们将它设为no，不开启。</p>
<h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>端口号，默认6379：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207122242484.png" alt="image-20220207122242484"></p>
<h3 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h3><p>此参数确定TCP连接中已完成队列（完成三次握手之后）的长度，这个值必须不大于Linux系统中定义的/proc/sys/net/core/somaxconn的值（默认128）。</p>
<p>已完成连接队列又和半连接队列长度有关：/proc/sys/net/ipv4/tcp_max_syn_backlog</p>
<blockquote>
<p>ps：</p>
<p>半连接：服务端收到客户端syn后，将连接放入半连接队列。如果半连接队列已满则会丢弃，客户端报错connection time out。</p>
<p>已完成连接：服务端收到客户端的ack后，从半连接队列中拿出连接放入已完成连接队列。如果已完成连接队列已满则无法放入，客户端报错read timeout 或者connection reset by peer。</p>
</blockquote>
<p>当系统并发量大并且客户端速度缓慢的时候，我们可以将这两个参数一起修改。</p>
<h4 id="修改somaxconn："><a href="#修改somaxconn：" class="headerlink" title="修改somaxconn："></a>修改somaxconn：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 2048 &gt; /proc/sys/net/core/somaxconn</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207125051100.png" alt="image-20220207125051100"></p>
<p>仅修改somaxconn，系统重启后会丢失，因此还要修改sysctl.conf。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207125133215.png" alt="image-20220207125133215"></p>
<h4 id="修改tcp-max-syn-backlog"><a href="#修改tcp-max-syn-backlog" class="headerlink" title="修改tcp_max_syn_backlog"></a>修改tcp_max_syn_backlog</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 2048 &gt; /proc/sys/net/ipv4/tcp_max_syn_backlog</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207130324836.png" alt="image-20220207130324836"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207130356503.png" alt="image-20220207130356503"></p>
<h4 id="修改tcp-backlog"><a href="#修改tcp-backlog" class="headerlink" title="修改tcp-backlog"></a>修改tcp-backlog</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207130525274.png" alt="image-20220207130525274"></p>
<h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能，即永不关闭。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207130613391.png" alt="image-20220207130613391"></p>
<h3 id="tcp-keepalive"><a href="#tcp-keepalive" class="headerlink" title="tcp-keepalive"></a>tcp-keepalive</h3><p>指定TCP连接是否为长连接,”侦探”信号由server端维护,长连接将会额外的增加server端的开支，如果为0.表示禁用,非0值表示开启长连接“侦探”信号的发送间隔将有linux系统决定。在多次“侦探”后,如果对等端仍不回复,将会关闭连接,否则连接将会被保持开启。client端socket也可以通过配置keepalive选项,开启“长连接”。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207131404119.png" alt="image-20220207131404119"></p>
<p>官方说从3.2.1是建议设为300，之前是60。</p>
<h2 id="GENERAL通用"><a href="#GENERAL通用" class="headerlink" title="GENERAL通用"></a>GENERAL通用</h2><h3 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h3><p>是否为后台进程，设为yes可以后台启动。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132234941.png" alt="image-20220207132234941"></p>
<h3 id="pidfile"><a href="#pidfile" class="headerlink" title="pidfile"></a>pidfile</h3><p>存放pid文件的位置，每个实例会产生一个不同的pid文件：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132322349.png" alt="image-20220207132322349"></p>
<h3 id="loglevel"><a href="#loglevel" class="headerlink" title="loglevel"></a>loglevel</h3><p>日志级别。Redis共支持4个级别：debug、verbose、notice、warning，默认notice。生产环境选notice或warning。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132434756.png" alt="image-20220207132434756"></p>
<h3 id="logfile"><a href="#logfile" class="headerlink" title="logfile"></a>logfile</h3><p>日志文件名称：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132549663.png" alt="image-20220207132549663"></p>
<h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><p>设定库的数量：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132601514.png" alt="image-20220207132601514"></p>
<h2 id="SECURITY安全"><a href="#SECURITY安全" class="headerlink" title="SECURITY安全"></a>SECURITY安全</h2><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207132749045.png" alt="image-20220207132749045"></p>
<p>也可以在命令中设置密码，但是只是临时的，重启Redis服务器，密码就还原了。要永久，还是得配置文件设置。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207133008742.png" alt="image-20220207133008742"></p>
<h2 id="LIMITS限制"><a href="#LIMITS限制" class="headerlink" title="LIMITS限制"></a>LIMITS限制</h2><h3 id="maxclients"><a href="#maxclients" class="headerlink" title="maxclients"></a>maxclients</h3><p>设置Redis同时可以和多少个客户端进行连接，默认10000个。如果达到了此限制，Redis会拒绝新的连接请求，并且向这些连接请求放发出“max number of clients reached”以作回应。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207133237625.png" alt="image-20220207133237625"></p>
<h3 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory"></a>maxmemory</h3><p>设置Redis可以使用的内存量，一旦到达内存使用上限，Redis将会试图移除内部数据，移除规则通过maxmemory-policy来指定。</p>
<p>如果Redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么Redis则会针对那些需要申请内存的指令返回错误信息，比如set、lpush等。</p>
<p>但是对于无内存申请的指令，仍然会正常响应，比如get等。</p>
<p>如果你的Redis是主Redis（说明还有从Redis），那么在设置内存使用上限时，需要在系统中流出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p>
<p>建议必须设置，否则，将内存占满，造成服务器宕机。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207133733362.png" alt="image-20220207133733362"></p>
<h3 id="maxmemory-policy"><a href="#maxmemory-policy" class="headerlink" title="maxmemory-policy"></a>maxmemory-policy</h3><ul>
<li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键（最近最少使用）。</li>
<li>allkeys-lru：在所有集合key中，使用LRU算法移除key。</li>
<li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键。</li>
<li>allkeys-random：在所有集合key中，随机移除key。</li>
<li>volatile-ttl：移除那些ttl值最小的key，即那些最近要过期的key。</li>
<li>noeviction：不进行移除。针对写操作，只是返回错误信息。</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207133821177.png" alt="image-20220207133821177"></p>
<h3 id="maxmemory-samples"><a href="#maxmemory-samples" class="headerlink" title="maxmemory-samples"></a>maxmemory-samples</h3><p>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，Redis默认会检查这么多个key并选择其中LRU的那个。一般设置3到7的数字，数值越小样本越不准确，但性能消耗小。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220207134255320.png" alt="image-20220207134255320"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——常用数据类型</title>
    <url>/2022/02/05/Redis%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>Redis操作命令见：<a href="https://redis.io/commands">https://redis.io/commands</a></p>
</blockquote>
<p>在redis中，默认有16个数据库，类似数组下标从0开始，初始默认使用0号库，所有库统一密码管理。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205145355439.png" alt="image-20220205145355439"></p>
<h3 id="端口6379从何而来"><a href="#端口6379从何而来" class="headerlink" title="端口6379从何而来"></a>端口6379从何而来</h3><p>Alessia Merz中Merz四个字母在9键对应的就是6379。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205190949547.png" alt="image-20220205190949547"></p>
<h3 id="单线程-多路IO复用"><a href="#单线程-多路IO复用" class="headerlink" title="单线程 + 多路IO复用"></a>单线程 + 多路IO复用</h3><p>与Memcached的“多线程 + 锁”不同的是，Redis是使用“单线程 + 多路IO复用”技术实现的。所谓多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/1.gif"></p>
<p>与Memcached不同的是，Redis还支持多数据类型，并且支持持久化。</p>
<h2 id="key键操作"><a href="#key键操作" class="headerlink" title="key键操作"></a>key键操作</h2><p>我们先往0号库中插入一些实验数据：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205145859056.png" alt="image-20220205145859056"></p>
<ul>
<li>查看当前库中所有的key</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150056533.png" alt="image-20220205150056533"></p>
<ul>
<li>判断某个key是否存在</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists k1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150132189.png" alt="image-20220205150132189"></p>
<p>存在返回1，不存在返回0。</p>
<blockquote>
<p>ps：在redis-cli中也可以使用tab键进行代码自动补全。</p>
</blockquote>
<ul>
<li>查看指定key的类型</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type k1</span><br></pre></td></tr></table></figure>

<ul>
<li>删除指定key的数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del k1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150340730.png" alt="image-20220205150340730"></p>
<ul>
<li>根据value选择非阻塞删除（仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unlink k2</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150427503.png" alt="image-20220205150427503"></p>
<ul>
<li>查看指定key还有多久过期</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl k3</span><br></pre></td></tr></table></figure>

<p>-1表示永不过期（默认），-2表示已过期。</p>
<ul>
<li>给给定的key设置过期时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire k3 10</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150657103.png" alt="image-20220205150657103"></p>
<ul>
<li>切换数据库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select 1</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前数据库中key的数量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150753502.png" alt="image-20220205150753502"></p>
<ul>
<li>清空当前库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205150853184.png" alt="image-20220205150853184"></p>
<ul>
<li>通杀全部库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>

<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><p>String是Redis最基本的类型，一个key对应一个value。String类型是二进制安全的，意味着Redis中的String可以包含任何数据，比如jpg图片、序列化对象等等。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>set <key> <value> 添加键值对</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205193146385.png" alt="image-20220205193146385"></p>
<ul>
<li>EX：key的超时秒数。    </li>
<li>PX：key的超时毫秒数，与EX互斥。</li>
<li>NX：当数据库中key不存在时，可以将key-value添加数据库。</li>
<li>XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥。</li>
</ul>
</li>
<li><p>get <key> 查询对应键值</p>
</li>
<li><p>append <key> <value> 将给定的value追加到原值的末尾</p>
</li>
<li><p>strlen <key> 获得指定key的值的长度</p>
</li>
<li><p>setnx <key> <value> 只有在key不存在时，设置key的值</p>
</li>
<li><p>incr <key> 将key中存储的数字值增1，只能对数字值操作，如果为空，新增值设为1</p>
</li>
<li><p>decr <key> 与incr相反，减一。</p>
</li>
</ul>
<blockquote>
<p>ps：</p>
<ul>
<li><p>Redis中因为没有64位整数数据类型，因此，你给定一个字符串形式的数值，它会解释成一个整数。</p>
</li>
<li><p>incr/decr等都具有原子性，是原子操作：</p>
</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205195316994.png" alt="image-20220205195316994"></p>
<p>所谓原子操作是指不会被线程调度机制打断的操作。这种操作一旦开始，就一直运行到结束，中间不会有任何context switch（切换到另一个线程）。</p>
<ol>
<li>在单线程中，能够在单条指令中完成的操作都可以认为是“原子操作”，因为中断只能发生于指令之间。</li>
<li>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</li>
</ol>
<p>Redis单命令的原子性主要得益于它的单线程。</p>
</blockquote>
<ul>
<li>incrby/decrby <key> &lt;步长&gt; 将key中存储的数字值增减自定义步长个单位</li>
<li>mset <key1> <value1> <key2> <value2> … 同时设置一个或多个key-value对</li>
<li>mget <key1><key2>… 同时获取一个或多个value</li>
<li>msetnx <key1> <value1> <key2> <value2> … 当且仅当所有给定key不存在，同时设置一个或多个key-value对</li>
</ul>
<blockquote>
<p>ps：这些同时获取或同时设置的操作也都是具有原子性的，有一个失败则都失败。</p>
</blockquote>
<ul>
<li>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt; 获得值的范围，类似Java中的substring，并且在这里是“前包后包”的</li>
<li>setrange <key> &lt;起始位置&gt; <value> 用<value>覆写<key>所存储的字符串值，从&lt;起始位置&gt;开始（索引从0开始）</li>
<li>setex <key> &lt;过期时间&gt; <value> 设置键值的同时，设置过期时间，单位是秒</li>
<li>getset <key> <value> 以新换旧，设置了新值的同时获得旧值</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>String的数据结构为简单动态字符串（Simple Dynamic String，SDS），是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205200240070.png" alt="image-20220205200240070"></p>
<p>如图所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有空间；如果超过1M，扩容时一次只会扩1M的空间。需要注意的是字符串最大长度为512M。</p>
<h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p><strong>单键多值</strong></p>
<p>Redis列表是简单的字符串列表，安装插入顺序排列，你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层实际上就是一个双向链表，对两端的操作性能很高，通过索引下标的操作中间节点的性能会较差。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205204418180.png" alt="image-20220205204418180"></p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>lpush/rpush <key><value1><value2>… 从左边/右边插入一个或多个值</li>
<li>lpop/rpop <key> 从左边/右边吐出一个值。<strong>值在键在，值光键亡</strong></li>
<li>rpoplpush <key1><key2> 从key1列表右边吐出一个值插到key2列表左边</li>
<li>lrange <key><start><stop> 按照索引下标获得元素（从左到右）</li>
<li>lindex <key><index> 按照索引下标获得元素（从左到右）</li>
<li>llen <key> 获得列表长度</li>
<li>linsert <key> before <value><newvalue> 在value的后面插入newvalue</li>
<li>lrem <key> <n> <value> 从左边删除n个value</li>
<li>lset <key> <index> <vlaue> 将列表key下标为index的值替换成value</li>
</ul>
<h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，即压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>
<p>当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205205633337.png" alt="image-20220205205633337"></p>
<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>
<h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set"></a>集合(Set</h2><h2 id=""><a href="#" class="headerlink" title=")"></a>)</h2><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>
<p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的复杂度都是O(1)。一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p>
<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>sadd <key><value1><value2> ….. 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p>
</li>
<li><p>smembers <key> 取出该集合的所有值。</p>
</li>
<li><p>sismember <key><value> 判断集合<key>是否为含有该<value>值，有1，没有0</p>
</li>
<li><p>scard<key> 返回该集合的元素个数。</p>
</li>
<li><p>srem <key><value1><value2> …. 删除集合中的某个元素。</p>
</li>
<li><p>spop <key> <strong>随机从该集合中吐出一个值。</strong></p>
</li>
<li><p>srandmember <key><n> 随机从该集合中取出n个值。不会从集合中删除 。</p>
</li>
<li><p>smove <source><destination> value把集合中一个值从一个集合移动到另一个集合</p>
</li>
<li><p>sinter <key1><key2> 返回两个集合的交集元素。</p>
</li>
<li><p>sunion <key1><key2> 返回两个集合的并集元素。</p>
</li>
<li><p>sdiff <key1><key2> 返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p>
</li>
</ul>
<h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set数据结构是dict字典，字典是用哈希表实现的。</p>
<p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>
<h2 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h2><p>Redis hash 是一个键值对集合。</p>
<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<p>类似Java里面的Map&lt;String,Object&gt;</p>
<p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储</p>
<p>主要有以下2种存储方式：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205212029272.png" alt="image-20220205212029272"></p>
<p><strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205212045199.png" alt="image-20220205212045199"></p>
<h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>hset <key><field><value> 给<key>集合中的 <field>键赋值<value></li>
<li>hget <key1><field>从<key1> 集合<field>取出 value </li>
<li>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</li>
<li>hexists<key1><field> 查看哈希表 key 中，给定域 field 是否存在。 </li>
<li>hkeys <key> 列出该hash集合的所有field</li>
<li>hvals <key> 列出该hash集合的所有value</li>
<li>hincrby <key><field><increment> 为哈希表 key 中的域 field 的值加上增量 1  -1</li>
<li>hsetnx <key><field><value> 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</li>
</ul>
<h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p>
<h2 id="有序集合-Zset"><a href="#有序集合-Zset" class="headerlink" title="有序集合(Zset"></a>有序集合(Zset</h2><h2 id="-1"><a href="#-1" class="headerlink" title=")"></a>)</h2><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p>
<p>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p>
<p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>
<p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p>
<h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>zadd <key><score1><value1><score2><value2>… 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</li>
<li><strong>zrange <key><start><stop> [WITHSCORES]</strong>  返回有序集 key 中，下标在<start><stop>之间的元素，带WITHSCORES，可以让分数一起和值返回到结果集。</li>
<li>zrangebyscore key minmax [withscores] [limit offset count] 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </li>
<li>zrevrangebyscore key maxmin [withscores] [limit offset count] 同上，改为从大到小排列。 </li>
<li>zincrby <key><increment><value> 为元素的score加上增量</li>
<li>zrem <key><value> 删除该集合下，指定值的元素</li>
<li>zcount <key><min><max> 统计该集合，分数区间内的元素个数 </li>
<li>zrank <key><value> 返回该值在集合中的排名，从0开始。</li>
</ul>
<h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h3><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p>
<p>zset底层使用了两个数据结构</p>
<p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p>
<p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p>
<h3 id="跳跃表-跳表"><a href="#跳跃表-跳表" class="headerlink" title="跳跃表(跳表)"></a>跳跃表(跳表)</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>  有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p>
<h4 id="2、实例"><a href="#2、实例" class="headerlink" title="2、实例"></a>2、实例</h4><p>  对比有序链表和跳跃表，从链表中查询出51</p>
<p>（1）有序链表</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205211835526.png" alt="image-20220205211835526">                       </p>
<p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p>
<p>（2）跳跃表</p>
<p> <img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205211855669.png" alt="image-20220205211855669"></p>
<ol>
<li>从第2层开始，1节点比51节点小，向后比较。</li>
<li>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</li>
<li>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</li>
<li>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</li>
</ol>
<p>从此可以看出跳跃表比有序链表效率要高</p>
]]></content>
  </entry>
  <entry>
    <title>Redis——配置后台启动</title>
    <url>/2022/02/04/Redis%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>进入/usr/local/redis/redis-6.2.6/utils目录下执行脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis/redis-6.2.6/utils</span><br><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure>

<p>执行脚本可能会报错：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204211320488.png" alt="image-20220204211320488"></p>
<p>我们使用vim，将install_server.sh脚本中如下代码注释即可：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204211042462.png" alt="image-20220204211042462"></p>
<p>安装成功，这里我全部都是enter选择默认配置：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204211632150.png" alt="image-20220204211632150"></p>
<p>后台启动并查看运行状态：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204211858740.png" alt="image-20220204211858740"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204214557898.png" alt="image-20220204214557898"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——安装</title>
    <url>/2022/02/03/Redis%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>英文官网：<a href="https://redis.io/">https://redis.io/</a></li>
<li>中文官网：<a href="http://redis.cn/">http://redis.cn/</a></li>
</ul>
</blockquote>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203145900071.png" alt="image-20220203145900071"></p>
<h2 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h2><ul>
<li>Redis是一个开源的key-value存储系统。</li>
<li>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</li>
<li>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li>
<li>在此基础上，Redis支持各种不同方式的排序。</li>
<li>与memcached一样，为了保证效率，数据都是缓存在内存中。</li>
<li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li>
<li>并且在此基础上实现了master-slave(主从)同步。</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h4 id="配合关系型数据库做高速缓存"><a href="#配合关系型数据库做高速缓存" class="headerlink" title="配合关系型数据库做高速缓存"></a>配合关系型数据库做高速缓存</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204201013137.png" alt="image-20220204201013137"></p>
<h4 id="多样的数据结构存储持久化数据"><a href="#多样的数据结构存储持久化数据" class="headerlink" title="多样的数据结构存储持久化数据"></a>多样的数据结构存储持久化数据</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204200947400.png" alt="image-20220204200947400"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>安装C语言环境（如果有，这一步可以跳过）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl scl-utils-build</span><br><span class="line">yum install -y devtoolset-8-toolchain</span><br><span class="line">scl enable devtoolset-8 bash</span><br></pre></td></tr></table></figure>

<ul>
<li>/usr/local目录下创建redis文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir redis</span><br></pre></td></tr></table></figure>

<ul>
<li>将安装包解压到新建的redis目录中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis</span><br><span class="line">tar zxvf /opt/software/redis-6.2.6.tar.gz -C ./</span><br></pre></td></tr></table></figure>

<p>解压完之后，在redis目录下会出现一个redis-6.2.6目录</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204203944653.png" alt="image-20220204203944653"></p>
<ul>
<li>编译并安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis-6.2.6</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装成功</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204204335967.png" alt="image-20220204204335967"></p>
<blockquote>
<p>ps：执行make的时候报错</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204205112972.png" alt="image-20220204205112972"></p>
<p>解决方案：执行命令 <strong>make distclean</strong></p>
<p>执行完后，再执行一遍make &amp;&amp; make install</p>
</blockquote>
<h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204205517902.png" alt="image-20220204205517902"></p>
<h3 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204210256753.png" alt="image-20220204210256753"></p>
<p>前台启动，命令行窗口不能关闭，否则服务器停止（一般不采用）。</p>
<h3 id="配置文件启动"><a href="#配置文件启动" class="headerlink" title="配置文件启动"></a>配置文件启动</h3><ul>
<li>将/usr/local/redis/redis-6.2.6/redis.conf复制备份</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">mkdir redis</span><br><span class="line">cp /usr/local/redis/redis-6.2.6/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>修改6379.conf以下几处</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注释第76行，95行改成no，以便允许远程连接，否则只能本机连接</span><br><span class="line">76 #bind 127.0.0.1 -::1</span><br><span class="line">95 protected-mode no</span><br><span class="line"># 258行改为yes，允许后台启动</span><br><span class="line">258 daemonize yes</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/redis-server /usr/local/redis/redis-6.2.6/redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204223904012.png" alt="image-20220204223904012"></p>
<h3 id="系统后台启动"><a href="#系统后台启动" class="headerlink" title="系统后台启动"></a>系统后台启动</h3><ul>
<li>编辑redis.service</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/redis.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将下面内容写进去</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里要注意换成你自己的目录</span></span><br><span class="line">ExecStart=/usr/local/bin/redis-server /etc/redis/6379.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>让文件立即生效</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">systemctl start redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">systemctl restart redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">systemctl stop redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">systemctl status redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启</span></span><br><span class="line">systemctl enable redis.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止开机自启</span></span><br><span class="line">systemctl disable redis.service</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204224633669.png" alt="image-20220204224633669"></p>
<h3 id="redis-cli客户端连接测试"><a href="#redis-cli客户端连接测试" class="headerlink" title="redis-cli客户端连接测试"></a>redis-cli客户端连接测试</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204225423226.png" alt="image-20220204225423226"></p>
<h3 id="Redis-Desktop远程连接测试"><a href="#Redis-Desktop远程连接测试" class="headerlink" title="Redis Desktop远程连接测试"></a>Redis Desktop远程连接测试</h3><ul>
<li>建立连接</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204230650784.png" alt="image-20220204230650784"></p>
<ul>
<li>无法连接</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204225842776.png" alt="image-20220204225842776"></p>
<p>给redis设置一个密码即可，在/etc/redis/6379.conf文件下做如下修改：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204230327825.png" alt="image-20220204230327825"></p>
<p>requirepass后面就是你的redis密码。</p>
<ul>
<li>重新建立连接</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204230938826.png" alt="image-20220204230938826"></p>
<ul>
<li>测试成功</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204230608520.png" alt="image-20220204230608520"></p>
<p>此时，我们使用redis-cli连接也需要输入密码</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220205144625640.png" alt="image-20220205144625640"></p>
]]></content>
  </entry>
  <entry>
    <title>Redis——NoSQL数据库简介</title>
    <url>/2022/02/03/Redis%E2%80%94%E2%80%94NoSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h2><p>我们目前的技术分类有：</p>
<ul>
<li>解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</li>
<li>解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</li>
<li>解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203152632905.png" alt="image-20220203152632905"></p>
<p>在我们的Web1.0时代，数据量访问特别有限，我们使用一夫当关的高性能单节点服务器就足以满足绝大部分的业务场景了。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203160555989.png" alt="image-20220203160555989"></p>
<p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p>
<p>而为了解决CPU和内存的压力，比如，session存在哪里？应运而生的有以下几种解决方案：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203161839755.png" alt="image-20220203161839755"></p>
<ul>
<li>存在cookie中，但是不安全，而且网络负担效率低。</li>
<li>存在文件服务器或者数据库中，造成严重的IO压力以及效率问题。</li>
<li>session复制，易造成session数据冗余，并且节点越多，浪费越大。</li>
<li>存在缓存数据库中，完全在内存中，速度快，数据结构简单。</li>
</ul>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203162815759.png" alt="image-20220203162815759"></p>
<h2 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h2><p>所谓的NoSQL不是指没有SQL，而是指Not Only SQL，意指“不仅仅是SQL”，泛指“非关系型数据库”。NoSQL数据库不依赖于传统的业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。它有以下特点：</p>
<ul>
<li>不遵循SQL标准；</li>
<li>不支持ACID（注意不是不支持事务）；</li>
<li>远超于SQL的性能；</li>
<li>……</li>
</ul>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>对数据高并发的读写。</li>
<li>海量数据的读写。</li>
<li>对数据高可扩展性。</li>
</ul>
<h3 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h3><ul>
<li>需要事务支持。</li>
<li>基于sql的结构化查询存储，处理复杂的关系。</li>
<li><strong>用不着sql的和用来sql也不行的情况，请考虑用NoSQL。</strong></li>
</ul>
<h3 id="常见产品"><a href="#常见产品" class="headerlink" title="常见产品"></a>常见产品</h3><h4 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h4><ul>
<li>很早出现的NoSql数据库</li>
<li>数据都在内存中，一般不持久化</li>
<li>支持简单的key-value模式，支持类型单一</li>
<li>一般是作为缓存数据库辅助持久化的数据库</li>
</ul>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul>
<li>几乎覆盖了Memcached的绝大部分功能</li>
<li>数据都在内存中，支持持久化，主要用作备份恢复</li>
<li>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</li>
<li>一般是作为缓存数据库辅助持久化的数据库</li>
</ul>
<h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><ul>
<li>高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong></li>
<li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</li>
<li>虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能</li>
<li>支持二进制数据及大型对象</li>
<li>可以根据数据的特点替代RDBMS ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</li>
</ul>
<h2 id="行式存储数据库（大数据时代）"><a href="#行式存储数据库（大数据时代）" class="headerlink" title="行式存储数据库（大数据时代）"></a>行式存储数据库（大数据时代）</h2><h3 id="行式数据库"><a href="#行式数据库" class="headerlink" title="行式数据库"></a>行式数据库</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203164458163.png" alt="image-20220203164458163"></p>
<h3 id="列式数据库"><a href="#列式数据库" class="headerlink" title="列式数据库"></a>列式数据库</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203164655935.png" alt="image-20220203164655935"></p>
<h3 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h3><p>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。</p>
<p>HBase的目标就是处理数据量非常庞大的表，可以用普通的计算机处理超过10亿行数据，还可处理有数百万列元素的数据表。</p>
<h3 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h3><p>Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的海量数据集(数据量通常达到PB级别)。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p>
<blockquote>
<p>ps：计算机存储单位</p>
<p>计算机存储单位一般用B，KB，MB，GB，TB，EB，ZB，YB，BB来表示，它们之间的关系是：</p>
<p>位 bit (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。</p>
<p>字节 byte：8个二进制位为一个字节(B)，最常用的单位。</p>
<p>1KB (Kilobyte 千字节)=1024B，</p>
<p>1MB (Megabyte 兆字节 简称“兆”)=1024KB，</p>
<p>1GB (Gigabyte 吉字节 又称“千兆”)=1024MB，</p>
<p>1TB (Trillionbyte 万亿字节 太字节)=1024GB，其中1024=2^10 ( 2 的10次方)，</p>
<p>1PB（Petabyte 千万亿字节 拍字节）=1024TB，</p>
<p>1EB（Exabyte 百亿亿字节 艾字节）=1024PB，</p>
<p>1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,</p>
<p>1YB (Jottabyte 一亿亿亿字节 尧字节)= 1024 ZB,</p>
<p>1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.</p>
<p>注：“兆”为百万级数量单位。</p>
</blockquote>
<h2 id="图关系型数据库"><a href="#图关系型数据库" class="headerlink" title="图关系型数据库"></a>图关系型数据库</h2><p>主要应用：社会关系，公共交通网络，地图及网络拓谱(n*(n-1)/2)</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203165033021.png" alt="image-20220203165033021"></p>
<h2 id="DB-Engines数据库排名"><a href="#DB-Engines数据库排名" class="headerlink" title="DB-Engines数据库排名"></a>DB-Engines数据库排名</h2><p><a href="http://db-engines.com/en/ranking"><strong>http://db-engines.com/en/ranking</strong></a></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203165235844.png" alt="image-20220203165235844"></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot——自动配置</title>
    <url>/2022/02/02/SpringBoot%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="SpringBootApplication流程分析图："><a href="#SpringBootApplication流程分析图：" class="headerlink" title="@SpringBootApplication流程分析图："></a>@SpringBootApplication流程分析图：</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203205314823.png" alt="image-20220203205314823"></p>
<p>从MainApplication上的@SpringBootApplication注解出发，在@SpringBootApplication里面有三个注解：</p>
<ul>
<li>其中@ComponentScan是用来包扫描的。</li>
<li>进入@SpringBootConfiguration里面发现它其实也就是对@Configuration进行了一层封装，所以我们的MainApplication其实也是一个配置类。</li>
<li>最后一个@EnableAutoConfiguration，在它里面有两个注解。其中@Import导入了AutoConfigurationImportSelector类，在这个类里面自定义了逻辑并返回需要导入的组件。</li>
</ul>
<h2 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h2><p>在@AutoConfigurationPackage里面，它又用@Import导入了一个Registrar。我们进入这个Registrar，给它打上断点之后debug运行。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203211331364.png" alt="image-20220203211331364"></p>
<p>我们计算一下 new PackageImports(metadata).getPackageNames() 的值发现，它就是 com.atqingke.boot 。也就是我们的启动类MainApplication所在的包。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203211426427.png" alt="image-20220203211426427"></p>
<p>也就是说，它利用Registrar将指定包下的一系列组件全部导进来，而这个指定的包就是我们的启动类所在的包。</p>
<h2 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h2><h4 id="流程分析图："><a href="#流程分析图：" class="headerlink" title="流程分析图："></a>流程分析图：</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204175821398.png" alt="image-20220204175821398"></p>
<p>在@EnableAutoConfiguration里面，除了有自动配置包，还使用@Import导入了一个ImportSelector。我们知道，@Import可以导入一个实现了ImportSelector接口的类，在这个类中自定义逻辑并且返回需要导入的组件。可以看到，它导入的AutoConfigurationImportSelector中实现了DeferredImportSelector中的selectImports方法。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204170452319.png" alt="image-20220204170452319"></p>
<p>可以看到，在这个方法中，首先判断传过来的标注了@Import注解的类的信息，即EnableAutoConfiguration，如果不需要导入组件，就返回空。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204170805074.png" alt="image-20220204170805074"></p>
<p>然后，它通过getAutoConfigurationEntry方法，获取要注册的组件。我们进入getAutoConfigurationEntry方法里面：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204172827988.png" alt="image-20220204172827988"></p>
<p>可以看到，它通过getCandidateConfigurations方法，来获取所有候选的配置，一共有127个。获取成功之后，再通过一系列操作（去重、排除某些不符合的……），最后将其封装为一个AutoConfigurationEntry返回。</p>
<h4 id="那么这个127是怎么来的呢？"><a href="#那么这个127是怎么来的呢？" class="headerlink" title="那么这个127是怎么来的呢？"></a>那么这个127是怎么来的呢？</h4><p>我们再进入getCandidateConfigurations方法里面，可以看到，它会通过一个Spring的工厂加载器：Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader)，来得到所有组件。</p>
<p>进入loadSpringFactories里，看它是怎样利用工厂加载器来获取所有组件名字的</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204174041053.png" alt="image-20220204174041053"></p>
<p>可以看到，类加载器是通过读取META-INF/spring.factories文件，来获取组件名字的。我们去我们引入的Maven依赖中找到这个文件：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220204174405172.png" alt="image-20220204174405172"></p>
<p>可以看到，在它的这个文件中，已经把SpringBoot一启动要给容器中要加载的所有配置类给写死了。也可以看到，它的Auto Configure是从第21行直到148行共127个要给容器中注册的组件。</p>
<h3 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h3><p>通过上面我们可以知道，我们的127个场景的所有自动配置（也就是哪些xxxAutoConfiguration）会在启动的时候默认全部加载，但是，这些xxxAutoConfiguration它是会按照@Conditional来按需配置的。举个例子，我们看一下我们的AOP功能的配置：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213142409154.png" alt="image-20220213142409154"></p>
<p>首先它通过@Conditional判断你当前的是否配置了“spring.aop”，并且即使你没配，它也认为“matchIfMissing = true”你配了：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213142553014.png" alt="image-20220213142553014"></p>
<p>所以这个配置类会生效！然后它会判断你是否有Advice类，这个Advice是aspectj包下的，我们这里并没有导入AOP的依赖，所以没有这个类。因此这里不会生效，那里面的JDK和cjlib的动态代理也就不会生效了。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213142731060.png" alt="image-20220213142731060"></p>
<p>最后，它有判断你没有Advice类的逻辑，也就是我们没有给项目导入AOP场景，它会有一个默认的AOP代理：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213143020891.png" alt="image-20220213143020891"></p>
<p>也就是说：SpringBoot默认会在底层配好所有的组件，但是如果用户自己配置了以用户的优先！</p>
<blockquote>
<p>总结：</p>
<ul>
<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>
</li>
<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>
</li>
<li><p>生效的配置类就会给容器中装配很多组件</p>
</li>
<li><p>只要容器中有这些组件，相当于这些功能就有了</p>
</li>
<li><p>定制化配置</p>
</li>
<li><ul>
<li>用户直接自己@Bean替换底层的组件</li>
<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>
</ul>
</li>
</ul>
<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>
</blockquote>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>现在，我们知道：SpringBoot帮我们将所有的配置都设置了默认的，但并不是所有的配置都会生效，我们可以引入相关依赖进行按需开启，也可以自己配置相关细节来覆盖。而这些业务场景在官网都有介绍，我们可以自己结合实际需求，查看文档<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213143855881.png" alt="image-20220213143855881"></p>
<p>我们要知道哪些配置生效哪些不生效，最直接的办法就是自己分析，引入场景对应的自动配置一般都生效了。我们也可以在配置文件中“debug=true”开启自动配置报告，Negative（不生效）\Positive（生效）。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213144432654.png" alt="image-20220213144432654"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220213144503772.png" alt="image-20220213144503772"></p>
<p>如果我们需要修改配置，也可以自己去分析，看xxxProperties中绑定了配置文件中的哪些值，或者去查看官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties%E3%80%82">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties。</a></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot——底层注解</title>
    <url>/2022/02/02/SpringBoot%E2%80%94%E2%80%94%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://atqingke.com/index.php/archives/380/">Spring注解驱动开发——组件注册</a></p>
</blockquote>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br></pre></td></tr></table></figure>

<p>@Configuration注解里面有个属性proxyBeanMethods，它是用来指明代理bean的方法，分为两种模式：Full模式和Lite模式。</p>
<ul>
<li>proxyBeanMethods = true，即为Full模式，也就是说：SpringBoot会保证每个@Bean方法被调用多少次返回的组件都是单实例的。</li>
<li>proxyBeanMethods = false，即为Lite模式，也就是说：SpringBoot会保证每个@Bean方法被调用多少次返回的组件都是新创建的。</li>
</ul>
<p>关于这两种模式的使用，我们坚持以下规则：</p>
<ol>
<li>如果是配置类组件之间没有依赖关系，我们则使用Lite模式来加速容器启动过程，减少判断。</li>
<li>如果配置类组件之间有依赖关系，我们使用Full模式来让方法调用之前能得到之前的单实例组件。</li>
</ol>
<h2 id="Import、"><a href="#Import、" class="headerlink" title="@Import、"></a>@Import、</h2><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220203213003529.png" alt="image-20220203213003529"></p>
<p>参见<a href="https://atqingke.com/index.php/archives/380/">Spring注解驱动开发——组件注册</a></p>
<h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>如果我们要对使用Spring框架的项目进行迁移，我们就需要使用到我们的@ImportResource注解，用于原生配置文件的引入。例如，我们之前在Spring阶段写的配置文件需要导入到当前的SpringBoot项目，只需要在配置类上引入即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:/beans.xml&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="ConfigurationProperties自动绑定"><a href="#ConfigurationProperties自动绑定" class="headerlink" title="@ConfigurationProperties自动绑定"></a>@ConfigurationProperties自动绑定</h2><p>为了将properties文件中的内容读取并封装到我们的JavaBean中，我们可以使用Properties类来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">         Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">         pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             String strKey = (String) enum1.nextElement();</span><br><span class="line">             String strValue = pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>但在SpringBoot中，有更简单的解决方案。</p>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>有一个JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">myUser.name</span>=<span class="string">Tom</span></span><br><span class="line"><span class="meta">myUser.age</span>=<span class="string">23</span></span><br></pre></td></tr></table></figure>

<h3 id="方案一：-Component-ConfigurationProperties"><a href="#方案一：-Component-ConfigurationProperties" class="headerlink" title="方案一：@Component + @ConfigurationProperties"></a>方案一：@Component + @ConfigurationProperties</h3><p>首先，要将我们的User加到我们的容器中，使用@ConfigurationProperties注解才有效。</p>
<p>然后，在@ConfigurationProperties中有一个属性prefix，它就是用来指定你在properties文件中的属性前缀的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfgiurationProperties(prefix = &quot;myUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; ...... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案二：-EnableConfigurationProperties-ConfigurationProperties"><a href="#方案二：-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="方案二：@EnableConfigurationProperties + @ConfigurationProperties"></a>方案二：@EnableConfigurationProperties + @ConfigurationProperties</h3><p>第二种方案是不需要我们显示的把JavaBean注入到容器中，我们在<strong>配置类</strong>里添加一个注解@EnableConfigurationProperties，它会帮我们做这件事。</p>
]]></content>
  </entry>
  <entry>
    <title>VMWare安装CentOS</title>
    <url>/2022/02/01/Tools-VMWare%E5%AE%89%E8%A3%85CentOS/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Gitee + PicGo实现博客图床</title>
    <url>/2022/01/31/Tools-Gitee-PicGo%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="前置准备："><a href="#前置准备：" class="headerlink" title="前置准备："></a>前置准备：</h2><ul>
<li>Gitee注册账号<a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></li>
<li>PicGo下载安装<a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn/PicGo · GitHub</a></li>
<li>Typora下载安装<a href="https://typora.com.cn/">https://typora.com.cn/</a></li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul>
<li>Gitee<ol>
<li>新建一个仓库</li>
<li>在个人设置里面找到私人令牌</li>
<li>点击生成新令牌</li>
<li>勾选projects选项</li>
<li>生成令牌</li>
<li>输入账户密码</li>
<li>得到token（自行保存）</li>
</ol>
</li>
<li>PicGo<ol>
<li>安装插件</li>
<li>设置图床</li>
</ol>
</li>
<li>Typora<ol>
<li>修改偏好设置</li>
<li>验证上传</li>
<li>浏览器访问成功</li>
</ol>
</li>
</ul>
<h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><h3 id="1-创建一个仓库"><a href="#1-创建一个仓库" class="headerlink" title="1. 创建一个仓库"></a>1. 创建一个仓库</h3><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131175732693.png" alt="image-20220131175732693"></p>
<h3 id="2-获取token"><a href="#2-获取token" class="headerlink" title="2. 获取token"></a>2. 获取token</h3><h4 id="2-1-打开设置"><a href="#2-1-打开设置" class="headerlink" title="2.1 打开设置"></a>2.1 打开设置</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131175859414.png" alt="image-20220131175859414"></p>
<h4 id="2-2-找到私人令牌"><a href="#2-2-找到私人令牌" class="headerlink" title="2.2 找到私人令牌"></a>2.2 找到私人令牌</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131175934845.png" alt="image-20220131175934845"></p>
<h4 id="2-3-生成新令牌"><a href="#2-3-生成新令牌" class="headerlink" title="2.3 生成新令牌"></a>2.3 生成新令牌</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131180002086.png" alt="image-20220131180002086"></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131180046401.png" alt="image-20220131180046401"></p>
<h4 id="2-4-输入密码"><a href="#2-4-输入密码" class="headerlink" title="2.4 输入密码"></a>2.4 输入密码</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131180122654.png" alt="image-20220131180122654"></p>
<h4 id="2-5-获取到token并自行保存"><a href="#2-5-获取到token并自行保存" class="headerlink" title="2.5 获取到token并自行保存"></a>2.5 获取到token并自行保存</h4><p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131180212546.png" alt="image-20220131180212546"></p>
<p>自此，Gitee操作完毕，要注意保存好自己的token，在页面上也提示了，当你确认并关闭之后，将获取不到了（如果丢失，重新生成即可）</p>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>打开PicGo，在插件位置搜索gitee，将搜索出来的插件全部安装（如果安装失败，可以尝试安装node环境之后再安装）</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131180707433.png" alt="image-20220131180707433"></p>
<p>配置图床</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131181024413.png" alt="image-20220131181024413"></p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>ctrl + 逗号打开偏好设置</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131181427100.png" alt="image-20220131181427100"></p>
<p>点击验证图片上传选项</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131181309705.png" alt="image-20220131181309705"></p>
<p>将得到的url地址粘贴至浏览器访问。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220201084206678.png" alt="image-20220201084206678"></p>
<p>大功告成！！！</p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot——HelloWorld</title>
    <url>/2022/01/31/SpringBoot%E2%80%94%E2%80%94HelloWorld/</url>
    <content><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>创建Maven工程SpringBootHelloWorld，导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atqingke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootHelloWorld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/1/31 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写主启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/1/31 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置访问端口号：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure>

<p>运行MainApplication，访问<a href="http://localhost:8888/hello">http://localhost:8888/hello</a></p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131155441556.png"></p>
<h2 id="依赖管理特性"><a href="#依赖管理特性" class="headerlink" title="依赖管理特性"></a>依赖管理特性</h2><ul>
<li><p><strong>父项目做依赖管理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我们引入的SpringBoot父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在SpringBoot里面它的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在它的父工程里面几乎声明了所有开发中常用的依赖版本号，自动版本仲裁机制 --&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>无须关注版本号，自动版本仲裁</strong></p>
<ul>
<li>我们在自己的pom文件里引入依赖，默认可以不用写版本号。</li>
<li>当引入非版本仲裁的jar，才需要写版本号。</li>
</ul>
</li>
<li><p><strong>可以修改默认版本号</strong></p>
<p>如果你需要的依赖的版本已自动仲裁的版本号不对，可以在自己的pom文件里重新写配置。这里以mysql的依赖为例：</p>
<ol>
<li><p>首先查看spring-boot-dependencies里面规定当前依赖的版本时用的key。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131160616569.png"></p>
</li>
<li><p>在当前项目里重写配置。</p>
</li>
</ol>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131160759918.png"></p>
</li>
<li><p><strong>开发导入starter场景启动器</strong></p>
<p>我们在我们的项目中引入的父工程spring-boot-starter-parent，类似于这种spring-boot-starter-*就代表某种场景，只要我们在pom文件里引入了starter，这个常见的所有常规需要的依赖都会自动导入。</p>
<p>SpringBoot所有支持的场景见它的官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p>
<p>而如果我们见到类似于*-spring-boot-starter就表示这是第三方为我们提供额简化开发的场景启动器，例如MyBatis-Plus的starter：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而所有的starter最底层都会依赖于我们的spring-boot-starter</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220131184949180.png" alt="image-20220131184949180"></p>
<h2 id="自动配置属性"><a href="#自动配置属性" class="headerlink" title="自动配置属性"></a>自动配置属性</h2><ol>
<li>自动配好Tocat<ul>
<li>引入Tomcat依赖</li>
<li>配置Tomcat</li>
</ul>
</li>
<li>自动配好SpringMVC<ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
<li>自动配好Web常见功能，如：字符编码问题<ul>
<li>SpringBoot帮我们配置好了所有Web开发的常见场景</li>
</ul>
</li>
<li>默认的包结构<ul>
<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>
<li>无需以前的包扫描配置</li>
<li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=”com.atqingke”)<ul>
<li>或者@ComponentScan指定扫描路径</li>
</ul>
</li>
</ul>
</li>
<li>各种配置拥有默认值<ul>
<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>
<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>
</ul>
</li>
<li>按需加载所有自动配置项<ul>
<li>非常多的starter</li>
<li>引入了哪些场景这个场景的自动配置才会开启</li>
<li>SpringBoot所有的自动配置功能都在spring-boot-autoconfigure包里面</li>
</ul>
</li>
<li>…………</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>【源码】Spring——AOP</title>
    <url>/2022/01/29/Spring%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91%E2%80%94%E2%80%94AOP/</url>
    <content><![CDATA[<p>f</p>
]]></content>
  </entry>
  <entry>
    <title>MyBatis——MBG</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94MBG/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MyBatis——缓存</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MyBatis——动态SQL</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MyBatis——SQL映射文件</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MyBatis——全局配置文件</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MyBatis——HelloWorld</title>
    <url>/2022/01/29/MyBatis%E2%80%94%E2%80%94HelloWorld/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SpringMVC——@RequestMapping映射</title>
    <url>/2022/01/23/SpringMVC%E2%80%94%E2%80%94-RequestMapping%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"></span><br><span class="line">   String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] headers() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] consumes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] produces() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequestMapping映射请求注解"><a href="#RequestMapping映射请求注解" class="headerlink" title="@RequestMapping映射请求注解"></a>@RequestMapping映射请求注解</h2><p>SpringMVC使用@RequestMapping注解为控制器指定可以处理哪些URL请求，从源码中可以看到，在类上和方法定义处都可以标注。它的作用就是为了让DispatcherServlet截获请求后，就通过控制器上@RequestMapping提供的映射信息确定请求所对应的处理方法。</p>
<p>我们在index.jsp中编写我们的测试代码来看看</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;RequestMapping测试&lt;/h1&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;hello&quot;</span>&gt;写在方法上的RequestMapping&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;hello01&quot;</span>&gt;写在类上的RequestMapping&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<p>在我们的controller中，我们先不在类上标注@RequestMapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// @RequestMapping(&quot;/ha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myFirstRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求收到了...正在处理中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们启动可以发现，点击访问的是：<a href="http://localhost:8080/SpringMVC_war_exploded/hello">http://localhost:8080/SpringMVC_war_exploded/hello</a></p>
<p><img src="C:/Users/pengbin007/AppData/Roaming/Typora/typora-user-images/image-20220130144836741.png" alt="image-20220130144836741"></p>
<p>而当我们在类上也标注@RequestMapping时会发现，当我们访问的是：<a href="http://localhost:8080/SpringMVC_war_exploded/ha/hello%E6%89%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%EF%BC%8C%E8%80%8C%E7%BB%A7%E7%BB%AD%E8%AE%BF%E9%97%AEhttp://localhost:8080/SpringMVC_war_exploded/hello%E4%BC%9A%E6%8F%90%E7%A4%BA404%E3%80%82">http://localhost:8080/SpringMVC_war_exploded/ha/hello才能访问成功，而继续访问http://localhost:8080/SpringMVC_war_exploded/hello会提示404。</a></p>
<p>简而言之，我们在类上标注的@RequestMapping就相当于我们项目的根目录，而当我们没有在类上指定的时候，方法上的@RequestMapping就是请求的根目录。</p>
<h2 id="RequestMapping映射请求方式"><a href="#RequestMapping映射请求方式" class="headerlink" title="RequestMapping映射请求方式"></a>RequestMapping映射请求方式</h2><p>我们先看一个标准的HTTP请求报头</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220130145331634.png" alt="image-20220130145331634"></p>
<p>@RequestMapping除了可以使用请求URL映射请求外，还可以使用请求方法、请求参数以及请求头映射请求。在源码中我们可以看到，它有value、method、params、headers等属性，它们分别表示请求URL、请求方法、请求参数和请求头的映射条件。</p>
<p>其中，比较重要的是value和method属性，params和headers了解即可。value我们已经使用过了，我们来看method</p>
<h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>先在index.jsp中准备好测试页面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;测试RequestMapping的属性&lt;/h1&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;ha/handle02&quot;</span>&gt;测试method属性&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;ha/handle03&quot;</span>&gt;测试params属性&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;ha/handle04&quot;</span>&gt;测试headers属性(只能谷歌浏览器打开)&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/handle02&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在参数位置指明了method为POST，那么，只有POST请求才能进行访问。因此，当我们点击“测试method属性”的连接，会发现提示405，GET方式不允许。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220130150145762.png" alt="image-20220130150145762"></p>
<p>除了POST，在RequestMethod中还有其它请求方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RequestMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而有了这个请求方式之后，我们就可以实现Rest风格的请求方式了（详情参见）。</p>
<h3 id="params-amp-headers"><a href="#params-amp-headers" class="headerlink" title="params &amp; headers"></a>params &amp; headers</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/handle03&quot;, params=&quot;&#123;&quot;user=admin&quot;, &quot;password&quot;&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/handle04&quot;, headers=&#123;&quot;User-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>params：规定请求参数<ul>
<li><pre><code> params和headers都支持简单的表达式：
</code></pre>
</li>
<li><pre><code>     param1：表示请求中必须包含名为param1的请求参数，没带都会404
</code></pre>
</li>
<li><pre><code>     !param：表示请求不能包含名为param1的请求参数
</code></pre>
</li>
<li><pre><code>     param != value1：表示请求包含名为param1的请求参数，但其值不能为value1
</code></pre>
</li>
<li><pre><code>     &#123;&quot;param1 = value1&quot;, &quot;param2&quot;&#125;：请求必须包含param1和param2参数，且param1必须等于value1
</code></pre>
</li>
</ul>
</li>
<li>headers：规定请求头，同params</li>
<li>consumes：只接受内容类型是哪种的请求，规定请求头中的Content-Type</li>
<li>produce：告诉浏览器返回的内容类型是什么，给响应头中加上Content-Type</li>
</ul>
</blockquote>
<p>在我们上面的handle03中就规定了，访问路径中必须包含参数user和password，并且user必须等于admin才能访问成功。在handle04中headers规定了必须使用Chrome浏览器才能访问，而火狐等浏览器无法访问。</p>
<h2 id="RequestMapping支持Ant路径风格"><a href="#RequestMapping支持Ant路径风格" class="headerlink" title="RequestMapping支持Ant路径风格"></a>RequestMapping支持Ant路径风格</h2><p>所谓的RequestMapping支持Ant路径风格就是，我们可以在URL地址上写模糊的通配符，Ant风格资源地址支持3中通配符：</p>
<ol>
<li>?：匹配文件名中的一个字符</li>
<li>*：匹配文件名中任意字符</li>
<li>**：匹配多层路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/*/createUser</span><br><span class="line">匹配 /user/aaa/createUser、/user/bbb/createUser 等 URL</span><br><span class="line"></span><br><span class="line">/user/**/createUser</span><br><span class="line">匹配 /user/createUser、/user/aaa/bbb/createUser 等 URL</span><br><span class="line"></span><br><span class="line">/user/createUser??</span><br><span class="line">匹配 /user/createUseraa、/user/createUserbb 等 URL</span><br></pre></td></tr></table></figure>

<p>注意，？只匹配一个字符，0个多个都不行。并且，在模糊和精确同时成立的情况下，精确优先。</p>
<h2 id="占位符-PathVariable"><a href="#占位符-PathVariable" class="headerlink" title="占位符@PathVariable"></a>占位符@PathVariable</h2><p>通过使用@PathVariable注解，可以将URL中占位符参数绑定到控制器处理方法的入参中，即将URL中的{xxx}占位符通过@PathVariable(“xxx”)绑定到操作方法的入参中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pathVariableTest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringMVC——Helloworld</title>
    <url>/2022/01/22/SpringMVC%E2%80%94%E2%80%94Helloworld.bak/</url>
    <content><![CDATA[<h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><p>①   Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web 框架，是目前最主流的 MVC 框架之一。</p>
<p>②   Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。</p>
<p>③   Spring MVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口。</p>
<p>④   支持 REST 风格的 URL 请求。</p>
<p>⑤   采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。</p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>新建JavaWeb工程</p>
<h3 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h3><p>在Spring的基础上多了一个web包和webmvc包</p>
<p><img src="C:/Users/pengbin007/AppData/Roaming/Typora/typora-user-images/image-20220122173743610.png" alt="image-20220122173743610"></p>
<h3 id="2、写配置"><a href="#2、写配置" class="headerlink" title="2、写配置"></a>2、写配置</h3><p>在web.xml中配置前端控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringMVCSource<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定程序运行跳转首页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 前端控制器，所有请求的要经过这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- contextConfigLocation：指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springmvc.xml（src目录下）中开启包扫描配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atqingke&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写页面和controller"><a href="#3、编写页面和controller" class="headerlink" title="3、编写页面和controller"></a>3、编写页面和controller</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: pengbin007</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">1</span>/<span class="number">22</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">成功！！！</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/1/22 17:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、运行"><a href="#4、运行" class="headerlink" title="4、运行"></a>4、运行</h3><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220122181407453.png" alt="image-20220122181407453"></p>
<p>点击跳转到success.jsp页面</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220122181436214.png" alt="image-20220122181436214"></p>
<h2 id="HelloWorld细节"><a href="#HelloWorld细节" class="headerlink" title="HelloWorld细节"></a>HelloWorld细节</h2><p>SpringMVC的基本思想是：通过一个前端控制器，来控制所有请求，并进行智能派发。这个控制器是一个servlet，我们在web.xml中对它进行配置。</p>
<p>hello请求流程图解：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220123151912197.png" alt="image-20220123151912197"></p>
<h3 id="1、运行流程"><a href="#1、运行流程" class="headerlink" title="1、运行流程"></a>1、运行流程</h3><p> ① 客户端点击链接会发送<a href="http://localhost:8080/SpringMVC_war_exploded/hello">http://localhost:8080/SpringMVC_war_exploded/hello</a></p>
<p> ② 来到Tomcat服务器</p>
<p> ③ SpringMVC的前端控制器收到所有请求</p>
<p> ④ 来看请求地址和@RequestMapping标注的哪个匹配，来找到到底使用哪个类的哪个方法</p>
<p> ⑤ 前端控制器找到了目标处理器类和目标方法，直接利用反射执行目标方法</p>
<p> ⑥ 方法执行完后会有一个返回值，SpringMVC认为这个返回值就是页面地址</p>
<p> ⑦ 拿到方法返回值以后，用视图解析器进行拼串得到完整的页面地址</p>
<p> ⑧ 拿到页面地址，前端控制器帮我们转发页面</p>
<h3 id="2、指定SpringMVC的配置文件位置"><a href="#2、指定SpringMVC的配置文件位置" class="headerlink" title="2、指定SpringMVC的配置文件位置"></a>2、指定SpringMVC的配置文件位置</h3><p>我们可以将我们的配置文件写在src目录下，但是这样需要我们手动的去对它配置，SpringMVC才能扫描到。具体做法是，在servlet标签里配置一个init-param标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation：指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我们没有指定配置文件的位置，会报一个500的服务器错误</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220122181543151.png" alt="image-20220122181543151"></p>
<p>从上面的错误可以看到，它会去WEB-INF目录下找一个springDispatcherServlet-servlet.xml的配置文件，但是我们并没有提供这个文件。因此，如果我们不想在web.xml中指定SpringMVC配置文件位置，我们只需要在WEB-INF目录下新建我们的配置文件。而配置文件的名就是我们配置的前端控制器的name + “-servlet”即“springDispatcherServlet-servlet.xml”。</p>
<h3 id="3、-RequestMapping介绍"><a href="#3、-RequestMapping介绍" class="headerlink" title="3、@RequestMapping介绍"></a>3、@RequestMapping介绍</h3><p>@RequestMapping用于映射请求的名称，类似Structs2中action映射配置的action名称。我们使用@RequestMapping注解来映射请求的URL，而标注了的方法的返回值会通过视图解析器解析为实际的物理视图，对于InternalResourceViewResolver视图解析器，会做如下的解析：</p>
<ul>
<li><p>通过prefix + returnValue + suffix这样的方式得到实际的物理视图，然后做转发操作（/WEB-INF/pages/success.jsp）。</p>
</li>
<li><p>一般我们请求的映射路径和方法名一致，但实际上方法名是可以任意的。</p>
</li>
</ul>
<p>处理请求的方式有如下几种（位于RequestMethod枚举类中）：GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123; ...... &#125;</span><br></pre></td></tr></table></figure>

<p>而@RequestMapping除了可以标在方法上，还可以标注在类上。例如，如果我们在HelloController上标注@RequestMapping(“/helloController”)，那么我们的hello请求就变成了/helloController/hello。也就是说，请求的URL是由类上的映射 + 方法上的映射。</p>
<h3 id="4、简化controller的返回值"><a href="#4、简化controller的返回值" class="headerlink" title="4、简化controller的返回值"></a>4、简化controller的返回值</h3><p>按照目前的写法，每个请求如果都要返回success或其它页面的话，都需要写它的路径以及后缀名。因此，为了使它看起来更简便，我们可以在我们的配置文件springDispatcherServlet-servlet.xml中注册一个组件InternalResourceViewResolver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>prefix指定相对路径，suffix指定文件后缀名。</p>
<blockquote>
<p>ps：在配置的时候要注意，我们给prefix属性赋值的时候要带上最后的斜杠，否则，请求映射路径就变成了/WEB-INF/pagessuccess.jsp。而很明显，这是一个错误的路径。</p>
</blockquote>
<h3 id="5、url-pattern"><a href="#5、url-pattern" class="headerlink" title="5、url-pattern"></a>5、url-pattern</h3><p>我们在servlet-mapping标签里配置url-pattern来设置SpringMVC要拦截的请求。在这里，虽然我们写“/*”和“/”都是拦截所有请求。但我们并不使用“/ *”，因为“/ *”的范围更大，它还会把“ *.jsp”页面也给拦截掉，而处理“ *.jsp”页面是Tomcat的事情。</p>
]]></content>
  </entry>
  <entry>
    <title>CSS小结(尚硅谷-李立超课程)</title>
    <url>/2022/01/21/CSS%E5%B0%8F%E7%BB%93-%E5%B0%9A%E7%A1%85%E8%B0%B7-%E6%9D%8E%E7%AB%8B%E8%B6%85%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第二种方式（内部样式表）</span></span><br><span class="line"><span class="comment">        将样式编写到head中的style标签里</span></span><br><span class="line"><span class="comment">          然后通过CSS的选择器来选中元素并为其设置各种样式</span></span><br><span class="line"><span class="comment">          可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用</span></span><br><span class="line"><span class="comment">        内部样式表更加方便对样式进行复用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        问题</span></span><br><span class="line"><span class="comment">          只能对一个网页起作用，它里边的样式不能跨页面进行复用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;style&gt;</span></span><br><span class="line"><span class="comment">    p &#123;</span></span><br><span class="line"><span class="comment">      color: green;</span></span><br><span class="line"><span class="comment">      font-size: 46px;</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">  &lt;/style&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第三种方式（外部样式表）</span></span><br><span class="line"><span class="comment">      将CSS样式编写到一个外部的CSS文件中</span></span><br><span class="line"><span class="comment">        然后通过link标签来引入外部的CSS文件</span></span><br><span class="line"><span class="comment">      将样式编写到外部的CSS文件中，可以使用到浏览器的缓存机制</span></span><br><span class="line"><span class="comment">        从而加快网页的加载速度，提升用户体验</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>落霞与孤鹜齐飞，秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    网页分成三个部分：</span></span><br><span class="line"><span class="comment">        结构  HTML</span></span><br><span class="line"><span class="comment">        表现  CSS</span></span><br><span class="line"><span class="comment">        行为  JavaScript</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    CSS</span></span><br><span class="line"><span class="comment">        层叠样式表</span></span><br><span class="line"><span class="comment">        网页实际上是一个多层的结构，通过CSS分别为网页的每一个层来设置样式</span></span><br><span class="line"><span class="comment">          而最终我们能看到的只是网页的最上边一层</span></span><br><span class="line"><span class="comment">        总之一句话，CSS用来设置网页中元素的样式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      使用CSS来修改元素的样式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      第一种方式(内联样式，行内样式)</span></span><br><span class="line"><span class="comment">        在标签内部通过style属性来设置元素的样式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;p style=&quot;color: red; font-size: 60px&quot;&gt;少小离家老大回，乡音无改鬓毛衰&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;p style=&quot;color: red; font-size: 60px&quot;&gt;今天天气真不错&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;p style=&quot;color: red; font-size: 60px&quot;&gt;落霞与孤鹜齐飞，秋水共长天一色&lt;/p&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    CSS基本语法</span></span></span><br><span class="line"><span class="comment"><span class="css">      选择器 声明块</span></span></span><br><span class="line"><span class="comment"><span class="css">        通过选择器可以选中页面中的指定元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          比如 p 的作用就是选中页面中的所有p元素</span></span></span><br><span class="line"><span class="comment"><span class="css">        通过声明块来指定要为元素设置的样式</span></span></span><br><span class="line"><span class="comment"><span class="css">          声明块由一个个的声明组成</span></span></span><br><span class="line"><span class="comment"><span class="css">          声明是一个名值对结构</span></span></span><br><span class="line"><span class="comment"><span class="css">            一个样式名对应一个样式只，名和值之间以 : 连接，以 ; 结尾</span></span></span><br><span class="line"><span class="comment"><span class="css">    */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        将所有的段落设置为红色</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        元素选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：根据标签名来选中指定的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：标签名&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          例子：p&#123;&#125;、h1&#123;&#125;、div&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        id选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：根据元素的id属性值选中一个元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：#id属性值&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          例子：#red&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        class是一个标签的属性，它与id类似，不同的是class可以重复使用</span></span></span><br><span class="line"><span class="comment"><span class="css">          可以通过class属性来为属性分组</span></span></span><br><span class="line"><span class="comment"><span class="css">        类选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：根据元素的class属性值选中一组元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：.class属性值</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        通配选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：选中页面中的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：*&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>211111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>311111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>411111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>511111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>611111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        交集选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：选中同时复合多个条件的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：选择器1选择器2选择器n&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          注意点：</span></span></span><br><span class="line"><span class="comment"><span class="css">            交集选择器中如果有元素选择器，必须使用元素选择器开头</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        选择器分组（并集选择器）</span></span></span><br><span class="line"><span class="comment"><span class="css">          作用：同时选择多个选择器对应的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：选择器1,选择器2,选择器n&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>divdivdiv<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>pppppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* class为box的div的span子元素*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-class">.box</span> &gt; <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* div的所有span后代*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: large;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        选择下一个兄弟：</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：前一个 + 下一个</span></span></span><br><span class="line"><span class="comment"><span class="css">        选择下面的所有兄弟：</span></span></span><br><span class="line"><span class="comment"><span class="css">          语法：兄 ~ 弟</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    父元素：</span></span><br><span class="line"><span class="comment">    子元素：</span></span><br><span class="line"><span class="comment">    祖先元素：</span></span><br><span class="line"><span class="comment">    后代元素：</span></span><br><span class="line"><span class="comment">    兄弟元素：</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">      [属性名] 选择含有指定属性的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">      [属性名=属性值]</span></span></span><br><span class="line"><span class="comment"><span class="css">      [属性名^=属性值] 选择属性值以指定值开头的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">      [属性名$=属性值] 选择属性值以指定值结尾的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">      [属性名*=属性值] 选择属性值中含有某值的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        伪类（不存在得类，特殊的类）</span></span></span><br><span class="line"><span class="comment"><span class="css">          伪类用来描述一个元素的特殊状态</span></span></span><br><span class="line"><span class="comment"><span class="css">            比如：第一个子元素、被点击的元素、鼠标移入的元素</span></span></span><br><span class="line"><span class="comment"><span class="css">          伪类一般情况下都是使用 : 开头</span></span></span><br><span class="line"><span class="comment"><span class="css">            :first-child  第一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="css">            :last-child   最后一个子元素</span></span></span><br><span class="line"><span class="comment"><span class="css">            :nth-child(n)  选中第n个子元素</span></span></span><br><span class="line"><span class="comment"><span class="css">              特殊值：</span></span></span><br><span class="line"><span class="comment"><span class="css">                n   选中所有</span></span></span><br><span class="line"><span class="comment"><span class="css">                2n 或 even    选中偶数位</span></span></span><br><span class="line"><span class="comment"><span class="css">                2n+1 或 odd  选中奇数位</span></span></span><br><span class="line"><span class="comment"><span class="css">            以上这些伪类都是根据所有的子元素进行排序</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">            :first-of-type</span></span></span><br><span class="line"><span class="comment"><span class="css">            :last-of-type</span></span></span><br><span class="line"><span class="comment"><span class="css">            :nth-of-type(n)</span></span></span><br><span class="line"><span class="comment"><span class="css">            这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">            :not() 否定伪类</span></span></span><br><span class="line"><span class="comment"><span class="css">              将符合条件的元素从选择器中去除</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>第五个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="a元素的伪类"><a href="#a元素的伪类" class="headerlink" title="a元素的伪类"></a>a元素的伪类</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        由于隐私的原因，visited这个伪类只能修改链接的颜色</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        :hover 用来表示鼠标移入的状态</span></span></span><br><span class="line"><span class="comment"><span class="css">        :active 用来表示鼠标点击</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.atqingke.com&quot;</span>&gt;</span>访问过的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.atqingke.com&quot;</span>&gt;</span>没有访问过的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        伪元素，表示页面中一些特殊的并不真实存在的元素（特殊的位置）</span></span></span><br><span class="line"><span class="comment"><span class="css">          伪元素使用 :: 开头</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">          ::first-letter 表示第一个字母</span></span></span><br><span class="line"><span class="comment"><span class="css">          ::first-line 表示第一行</span></span></span><br><span class="line"><span class="comment"><span class="css">          ::selection 表示选中的内容</span></span></span><br><span class="line"><span class="comment"><span class="css">          ::before 元素的开始</span></span></span><br><span class="line"><span class="comment"><span class="css">          ::after 元素的结束</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;aaaa&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: burlywood;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;fsdddfs&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: rebeccapurple;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sint mollitia</span><br><span class="line">      expedita aspernatur quis impedit ipsum quibusdam rerum magnam nam</span><br><span class="line">      perferendis officia culpa, quod nostrum, iure excepturi veritatis</span><br><span class="line">      explicabo! Corrupti, ex? Lorem ipsum dolor sit amet consectetur</span><br><span class="line">      adipisicing elit. Quam tempora velit ducimus molestias assumenda, rem</span><br><span class="line">      accusantium consequuntur praesentium natus adipisci! Doloremque quia</span><br><span class="line">      voluptatibus aliquam, ea officiis quidem explicabo sunt quis. Lorem ipsum</span><br><span class="line">      dolor sit amet consectetur adipisicing elit. Asperiores laudantium</span><br><span class="line">      perspiciatis dolores aliquid, nisi excepturi quas inventore fugiat optio</span><br><span class="line">      expedita et, fuga sed! Cupiditate voluptatem nam ut. Quis, unde rem? Lorem</span><br><span class="line">      ipsum dolor sit amet consectetur adipisicing elit. Ipsa, fugit, porro</span><br><span class="line">      dolor omnis ad quae asperiores molestias magni rem commodi numquam</span><br><span class="line">      perferendis repudiandae voluptas, a facere ducimus? Obcaecati, nulla quae.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        样式的继承：我们为一个元素设置的样式也会应用到它的后代元素上</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        继承是发生在祖先后代之间的</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        继承的设计是为了方便我们的开发，利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，我们只需设置一次即可让所有的元素都具有该样式</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        注意：并不是所有的样式都会被继承</span></span></span><br><span class="line"><span class="comment"><span class="css">          比如：背景相关的，布局相关的这些仰卧时就不会被继承</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      我是一个p元素</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素外的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        样式的冲突</span></span></span><br><span class="line"><span class="comment"><span class="css">          当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        发生样式冲突时，应用那个样式由选择器的权重（优先级）决定</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        选择器的权重</span></span></span><br><span class="line"><span class="comment"><span class="css">          内联样式        1000</span></span></span><br><span class="line"><span class="comment"><span class="css">          id选择器        100</span></span></span><br><span class="line"><span class="comment"><span class="css">          类和伪类选择器  10</span></span></span><br><span class="line"><span class="comment"><span class="css">          元素选择器      1</span></span></span><br><span class="line"><span class="comment"><span class="css">          通配选择器      0</span></span></span><br><span class="line"><span class="comment"><span class="css">          继承的样式      没有优先级</span></span></span><br><span class="line"><span class="comment"><span class="css">        </span></span></span><br><span class="line"><span class="comment"><span class="css">        比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的）</span></span></span><br><span class="line"><span class="comment"><span class="css">          选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器</span></span></span><br><span class="line"><span class="comment"><span class="css">          如果优先级计算后相同，此时则优先使用靠下的样式</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        可以在某一个样式的后边添加 !important 则此时该样式会获取到最高的优先级，甚至超过内联样式</span></span></span><br><span class="line"><span class="comment"><span class="css">          注意，在开发中要慎重使用！                                                                                                 </span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">      长度单位</span></span></span><br><span class="line"><span class="comment"><span class="css">        像素</span></span></span><br><span class="line"><span class="comment"><span class="css">            屏幕实际上是由一个个的小点点构成的</span></span></span><br><span class="line"><span class="comment"><span class="css">            不同屏幕的像素大小是不同的，像素越小的屏幕显示的效果越清晰</span></span></span><br><span class="line"><span class="comment"><span class="css">            所以同样的200px在不同的设备下显示效果不一样</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        百分比</span></span></span><br><span class="line"><span class="comment"><span class="css">            也可以将属性值设置为相对于其父元素属性的百分比</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        em</span></span></span><br><span class="line"><span class="comment"><span class="css">            em是相对于元素的字体大小来计算的</span></span></span><br><span class="line"><span class="comment"><span class="css">            1em = 1font-size</span></span></span><br><span class="line"><span class="comment"><span class="css">            em会根据字体大小的改变而改变</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">        rem</span></span></span><br><span class="line"><span class="comment"><span class="css">            rem是相对于根元素的字体大小来计算的</span></span></span><br><span class="line"><span class="comment"><span class="css">    */</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="css">        颜色单位</span></span></span><br><span class="line"><span class="comment"><span class="css">          在CSS中可以直接使用颜色名来设置各种颜色</span></span></span><br><span class="line"><span class="comment"><span class="css">            比如：red、blue、yellow......</span></span></span><br><span class="line"><span class="comment"><span class="css">            但是在CSS中直接使用颜色名是非常不方便的</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">          RGB值</span></span></span><br><span class="line"><span class="comment"><span class="css">            RGB通过三种颜色的不同浓度来调配出不同的颜色</span></span></span><br><span class="line"><span class="comment"><span class="css">            每一种颜色的范围在0~255</span></span></span><br><span class="line"><span class="comment"><span class="css">            语法：RGB(红色，绿色，蓝色)</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">          RGBA</span></span></span><br><span class="line"><span class="comment"><span class="css">            就是在rgb的基础上增加了一个a表示不透明度</span></span></span><br><span class="line"><span class="comment"><span class="css">            需要四个值，前三个和rgb一样，第四个表示不透明度</span></span></span><br><span class="line"><span class="comment"><span class="css">              1表示完全不透明，0表示完全透明，.5半透明</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">          十六进制的RGB值</span></span></span><br><span class="line"><span class="comment"><span class="css">            语法：#红色绿色蓝色</span></span></span><br><span class="line"><span class="comment"><span class="css">            颜色浓度通过00~ff</span></span></span><br><span class="line"><span class="comment"><span class="css">            如果颜色两位两位重复可以进行简写  #aabbcc  #abc</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">          HSL值 HSLA值</span></span></span><br><span class="line"><span class="comment"><span class="css">            H 色相（0~360）</span></span></span><br><span class="line"><span class="comment"><span class="css">            S 饱和度，颜色的浓度（0-100%）</span></span></span><br><span class="line"><span class="comment"><span class="css">            L 亮度有，颜色的亮度（0-100%）</span></span></span><br><span class="line"><span class="comment"><span class="css">      */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">123</span>, <span class="number">34</span>, <span class="number">145</span>);</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>爬虫下载网易云热歌</title>
    <url>/2022/01/13/Python-%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BD%E7%BD%91%E6%98%93%E4%BA%91%E7%83%AD%E6%AD%8C/</url>
    <content><![CDATA[<blockquote>
<p>声明：本次示例仅作技术交流！！！</p>
<p>time：2022-1-12</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install requests</span></span><br><span class="line"><span class="comment"># 数据请求模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;music\\&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前目录下有这个文件夹，就不创建；否则创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">    os.mkdir(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易云热歌榜url</span></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/discover/toplist?id=3778678&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟浏览器向服务器发送请求，获取资源</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取服务器响应</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则匹配筛选获取到的资源</span></span><br><span class="line">html_data = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;/song\?id=(\d+)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历将每首歌下载</span></span><br><span class="line"><span class="keyword">for</span> num_id, title <span class="keyword">in</span> html_data:</span><br><span class="line">    music_url = <span class="string">f&#x27;http://music.163.com/song/media/outer/url?id=<span class="subst">&#123;num_id&#125;</span>.mp3&#x27;</span></span><br><span class="line">    music_content = requests.get(url=music_url, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename + title + <span class="string">&#x27;.mp3&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(music_content)</span><br><span class="line">    <span class="built_in">print</span>(num_id, title)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>文件传输协议——FTP</title>
    <url>/2022/01/07/Network-010-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E2%80%94%E2%80%94FTP/</url>
    <content><![CDATA[<p>在一个典型的FTP会话中，用户坐在一台主机前面，向一台远程主机传输文件。为使用户能访问它的远程账户，用户必须提供一个用户标识和口令。在提供了这种授权信息后，用户就能从本地文件系统向远程主机文件系统传送文件，反之亦然。</p>
<p>如图所示，用户通过一个FTP用户代理与FTP交互。该用户首先提供远程主机的主机名，使本地主机的FTP客户进程建立一个到远程主机FTP服务器进程的TCP连接。该用户接着提供用户标识和口令，作为FTP命令的一部分在该TCP连接上传送。一旦该服务器向该用户授权，用户可以将存放在本地文件系统中的一个或者多个文件复制到远程文件系统（反之亦然）。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220107170948054.png" alt="image-20220107170948054"></p>
<p>HTTP和FTP都是文件传输协议，并且有很多共同的特点，例如，它们都运行在TCP上。然而，这两个应用层协议也有一些重要的区别。其中最显著的就是FTP使用了两个并行的TCP连接来传输文件，一个是控制连接（control connection），一个是数据连接（data connection）。</p>
<p>控制连接用于在两主机之间传输控制信息，如用户标识、口令、改变远程目录的命令以及“存放（put）”和“获取（get）”文件的命令。数据连接用于实际发送一个文件。因为FTP协议使用了一个独立的控制连接，所以我们也称FTP的控制信息是带外（out-of-band）传送的。而HTTP协议是在传输文件的同一个TCP连接中发送请求和响应首部行的。因此，HTTP也可以说是带内（in-band）发送控制信息的。FTP协议控制连接和数据连接如图所示。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220107170217442.png" alt="image-20220107170217442"></p>
<p>在同一个会话期间，如果用户还需要传输另一个文件，FTP则打开另一个数据连接。因而对FTP传输而言，控制连接贯穿了整个用户会话期间，但是对会话中的每一次文件传输都需要建立一个新的数据连接（即数据连接是非持续的）。</p>
<p>FTP服务器必须在整个会话期间保留用户的状态（state）。特别是，服务器必须把特定的用户账户与控制连接联系起来，随着用户在远程目录树上徘徊，服务器必须追踪用户在远程目录树上的当前位置。对每个进行中的用户会话的状态信息进行追踪，大大限制了FTP同时维持的会话总数。而另一方面，前面讲过FTP是无状态的，即它不必对任何用户状态进行追踪。</p>
<h1 id="FTP命令和回答"><a href="#FTP命令和回答" class="headerlink" title="FTP命令和回答"></a>FTP命令和回答</h1><p>从客户到服务器的命令和从服务器到客户的回答，都是以7比特ASCII格式在控制连接上传送的。因此，与HTTP协议的命令类似，FTP协议的命令也是人可读的。为了区分连续的命令，每个命令后跟回车换行符。每个命令由4个大写字母ASCII字符组成，有些还具有可选参数。一些较为常见的命令如下：</p>
<ul>
<li>USER username：用户向服务器传送用户标识。</li>
<li>PASS password：用于向服务器发送用户口令。</li>
<li>LIST：用于请求服务器回送当前远程目录中的所有文件列表。该文件列表是通过一个数据连接传送的，而不是在控制TCP连接上传送。</li>
<li>RETR filename：用于从远程主机当前目录检索（即get）文件。该命令引起远程主机发起一个数据连接，并经该数据连接发送所请求的文件。</li>
<li>STOR filename：用于在远程主机的当前目录上存放（即put）文件。</li>
</ul>
<p>贯穿控制连接，在用户发出的命令和FTP发送的命令之间通常有一一对应关系。每个命令都对应这一个从服务器发向客户的回答。回答是一个3位的数字，后跟一个可选信息。这与HTTP响应报文状态行的状态码和状态信息的结构相同。一些典型的回答连同它们可能的报文如下所示：</p>
<ul>
<li>331 Username OK，Password required（用户名OK，需要口令）。</li>
<li>125 Data connection already open；transfer starting（数据连接已经打开，开始传送）。</li>
<li>425 Can’t open data connection（无法打开数据连接）。</li>
<li>452 Error writing file（写文件差错）。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>一探Spring源码——bean的创建</title>
    <url>/2022/01/02/Spring%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91%E2%80%94%E2%80%94bean%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>w我们知道，IOC是一个容器，在这个容器启动的时候会创建所有单实例对象，我们可以直接从容器中获取到这个对象。在这里，我们将解决以下问题：</p>
<ul>
<li>IOC容器的启动过程？启动期间都做了什么（什么时候创建所有单实例bean）？</li>
<li>IOC是如何创建这些单实例bean，并如何管理的？到底保存在了哪里？</li>
</ul>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>新建普通Java工程，引入jar包：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111103132395.png" alt="image-20220111103132395"></p>
<p>创建JavaBean，Person：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/1/3 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml注入bean，application.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atqingke&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atqingke.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atqingke.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atqingke.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试类，SourceTest：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atqingke.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/1/3 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line">        Person person01 = context.getBean(<span class="string">&quot;person01&quot;</span>, Person.class);</span><br><span class="line">        System.out.println(person01);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从最简单的HelloWorld开始，单步调试。</p>
<p>首先我们从第一行代码开始，Step Into进入</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220103221340624.png" alt="image-20220103221340624"></p>
<p>接下来我们来到AbstractApplicationContext：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220103221608551.png" alt="image-20220103221608551"></p>
<p>这里的注释告诉我们：如果没有提供工厂中ApplicationEventMulticaster的bean的名称，则使用默认的名称，也就是这个“applicationEventMulticaster”。这里不是我们关注的重点，我们Step Over跳过这里！发现它又回到了我们的main方法，这时候我们再Step Over的话，可以看到，我们在配置文件中注入的bean对象，就已经创建好了。所以我们当我们回到main方法的时候，需要再次Step Into进入new ClassPathXmlApplicationContext。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220103222233024.png" alt="image-20220103222233024"></p>
<p>可以发现，这次我们来到的是ClassPathXmlApplicationContext。也就是说，程序从开始运行到现在，有两次进入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第一次是进入ApplicationContext，第二次进入ClassPathXmlApplicationContext。而目的也很显然，就是创建一个ClassPathXmlApplicationContext对象，加载我们给定的XML配置文件。</p>
<p>这时候如果我们Step Over跳过这个构造器方法的话，肯定又是回到了main函数，然后结束bean的创建。因此我们继续Step Into查看它是如何创建bean的(也可以在refresh方法上打上断点，再F9 Resume Program，使程序运行到这个断点)。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220103223116959.png" alt="image-20220103223116959"></p>
<p>我们可以看到，构造器的注释中告诉我们refresh就是“<strong>loading all bean definitions and creating all singletons</strong>”。因此我们进入一路Step Over来到refresh并Step Into进入里面。我们来详细看一下refresh方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        StartupStep contextRefresh = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.refresh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是Spring解析xml配置文件，将要创建的所有bean的配置信息保存起来，所以想要看Spring对xml的解析可以Step Into里面</span></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            StartupStep beanPostProcess = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            beanPostProcess.end();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 支持国际化功能的</span></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 空方法，留给子类使用的</span></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 从名字就可以知道，这里是初始化所有单实例bean的地方</span></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁已经创建的单例bean</span></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">            contextRefresh.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行到finishBeanFactoryInitialization方法的时候，就结束了bean的初始化。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111103916936.png" alt="image-20220111103916936"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Finish the initialization of this context&#x27;s bean factory,</span></span><br><span class="line"><span class="comment">	 * initializing all remaining singleton beans.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动类型转换，不用管</span></span><br><span class="line">    <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理前置处理器</span></span><br><span class="line">    <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">    <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">    <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Autowired相关</span></span><br><span class="line">    <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean初始化</span></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Step Into进入preInstantiateSingletons方法：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111105120658.png" alt="image-20220111105120658"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">    <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean实例真正初始化的地方</span></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 根据bean的id获取到bean的定义信息</span></span><br><span class="line">        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 如果这个bean不是抽象并且是单例的，也不是懒加载的，我们就在容器中注册这个bean</span></span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 是否是一个实现了FactoryBean接口的bean</span></span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">                    <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">                    <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">                    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                        isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">                                                                    ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">                                                                    getAccessControlContext());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                                       ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                        getBean(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 否则，根据beanName直接获取</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bean初始化之后的回调函数</span></span><br><span class="line">    <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        Object singletonInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">            <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">                    smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Step Into进入getBean方法：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111105740064.png" alt="image-20220111105740064"></p>
<p>再Step Into进入doGetBean方法：通过方法上的注释可以知道，这个方法会返回一个bean实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requiredType the required type of the bean to retrieve</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment">	 * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> typeCheckOnly whether the instance is obtained for a type check,</span></span><br><span class="line"><span class="comment">	 * not for actual use</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="meta">@Nullable</span> <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@Nullable</span> <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// context.getBean(&quot;person01&quot;, Person.class)的执行流程</span></span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class="line">        <span class="comment">// We&#x27;re assumably within a circular reference.</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先检查bean准备初始化的bean实例是否已经存在了</span></span><br><span class="line">        <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要初始化的bean实例没有父类bean并且不在已经初始化的bean队列中</span></span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                    nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记这个bean已经被创建了，用于多线程使用</span></span><br><span class="line">        <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到创建当前bean需要提前创建的bean，dependsOn属性：如果有，就循环创建</span></span><br><span class="line">            <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单实例bean真正初始化的地方</span></span><br><span class="line">            <span class="comment">// Create bean instance.</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                        <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                        <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                        <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">                Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                                    <span class="string">&quot;Scope &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class="line">                                                    <span class="string">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class="line">                                                    ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> convertedBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class="line">                             ClassUtils.getQualifiedName(requiredType) + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 返回已经初始化好的单实例bean</span></span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111110623595.png" alt="image-20220111110623595"></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111110701303.png" alt="image-20220111110701303"></p>
<p>如此，循环执行doGetBean方法将所有的bean进行初始化</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111110804538.png" alt="image-20220111110804538"></p>
<hr>
<p>下面来看创建好的bean实例保存在哪里？？？</p>
<p>在preInstantiateSingletons里面有一个回调函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    Object singletonInstance = getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">        <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">                smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们进入getSingleton方法，它是获取bean实例的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return the (raw) singleton object registered under the given name.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span><br><span class="line"><span class="comment">	 * reference to a currently created singleton (resolving a circular reference).</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanName the name of the bean to look for</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> allowEarlyReference whether early references should be created or not</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the registered singleton object, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    </span><br><span class="line"><span class="comment">// 创建bean</span></span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在getSingleton方法里面，可以看到，先从一个地方获取到bean。我们按住Ctrl再鼠标左键点击11行的singletonObjects跳转到它的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到这是一个Map集合，集合的Map就是bean实例的id，value就是bean实例的属性值。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20220111114114235.png" alt="image-20220111114114235"></p>
<p>因此，通过这里，我们可以知道：创建好的bean实例就保存在这个map集合当中（DefaultSingletonBeanRegistry—-&gt;singletonObjects）！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>打断点的几处地方：</strong></p>
<blockquote>
<ul>
<li><p>```java<br>ApplicationContext context = new ClassPathXmlApplicationContext(“application.xml”);    // SourTest.java    14行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  refresh();		// ClassPathXmlApplicationContext	144行</span><br></pre></td></tr></table></figure></li>
<li><p>```java<br>finishBeanFactoryInitialization(beanFactory);    // AbstractApplicationContext    550行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  beanFactory.preInstantiateSingletons();		// AbstractApplicationContext	878行</span><br></pre></td></tr></table></figure></li>
<li><p>```java<br>getBean(beanName);    // DefaultListableBeanFactory    895行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  final String beanName = transformedBeanName(name);	// AbstractBeanFactory	245行</span><br></pre></td></tr></table></figure></li>
<li><pre><code class="java">Object singletonInstance = getSingleton(beanName);    // DefaultListableBeanFactory    902行
</code></pre>
</li>
</ul>
</blockquote>
<p><strong>关于BeanFactory和ApplicationContext的区别：</strong></p>
<blockquote>
<ul>
<li><p>ApplicationContext是BeanFactory的子接口</p>
<ul>
<li><p>BeanFactory：bean工厂接口，负责创建bean实例；容器里面保存的所有单例bean其实是一个map；也是Spring最底层的接口。</p>
</li>
<li><p>ApplicationContext：是容器接口，更多的是负责容器功能的实现（可以基于BeanFactory创建好的对象之上完成强大的容器）。</p>
<p>容器可以从map获取这个bean，并且AOP、DI在ApplicationContext接口下的这些类里面。</p>
<p>ApplicationContext是留给程序员使用的IOC容器接口。</p>
</li>
</ul>
</li>
<li><p>Spring里面最大的模式就是工厂模式。</p>
</li>
</ul>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>URI &amp; URL &amp; URN</title>
    <url>/2021/12/22/Network-URI-URL-URN/</url>
    <content><![CDATA[<p>与URI相比，我们更熟悉URL。URL正是使用Web浏览器等访问Web页面时需要输入的网页地址。比如，下图的<a href="https://atqingke.com就是一个url./">https://atqingke.com就是一个URL。</a></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211222095055654.png" alt="image-20211222095055654"></p>
<h1 id="统一资源标识符"><a href="#统一资源标识符" class="headerlink" title="统一资源标识符"></a>统一资源标识符</h1><p>每个Web服务器资源都有一个名字，这样客户端就可以说明它们感兴趣的资源是什么了。服务器资源名被称为<strong>统一资源标识符</strong>（Uniform Resource Identifier，URI）。URI就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。</p>
<p>这是在我的博客的Web服务器上的一个图片资源的URI：</p>
<p><a href="https://atqingke.com/usr/uploads/2021/12/4247011469.png">https://atqingke.com/usr/uploads/2021/12/4247011469.png</a></p>
<p>在RFC2396分别对URI的三个单词进行了如下定义：</p>
<ul>
<li><p>Uniform</p>
<p>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案也更容易。</p>
</li>
<li><p>Resource</p>
<p>资源的定义是”可标识的任何东西“。不仅是文档文件，图像或服务等能够区别于其它类型的，全都可作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。</p>
</li>
<li><p>Identifier</p>
<p>表示可标识的对象。也称为标识符。</p>
</li>
</ul>
<p>综上所述，URI就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。</p>
<p>采用HTTP协议时，协议方案就是http。除此之外，还有ftp、mailto、telnet、file等。标准的URI协议方案有30种左右，由隶属于国际互联网资源管理的非营利社团ICANN的IANA管理颁布。</p>
<p>URI用字符串标识某一互联网资源，而URL表示资源的地点。可见URL是URI的子集。</p>
<h1 id="URI格式"><a href="#URI格式" class="headerlink" title="URI格式"></a>URI格式</h1><p>表示指定的URI，要使用涵盖全部必要信息的绝对URI、绝对URL以及相对URL。相对URL，是指从浏览器种基本URI处指定的URL，形如/image/logo.gif。</p>
<p>现在我们来看一下绝对URI的格式：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211222101211563.png" alt="image-20211222101211563"></p>
<p>使用http:或https:等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号。也可以使用data:或javascript:这类指定数据或脚本程序的方案名。</p>
<ul>
<li><p>登录信息（认证）</p>
<p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。</p>
</li>
<li><p>服务器地址</p>
<p>使用绝对URI必须指定待访问的服务器地址。地址可以是类似atqingke.com这种DNS可解析的名称，或是192.168.1.1这类IPv4地址名，还可以是[0:0:0:0:0:0:0:1]这样用方括号括起来的IPv6地址名。</p>
</li>
<li><p>服务器端口号</p>
<p>指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。</p>
</li>
<li><p>带层次的文件路径</p>
<p>指定服务器上的文件路径来定位特指的资源。这与UNIX系统的文件目录结构类似。</p>
</li>
<li><p>查询字符串</p>
<p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。</p>
</li>
<li><p>片段标识符</p>
<p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在RFC中并没有明确规定其使用方法。该项也是可选项。</p>
</li>
</ul>
<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>统一资源定位符（URL）是资源标识符最常见的形式。URL描述了一台特定服务器上某资源的特定位置。它们可以明确说明如何从一个精确、固定的位置获取资源。</p>
<p>大部分URL都遵循一种标准格式，这种格式包含三个部分。</p>
<ul>
<li>第一部分称为方案，说明了访问资源所使用的协议类型。</li>
<li>第二部分给出了服务器的因特网地址。</li>
<li>其余部分指定了Web服务器上的某个资源。</li>
</ul>
<p>现在，几乎所有的URI都是URL。</p>
<h1 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h1><p>URI的第二种形式就是统一资源名（URN）。URN是作为特定内容的唯一名称使用的，与目前的资源所在地无关。使用这些与位置无关的URN，就可以将资源四处搬移。通过URN，还可以使用同一个名字通过多种网络访问协议来访问资源。</p>
<p>比如，不论因特网标准文档RFC 2141位于何处（甚至可以将其复制到多个地方），都可以用下列URN来命名它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urn:ietf:rfc:2141</span><br></pre></td></tr></table></figure>

<p>URN仍然处于试验阶段，还未大范围使用，为了更有效工作，URN需要一个支撑架构来解析资源的位置。而此类结构的缺乏也延缓了其被采用的进度。</p>
]]></content>
  </entry>
  <entry>
    <title>meta标签</title>
    <url>/2021/12/20/HTML-meta%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p>我们只需要在我们的<a href="https://atqingke.com/index.php/archives/122/">第一个网页</a>的基础上加一点东西，它就变成了我们的标准的HTML5网页：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档声明，声明当前网页的版本 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html的根标签（元素），网页中的所有内容都要写在根元素里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta标签用来设置网页的元数据，这里meta用来设置网页的字符集，避免乱码问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页的主要内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- body是html的子元素，表示网页的主题，网页中所有的课件内容都应该写在body里面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网页的一级标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页的大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里，我们详细解释一下这个meta标签。从它的文档解释中我们可以看到：这是一个用来表示元数据的标签。</p>
<p><img src="C:/Users/pengbin007/AppData/Roaming/Typora/typora-user-images/image-20211220144716530.png" alt="image-20211220144716530"></p>
<p>那么，什么是元数据呢？在<a href="https://baike.baidu.com/item/%E5%85%83%E6%95%B0%E6%8D%AE/1946090?fr=aladdin">百度百科</a>上给出的解释是“元数据是关于数据的<a href="https://baike.baidu.com/item/%E7%BB%84%E7%BB%87/10200">组织</a>、数据域及其关系的<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF/111163">信息</a>，简言之，元数据就是关于数据的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE">数据</a>”。这样说，可能不太好理解，举个栗子：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211220145548852.png" alt="image-20211220145548852"></p>
<p>这是电脑上一个很普通的txt文件，我们可以看到这里有banner.txt的文件类型、打开方式、位置、大小…等等信息。而元数据指的就是方框中所圈出来的数据，因为它们是用来描述具体数据的。类似的，还有我们在淘宝上购买电脑的时候，可以查看它的内存大小、显存、硬盘等等，而这些就是元数据，用来描述电脑具体信息的数据。</p>
<p>回到我们的meta标签，它主要用于设置网页中的一些元数据，而这些元数据并不是给用户看的。在上面的标准网页中，我们看到有“&lt;meta charset=”utf-8”&gt;”，我们用charset来指定网页的字符集为utf-8。</p>
<p>我们还可以在meta标签里面用name指定数据的名称，用content指定数据的内容。</p>
<ul>
<li><p>author</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;pengbin&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给出页面作者的姓名。</p>
</li>
<li><p>keywords</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5,前端,CSS3&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表示网站的关键字，可以同时指定多个关键字，关键字之间用 , 隔开。</p>
</li>
<li><p>description</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;pengbin的网站&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>description用于指定网站的描述，网站的描述会显示在搜索引擎的搜索结果中。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Web和HTTP</title>
    <url>/2021/12/19/Network-009-Web%E5%92%8CHTTP/</url>
    <content><![CDATA[<p>Web是一个引起公众注意的因特网应用，它极大地改变了人们与工作环境内外交流的方式。它将因特网从只是很多数据网之一的地位提升为仅有的一个数据网。也许对大多数用户来说，最具吸引力的就是Web的<strong>按需</strong>操作。</p>
<h1 id="1-HTTP概况"><a href="#1-HTTP概况" class="headerlink" title="1. HTTP概况"></a>1. HTTP概况</h1><p>Web的应用层协议是<strong>超文本传输协议</strong>（HyperText Transfer Protocol，HTTP），它是Web的核心，在[RFC 1945]和[RFC 2616]中进行了定义。HTTP由两个程序实现：一个客户程序和一个服务器程序。客户程序和服务器程序运行在不同的端系统中，通过交换HTTP报文进行会话。HTTP定义了这些报文的结构以及客户和服务器进行报文交换的方式。</p>
<p><strong>Web页面</strong>（也叫文档）是由对象组成的。一个<strong>对象</strong>只是一个文件，且它们可通过一个<strong>URL地址寻址</strong>。多数Web页面含有一个<strong>HTML基本组件</strong>以及几个引用对象。例如，如果一个Web页面包含HTML文本和5个JPEG图形，那么这个Web页面有6个对象。HTML基本文件通过对象的URL地址引用页面中的其它对象。<strong>每个URL地址由两部分组成：存放对象的服务器主机名和对象的路径名</strong>。因为Web浏览器实现了HTTP的客户端，所以在Web环境中我们经常交替使用“浏览器”和“客户”这两个术语。Web服务器实现了HTTP的服务器端，它用于存储Web对象，每个对象由URL寻址。</p>
<p>HTTP定义了<strong>Web客户向Web服务器请求Web页面的方式，以及服务器向客户传送Web页面的方式</strong>。它使用<strong>TCP作为它的支撑运输协议</strong>。HTTP客户首先发起一个与服务器的TCP连接。一旦连接建立，该浏览器和服务器进程就可以通过套接字接口访问TCP。在这个过程中，TCP为HTTP提供可靠数据传输服务。这意味着，一个客户进程发出的每个HTTP请求报文最终能完整地到达服务器；类似地，服务器进程发出的每一个HTTP响应报文最终能完整地到达客户。在这里，我们看到了分层体系结构最大的优点，即HTTP协议不用担心数据丢失，也不关注TCP从网络的数据丢失和乱序故障中恢复的细节。而这是TCP以及协议栈较低层协议的工作。</p>
<p>现在我们考虑一个现象：服务器向客户发送被请求的文件，而不存储任何关于该客户的状态信息。假如某个特定的客户在短短的几秒钟内两次请求同一个对象，服务器并不会因为刚刚为该客户提供了该对象就不再做反应，而是重新发送该对象，就像服务器已经完全忘记不久之前所做过的事一样。因为HTTP服务器并不保存关于客户的任何信息，所以我们说HTTP是一个<strong>无状态协议</strong>。</p>
<h1 id="2-非持续连接和持续连接"><a href="#2-非持续连接和持续连接" class="headerlink" title="2. 非持续连接和持续连接"></a>2. 非持续连接和持续连接</h1><p>所谓非持续连接和持续连接就是指每个请求/响应对在一个长时间内通信时，是经过一个单独的TCP连接发送，还是所有请求及其响应经相同的TCP连接发送。HTTP既能够使用非持续连接，也能够使用持续连接，默认使用持续连接。（对应的在下面对请求报文中的介绍有一个Connection：keep-alive首部行）</p>
<h2 id="2-1-采用非持续连接的HTTP"><a href="#2-1-采用非持续连接的HTTP" class="headerlink" title="2.1 采用非持续连接的HTTP"></a>2.1 采用非持续连接的HTTP</h2><p>假设页面含有一个HTML基本文件和10个JPEG图形，并且这11个对象位于同一台服务器上。该HTML文件的URL为：<a href="http://www.atqingke.com/someDepartment/home.index%E3%80%82">http://www.atqingke.com/someDepartment/home.index。</a></p>
<p>我们看看发生了什么情况：</p>
<ul>
<li>HTTP客户进程在端口号80发起一个到服务器<a href="http://www.atqingke.com的tcp连接,该端口号是http的默认端口.在客户和服务器上分别有一个套接字与该连接相关联./">www.atqingke.com的TCP连接，该端口号是HTTP的默认端口。在客户和服务器上分别有一个套接字与该连接相关联。</a></li>
<li>HTTP客户经它的套接字向该服务器发送一个HTTP请求报文。请求报文中包含了路径名/someDepartment/home.index。</li>
<li>HTTP服务器进程经它的套接字接收该请求报文，从其存储器中检索出对象<a href="http://www.atqingke.com/someDepartment/home.index%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%B8%AAHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B8%AD%E5%B0%81%E8%A3%85%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E5%85%B6%E5%A5%97%E6%8E%A5%E5%AD%97%E5%90%91%E5%AE%A2%E6%88%B7%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E3%80%82">www.atqingke.com/someDepartment/home.index，在一个HTTP响应报文中封装对象，并通过其套接字向客户发送响应报文。</a></li>
<li>HTTP服务器进程通知TCP断开该TCP连接。</li>
<li>HTTP客户接收响应报文，TCP连接关闭。该报文指出封装的对象是一个HTML文件，客户从响应报文中提取出该文件并检查，得到对10个JPEG图形的引用。</li>
<li>对每个引用的JPEG图形对象重复前4个步骤。</li>
</ul>
<p>在上面的步骤中，每个TCP连接只传输一个请求报文和响应报文。因此，当用户请求该Web页面时，要产生11个TCP连接。</p>
<p>在上面的步骤中，并没有明确给出获得这10个JPEG图形对象是串行还是并行。事实上，用户能够配置现代浏览器以控制并行度。默认方式下大部分浏览器打开5~10个并行的TCP连接，而每条连接处理一个请求响应事务。</p>
<p>我们来简单估算一下从客户请求HTML基本文件起到客户收到整个文件所花费的时间。为此，我们给出<strong>往返时间（Round-Trip Time，RTT）</strong>的定义，该时间是指<strong>一个短分组从客户到服务器然后再返回客户所花费的时间</strong>。RTT包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理时延。现在考虑用户点击超链接会发生什么现象。如图所示，这引起浏览器在它和Web服务器之间发起一个TCP连接；这涉及一次”三次握手“过程，即客户向服务器发送一个小TCP报文段，服务器用一个小TCP报文段做出确认和响应，最后，客户向服务器返回确认。三次握手中前两个部分所耗费的时间占用了一个RTT。完成前两个部分后，客户结合三次握手的第三部分向该TCP连接发送一个HTTP请求报文。一旦该请求报文到达服务器，服务器就在该TCP连接上发送HTML文件。该HTTP请求/响应用用去了另一个RTT。因此，粗略地讲，总的响应时间就是两个RTT加上服务器传输HTML文件的时间。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211222005616390.png" alt="image-20211222005616390"></p>
<h2 id="2-2-采用持续连接的HTTP"><a href="#2-2-采用持续连接的HTTP" class="headerlink" title="2.2 采用持续连接的HTTP"></a>2.2 采用持续连接的HTTP</h2><p>非持续连接有一些缺点：</p>
<ul>
<li>必须为每一个请求的对象建立和维护一个全新的连接。对于每个这样的连接，在客户和服务器中都要分配TCP的缓冲区和保持TCP变量，这个Web服务器带来了严重的负担。</li>
<li>每个对象经受两倍RTT的交付时延，即一个RTT用于创建TCP，另一个RTT用于请求和接收一个对象。</li>
</ul>
<p>在采用持续连接的情况下，服务器在发送响应后保持该TCP连接打开。在相同的客户与服务器之间的后续请求和响应报文能够通过相同的连接进行传送。特别是，一个完整的Web页面可以用单个持续TCP连接进行传送，更有甚者，位于同一台服务器的多个Web页面在从该服务器发送给同一个客户时，可以在单个持续TCP连接上进行。可以一个接一个的发出对对象的这些请求，而不必等待对未决请求（流水线）的回答。一般来说，如果一条连接经过一定时间间隔仍未被使用，HTTP服务器就关闭该连接。</p>
<h1 id="3-HTTP报文格式"><a href="#3-HTTP报文格式" class="headerlink" title="3. HTTP报文格式"></a>3. HTTP报文格式</h1><p>HTTP规范【RFC 1945；RFC 2616】包含了对HTTP报文格式的定义。HTTP报文请求有两种：请求报文和响应报文。</p>
<h2 id="3-1-HTTP请求报文"><a href="#3-1-HTTP请求报文" class="headerlink" title="3.1 HTTP请求报文"></a>3.1 HTTP请求报文</h2><p>我们通过wireshark进行抓包得到一个HTTP的请求报文如下所示：（每行都有一个\r\n结束）</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221221924118.png" alt="image-20211221221924118"></p>
<p>其中，请求行的方法字段可以取的值包括GET、POST、HEAD、PUT和DELETE。绝大部分的HTTP请求报文使用GET方法。</p>
<p>在首部行Host中，我们也许认为该首部行是不必要的，因为在该主机中已经有一条TCP连接存在了。但是，在后面的Web缓存的介绍中我们可以知道，该首部行提供的信息是Web代理高速缓存所要求的。Accept-language：首部行是HTTP中可用的众多内容协商首部之一。</p>
<p>我们再来看一个请求报文的通用格式：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221223651918.png" alt="image-20211221223651918"></p>
<p>在这张图里我们可以看到，在首部行后面还有一个“实体体”（entity body）。使用GET方法时实体体为空，而使用POST方法时才使用该实体体。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221224126555.png" alt="image-20211221224126555"></p>
<p>通过wireshark抓包可以看到，上图中的使用GET方法请求，空行后面没有实体体。而下图中的POST方法请求时，空行后面就是实体体。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221224421953.png" alt="image-20211221224421953"></p>
<p>当用户提交表单时，HTTP客户常常使用POST方法，例如当用户向搜索引擎提供搜索关键词时。使用POST报文时，用户仍可以向服务器请求一个Web页面，但Web页面的特定内容依赖于用户在表单字段中输入的内容。如果方法字段的值为POST时，则实体体中包含的就是用户在表单字段中的输入值。</p>
<p>当然，HTML表单也经常使用GET方法，并在所请求的URL中包括输入的数据，如图：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221224933910.png" alt="image-20211221224933910"></p>
<p>HEAD方法类似于GET方法。当服务器收到使用HEAD方法的请求时，将会用一个HTTP报文进行响应，但是并不返回请求对象。应用程序开发者常用HEAD方法进行调试跟踪。PUT方法常与Web发行工具联合使用，它允许用户上传对象到指定的Web服务器上指定的路径。PUT方法也被那些需要向Web服务器上传对象的应用程序使用。DELETE方法允许用户或者应用程序删除Web服务器上的对象。</p>
<h2 id="3-2-HTTP响应报文"><a href="#3-2-HTTP响应报文" class="headerlink" title="3.2 HTTP响应报文"></a>3.2 HTTP响应报文</h2><p>使用wireshark抓取的一条HTTP响应报文：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221230250851.png" alt="image-20211221230250851"></p>
<p>再看一下响应报文的通用格式：</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211221230632598.png" alt="image-20211221230632598"></p>
<p>在这里，我们补充说明一下状态码和它们对应的短语。状态码及其相应的短语指示了请求的结果。一些常见的状态码和相关的短语包括：</p>
<ul>
<li>200    OK：请求成功，信息在返回的响应报文中。</li>
<li>301    Moved Permanently：请求的对象已经被永久转移了，新的URL定义在响应报文的Location：首部行中。客户软件将自动获取新的URL。</li>
<li>400    Bad Request：一个通用差错代码，指示该请求不能被服务器理解。</li>
<li>404    Not Found：被请求的文档不在服务器上。</li>
<li>505    HTTP Version Not Supported：服务器不支持请求报文使用的HTTP协议版本。</li>
</ul>
<h1 id="4-用户与服务器的交互：cookie"><a href="#4-用户与服务器的交互：cookie" class="headerlink" title="4. 用户与服务器的交互：cookie"></a>4. 用户与服务器的交互：cookie</h1><p>前面提到了HTTP服务器是无状态的。而一个Web站点通常希望能够识别用户，可能是因为它希望把内容与用户身份联系起来。为此，HTTP使用了cookie。cookie在【RFC 6265】中定义，它允许站点对用户进行跟踪。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211223152406114.png" alt="image-20211223152406114"></p>
<p>如图，cookie技术有4个组件：</p>
<ol>
<li>在HTTP响应报文中的一个cookie首部行；</li>
<li>在HTTP请求报文中的一个cookie首部行；</li>
<li>在用户端系统中保留有一个cookie文件，并由用户的浏览器进行管理；</li>
<li>位于Web站点的一个后端数据库。</li>
</ol>
<p>我们通过这个图来看看cookie的工作过程。假设Lucy总是从家中PC使用Internet Explorer上网，她首次与taobao.com联系。我们假定过去她已经访问过bay站点。当请求报文到达该taobao Web服务器时，该Web站点将产生一个唯一识别码，并以此作为索引在它的后端数据库中产生一个表项。接下来taobao Web服务器用一个包含Set-cookie: 首部的HTTP响应报文对Lucy的浏览器进行响应，其中Set-cookie：首部含有该识别码。例如，该首部行可能是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Set-cookie: 1633</span><br></pre></td></tr></table></figure>

<p>当Lucy的浏览器收到了该HTTP响应报文时，它会看到Set-cookie：首部。该浏览器在它管理的规定cookie文件中添加一行，该行包含服务器的主机名和在Set-cookie：首部中的识别码。值得注意的是该cookie文件已经有了用于bay的表项，因为Lucy过去访问过该站点。当Lucy继续浏览taobao网站时，每请求一个Web页面，其浏览器会从该cookie文件中获取她对这个网站的识别码，并放到HTTP请求报文中包括识别码的cookie首部行中。</p>
<h1 id="5-Web缓存"><a href="#5-Web缓存" class="headerlink" title="5. Web缓存"></a>5. Web缓存</h1><p>Web缓存器（Web cache）也叫代理服务器（proxy server），它是能够代表初始Web服务器来满足HTTP请求的网络实体。Web缓存器有自己的磁盘存储空间，并在存储空间中保存最近请求过的对象的副本。如图，可以配置用户的浏览器，使得用户的所有HTTP请求首先指向Web缓存器。一旦某浏览器被配置，每个对某对象的浏览器请求首先被定向到该Web缓存器。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211223150002667.png" alt="image-20211223150002667"></p>
<p>值得注意的是Web缓存器是服务器同时又是客户。当它接收浏览器的请求并发回响应时，它是一个服务器。当它项初始服务器发出请求并接收响应时，它是一个客户。</p>
<p>在因特网上部署Web缓存器有两个原因。首先，Web缓存器可以大大减少对客户请求的响应时间，特别是当客户与初始服务器之间的瓶颈带宽远低于客户与Web缓存器之间的瓶颈带宽时更是如此。其次，Web缓存器能够大大减少一个机构的接入链路到因特网的通信量。通过减少通信量，该机构就不必急于增加带宽，因此降低了费用。此外，Web缓存器能从整体上大大减低因特网上的Web流量，从而改善了所有应用的性能。</p>
<h1 id="6-条件GET方法"><a href="#6-条件GET方法" class="headerlink" title="6. 条件GET方法"></a>6. 条件GET方法</h1><p>尽管高速缓存能减少用户感受到的响应时间，但也引入了一个新的问题，即存放在缓存器中的对象副本可能并不是最新的。为此，HTTP协议有一种机制，允许缓存器证实它的对象是最新的。这种机制就是<strong>条件GET方法</strong>。如果：①请求报文使用GET方法；并且②请求报文中包含一个”If-Modified-Since:“首部行。那么，这个HTTP请求报文就是一个条件GET请求报文。</p>
<p>我们看一个例子。首先，一个proxy cache代表一个请求浏览器，向某Web服务器发送一个请求报文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /fruit/kiwi.git HTTP/1.1</span><br><span class="line">Host: www.exotiquecuisine.com</span><br></pre></td></tr></table></figure>

<p>其次，该Web服务器向缓存器发送具有被请求的对象的响应报文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 8 Oct 2021 15:39:29</span><br><span class="line">Server: nginx</span><br><span class="line">Last-Modified: Wed, 7 Sep 2021 09:23:24</span><br><span class="line">Content-Type: image/gif</span><br><span class="line"></span><br><span class="line">(data data data data data data ......)</span><br></pre></td></tr></table></figure>

<p>该缓存器在将对象转发到请求的浏览器的同时，也在本地缓存了该对象。重要的是，缓存器在存储该对象时也存储了最后修改日期。一个星期后，另一个哟用户经过该缓存器请求同一个对象，该对象仍在这个缓存器中。由于在过去的一个星期中位于Web服务器上的该对象可能已经被修改了，该缓存器通过发送一个条件GET执行最新检查：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line">GET /fruit/kiwi.git HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.exotiquecuisine.com</span><br><span class="line">If-Modified-Since: Wed, <span class="number">7</span> Sep <span class="number">2021</span> <span class="number">0</span>9:<span class="number">23</span>:<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到：If-Modified-Since: 首部行的值正好等于一星期前服务器发送的响应报文中的Last-Modified: 首部行的值。该条件GET报文告诉服务器，仅当自指定日期之后该对象被修改过，才发送该对象。而如果没有被修改，Web服务器向该缓存器发送一个响应报文：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">304</span> Not Modified</span><br><span class="line">Date: Sat, <span class="number">15</span> Oct <span class="number">2021</span> <span class="number">15</span>:<span class="number">39</span>:<span class="number">29</span></span><br><span class="line">Server: nginx</span><br><span class="line"></span><br><span class="line">(empty entity body)</span><br></pre></td></tr></table></figure>

<p>我们看到，作为对该条件GET方法的响应，该Web服务器仍发送一个响应报文，但并没有在该响应报文中包含所请求的对象。包含该对象只会浪费带宽，并增加用户感受到的响应时间，特别是如果对象很大。最后的状态行中的304 Not Modified就告诉缓存器可以使用该对象，能向请求的浏览器转发proxy cache缓存的该对象副本。</p>
]]></content>
  </entry>
  <entry>
    <title>分组交换网中的时延、丢包和吞吐量</title>
    <url>/2021/12/19/Network-004-%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2%E7%BD%91%E4%B8%AD%E7%9A%84%E6%97%B6%E5%BB%B6%E3%80%81%E4%B8%A2%E5%8C%85%E5%92%8C%E5%90%9E%E5%90%90%E9%87%8F/</url>
    <content><![CDATA[<p>在理想情况下，我们希望因特网服务能够在任意两个端系统之间瞬间移动我们想要的大量数据而没有任何数据丢失。然而，这是一个极高的目标，实践中难以达到。与之相反，计算机网络必定要限制在端系统之间的吞吐量，在端系统之间引入时延，而且实际上能够丢失分组。</p>
<h2 id="1、-分组交换网中的时延概述"><a href="#1、-分组交换网中的时延概述" class="headerlink" title="1、 分组交换网中的时延概述"></a>1、 分组交换网中的时延概述</h2><p>分组从一台主机出发，通过一系列路由器传输，在另一台主机中结束它的历程。当分组从一个结点沿着这条路径到后继结点，该分组在沿途的每个结点经受了几种不同类型的时延。这些时延最为重要的是<strong>结点处理时延（nodal processing delay）、排队时延（queuing delay）、传输时延（transmission delay）和传播时延（propagation delay）</strong>，这些时延总体累加起来就是<strong>结点总时延（total nodal delay）。</strong></p>
<h3 id="1-1-时延的类型"><a href="#1-1-时延的类型" class="headerlink" title="1.1 时延的类型"></a>1.1 时延的类型</h3><p>如图，作为源和目的地之间的端到端路径的一部分，一个分组从上游结点通过路由器A向路由器B发送。路由器A具有通往路由器B的出链路，该链路前面有一个队列（也称为缓存）。当该分组从上游结点到达路由器A时，路由器A检查该分组的首部以决定该分组的适当出链路，并将该分组导向该链路。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220223090355077.png" alt="image-20220223090355077"></p>
<h4 id="1-处理时延"><a href="#1-处理时延" class="headerlink" title="1. 处理时延"></a>1. 处理时延</h4><p>检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。处理时延也能包括其它因素，如检查比特级别的差错所需要的时间。高速路由器的处理时延通常是微秒或更低的数量级。</p>
<h4 id="2-排队时延"><a href="#2-排队时延" class="headerlink" title="2. 排队时延"></a>2. 排队时延</h4><p>在队列中，当分组在链路上等待传输时，它经受排队时延。一个特定分组的排队时延长度将取决于先期到达的正在排队等待向链路传输的分组数量。实际的排队时延可以是毫秒到微秒量级。</p>
<h4 id="3-传输时延"><a href="#3-传输时延" class="headerlink" title="3.传输时延"></a>3.传输时延</h4><p>将所有分组的比特推向(传输)链路所需要的时间。实际的排队时延可以是毫秒到微秒量级。</p>
<h4 id="4-传播时延"><a href="#4-传播时延" class="headerlink" title="4.传播时延"></a>4.传播时延</h4><p>一旦一个比特被推向链路，该比特需要向路由器B传播。从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播，传播速率取决于该链路的物理媒体。该传播时延等于两台路由器之间的距离除以传播速率。在广域网中，传播时延为毫秒量级。</p>
<h4 id="5-传输时延和传播时延的比较"><a href="#5-传输时延和传播时延的比较" class="headerlink" title="5. 传输时延和传播时延的比较"></a>5. 传输时延和传播时延的比较</h4><p>传输时延是路由器将分组推出所需要的时间，它是分组长度和链路传输速率的函数，而与两台路由器之间的距离无关。另一方面，传播时延是一个比特从一台路由器向另一台路由器传播所需要的时间，它是两台路由器之间距离的函数，而与分组长度或链路传输速率无关。</p>
<p>举个例子，假设在高速上每隔100km有一个收费站。在这里，可以认为收费站间的公路段就是链路，而收费站则是路由器。假设汽车以100km/h的速度行驶(即传播)。假定这是有10辆汽车的车队在行驶，并且这10辆汽车以固定的顺序互相跟随。可以认为每辆汽车是一个比特，该车队是一个分组。同时假定每个收费站以每辆车12s的速度服务(即传输)一辆汽车，由于时间是深夜，因此该车队是公路上唯一一批汽车。最后，假定无论该车队的第一辆汽车何时到达收费站，它在入口处等待，直到其它9辆汽车到达并整队依次前行(因此，整个车队在它能够“转发”之前，必须存储在收费站)。</p>
<p>在这里，收费站将整个车队推向公路所需时间是2min，该事件就类比于一台路由器中的传输时延。而一辆汽车从一个收费站出口行驶到下一个收费站所需时间1h，这个时间类比于传播时延。</p>
<h2 id="2、排队时延和丢包"><a href="#2、排队时延和丢包" class="headerlink" title="2、排队时延和丢包"></a>2、排队时延和丢包</h2><p>结点时延中最为复杂和有趣的成分是排队时延，与其他3项时延不同的是，排队时延对不同的分组可能是不同的(多个分组同时到达队列，先传输的分组排队时延自然就小，后传输的自然就更大)。因此，当表征排队时延时，人们通常使用统计量测度，如平均排队时延、排队时延的方差和排队时延超过某些特定值的频率。</p>
<p>假定所有分组都是由L比特组成的，a表示分组到达队列的平均速率(a的单位是分组/秒，即pkt/s)，R表示传输速率(以bps即b/s为单位)。那么比特到达队列的平均速率就是La bps。最后，假定该队列非常大，因此它基本能容纳无限数量的比特。比率La/R被称为<strong>流量强度</strong>。如果La/R &gt; 1，则比特到达队列的平均速率超过从该队列传输出去的速率。在这种不幸的情况下，该队列趋向于无界增加，并且排队时延将趋向无穷大！因此，流量工程中的一条金科玉律是：<em><strong>设计系统时流量强度不能大于1</strong></em>.</p>
<h3 id="丢包"><a href="#丢包" class="headerlink" title="丢包"></a>丢包</h3><p>在上述讨论中，我们假设队列能够容纳无穷多的分组，在现实中，一条链路前的队列只有有限的容量。而因为该排队容量时有限的，随着流量强度接近1，排队时延并不实际趋向无穷大。相反，到达的分组将发现一个满的队列。由于没有地方存储这个分组，路由器将<strong>丢失</strong>(drop)该分组，即该分组将会<strong>丢失</strong>(lost)。</p>
<p>从端系统的角度看，上述丢包现象看起来是一个分组已经传输到网络核心，但它绝不会从网络发送到目的地。分组丢失的份额随着流量强度的增加而增加。因此，一个结点的性能常常不仅根据时延来衡量，而且根据分组丢失的概率来度量。</p>
<h2 id="3、端到端时延"><a href="#3、端到端时延" class="headerlink" title="3、端到端时延"></a>3、端到端时延</h2><p>前面讨论的是单台路由器上的时延，现在考虑从源到目的地的总时延。假设源主机和目的主机之间有N - 1台路由器，网络无拥塞(因此排队时延微不足道)。此时端到端时延就是：N * (在每台路由器和源主机上的处理时延 + 分组长度 / 每台路由器和源主机的输出速率 + 每条链路的传播时延)。</p>
<h3 id="3-1-Traceroute"><a href="#3-1-Traceroute" class="headerlink" title="3.1 Traceroute"></a>3.1 Traceroute</h3><p><a href="http://www.traceroute.org/">www.traceroute.org</a></p>
<h3 id="3-2-端系统、应用程序和其它时延"><a href="#3-2-端系统、应用程序和其它时延" class="headerlink" title="3.2 端系统、应用程序和其它时延"></a>3.2 端系统、应用程序和其它时延</h3><p>除了处理时延、传输时延和传播时延，端系统还有其它一些重要时延。例如，作为它的协议的一部分，希望向共享媒体传输分组的端系统可以有意地延迟它的传输以与其它端系统共享媒体。另一个重要的时延是媒体分组化时延。</p>
<h2 id="4、计算机网络中的吞吐量"><a href="#4、计算机网络中的吞吐量" class="headerlink" title="4、计算机网络中的吞吐量"></a>4、计算机网络中的吞吐量</h2><p>除了时延和丢包，计算机网络中另一个必不可少的性能测度是端到端吞吐量。我们考虑一个场景，从主机A到主机B跨越计算机网络发送一个大文件。在任何时间瞬间的瞬时吞吐量(instantaneous throughput)是主机B接收到该文件的速率(以bps计)。如果该文件由F比特组件，主机B接收到所有F比特用去T秒，则文件传送的平均吞吐量(average throughput)是F/T bps。</p>
<p>当没有其它干扰流量时，其吞吐量能够近似为沿着源和目的地之间路径的最小传输速率。如果许多其它的数据流通过同一条链路流动，那么即使这是一条高传输速率的链路，仍然可能成为文件传输的瓶颈链路。</p>
]]></content>
  </entry>
  <entry>
    <title>SpringSecurity Web权限方案(上)</title>
    <url>/2021/12/18/SpringSecurity-Web%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88-%E4%B8%8A/</url>
    <content><![CDATA[<p>f</p>
<p>设置登录用户名和密码</p>
<p>方案一：application.properties</p>
<p>方案二：编写配置类</p>
<p>方案三：自定义编写实现类</p>
<p>基于角色或权限进行访问控制</p>
<p>hasAuthority方法</p>
<p>hasAnyAuthority方法</p>
<p>hasRole</p>
<p>hasAnyRole</p>
<p>注解使用</p>
]]></content>
  </entry>
  <entry>
    <title>SpringSecurity入门案例&amp;基本原理</title>
    <url>/2021/12/18/SpringSecurity%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>Spring Security is a framework that provides <a href="https://docs.spring.io/spring-security/reference/features/authentication/index.html">authentication</a>, <a href="https://docs.spring.io/spring-security/reference/features/authorization/index.html">authorization</a>, and <a href="https://docs.spring.io/spring-security/reference/features/exploits/index.html">protection against common attacks</a>. With first class support for securing both <a href="https://docs.spring.io/spring-security/reference/servlet/index.html">imperative</a> and <a href="https://docs.spring.io/spring-security/reference/reactive/index.html">reactive</a> applications, it is the de-facto standard for securing Spring-based applications.</p>
</blockquote>
<p>Spring是非常流行和成功的Java应用开发框架，Spring Security正是Spring家族的成员。Spring Security基于Spring框架，提供了一套Web应用安全性的完整解决方案。</p>
<p>一般来说，Web应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分，这两点也是Spring Security的重要核心功能。</p>
<blockquote>
<ol>
<li>用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。通俗点说就是<strong>系统认为用户是否能登录。</strong></li>
<li>用户授权指的是：验证某个用户是否具有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。通俗点讲就是<strong>系统判断用户是否有权限去做某些事情。</strong></li>
</ol>
</blockquote>
<p>Spring Security特点：</p>
<ul>
<li>和Spring无缝整合。</li>
<li>全面的权限控制。</li>
<li>专门为Web开发而设计。<ul>
<li>旧版本不能脱离Web环境使用。</li>
<li>新版本对整个框架进行了分层抽取，分成了核心模块和Web模块。单独引入核心模块就可以脱离Web环境。</li>
</ul>
</li>
<li>重量级。</li>
</ul>
<h1 id="1-Spring-Security入门案例"><a href="#1-Spring-Security入门案例" class="headerlink" title="1. Spring Security入门案例"></a>1. Spring Security入门案例</h1><h2 id="1-1-创建Spring-Boot项目"><a href="#1-1-创建Spring-Boot项目" class="headerlink" title="1.1  创建Spring Boot项目"></a>1.1  创建Spring Boot项目</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atqingke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>securitydemo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>securitydemo1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-修改启动端口号"><a href="#1-2-修改启动端口号" class="headerlink" title="1.2 修改启动端口号"></a>1.2 修改启动端口号</h2><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8111</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-新建Controller"><a href="#1-3-新建Controller" class="headerlink" title="1.3 新建Controller"></a>1.3 新建Controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atqingke.securitydemo1.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> pengbin007</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/18 15:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-启动项目"><a href="#1-4-启动项目" class="headerlink" title="1.4 启动项目"></a>1.4 启动项目</h2><p>访问<a href="http://localhost:8111/test/hello%EF%BC%8C%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E9%A1%B5%E9%9D%A2%EF%BC%9A">http://localhost:8111/test/hello，出现下图所示页面：</a></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211218164137833.png" alt="image-20211218164137833"></p>
<p>现在我们只能使用它提供的默认用户名user登录，密码在项目启动的时候在控制台有打印，注意每次启动的时候密码都会发生变化！</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211218164333749.png" alt="image-20211218164333749"></p>
<p>登录成功！</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211218164439841.png" alt="image-20211218164439841"></p>
<h1 id="2-Spring-Security基本原理"><a href="#2-Spring-Security基本原理" class="headerlink" title="2. Spring Security基本原理"></a>2. Spring Security基本原理</h1><p>Spring Security本质上就是一个过滤器链：</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL的存储引擎</title>
    <url>/2021/12/18/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>g</p>
<p>在这里我们只是概要地描述MySQL的存储引擎，而不会设计太多细节。</p>
<p>在文件系统中，MySQL将每个数据库（也可以称之为schema）保存为数据库目录下的一个子目录。创建表时，MySQL会在数据库子目录下创建一个和表同名的.frm文件保存表的定义。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211218124930511.png" alt="image-20211218124930511"></p>
<p>因为MySQL使用文件系统的目录和文件来保存数据库和表的定义，大小写敏感性和具体的平台密切相关。在Windows中，大小写是不敏感的；而在类Unix中则是敏感的。不同的存储引擎保存数据和索引的方式是不同的，但表的定义则是在MySQL服务层统一处理的。</p>
<p>可以使用show table status命令显示表的相关信息。例如，对于mysql数据库中的user表：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211218125959234.png" alt="image-20211218125959234"></p>
<p>输出的结果表明，这是一个MyISAM表。下面简单介绍一些每一行的含义：</p>
<blockquote>
<ul>
<li> Name: user</li>
<li>表名。</li>
<li>Engine: MyISAM<ul>
<li>表的存储引擎类型。在旧版本中，该列的名字叫Type，而不是Engine。</li>
</ul>
</li>
<li>Version: 10<ul>
<li>官方解释“The version number of the table’s .frm file.”。推测是mysql表结构的版本号，作用么就是跟踪表结构的历程，如在replication时，如果表结构的版本不一致，就不应该进行replication.自己可以测试一下，alter一下表结构，在show 一下看看version应该变化了，应该是mysql内部机制使用，对用户来说是透明的。</li>
</ul>
</li>
<li>Row_format: Dynamic<ul>
<li>行的格式。对于MyISAM表，可选的值为Dynamic、Fixed或者Compressed。Dynamic的行长度是可变的，一般包含可变长度的字段，如VARCHAR或BLOB。Fixed的行长度则是固定的，只包含固定长度的列，如CHAR和INTEGER。Compressed的行则只在压缩表中存在。</li>
</ul>
</li>
<li>Rows: 4<ul>
<li>表中的行数。对于MyISAM和其它一些存储引擎，该值是精确的，但对于InnoDB，该值是估计值。</li>
</ul>
</li>
<li>Avg_row_length: 129<ul>
<li>平均每行包含的字节数。</li>
</ul>
</li>
<li>Data_length: 516<ul>
<li>表数据的大小（以字节为单位）。</li>
</ul>
</li>
<li>Max_data_length: 281474976710655<ul>
<li>表数据的最大容量，该值和存储引擎有关。</li>
</ul>
</li>
<li>Index_length: 4096<ul>
<li>索引的大小（以字节为单位）。</li>
</ul>
</li>
<li>Data_free: 0<ul>
<li>对于MyISAM表，表示已分配但目前没有使用的空间。这部分空间包括了之前删除的行，以及后续可以被INSERT利用到的空间。</li>
</ul>
</li>
<li>Auto_increment: NULL<ul>
<li>下一个AUTO_INCREMENT的值。</li>
</ul>
</li>
<li>Create_time: 2021-04-25 17:12:01<ul>
<li>表的创建时间。</li>
</ul>
</li>
<li> Update_time: 2021-12-10 23:14:07</li>
<li>表数据的最后修改时间。</li>
<li>Check_time: NULL<ul>
<li>使用CHECK TABLE命令或者myisamchk工具最后一次检查表的时间。</li>
</ul>
</li>
<li>Collation: utf8_bin<ul>
<li>表的默认字符集和字符列排序规则。</li>
</ul>
</li>
<li>Checksum: NULL<ul>
<li>如果启用，保存的是整个表的实时校验和。</li>
</ul>
</li>
<li>Create_options:<ul>
<li>创建表时指定的其它选项。</li>
</ul>
</li>
<li>Comment: Users and global privileges<ul>
<li>该列包含了一些其它的额外信息。对于MyISAM表，保存的是表在创建时带的注释。对于InnoDB表，则保存的是InnoDB表空间的剩余空间信息。如果是一个视图，则该列包含“VIEW”的文本字样。</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="1-InnoDB存储引擎"><a href="#1-InnoDB存储引擎" class="headerlink" title="1. InnoDB存储引擎"></a>1. InnoDB存储引擎</h1><p>InnoDB是MySQL的默认事务型引擎，也是最重要、使用最广泛的存储引擎。它被设计用来处理大量的短期事务，短期事务大部分情况是正常提交的，很少会被回滚。InnoDB的性能和自动崩溃恢复特性，使得它在非事务型存储的需求中也很流行。除非有非常特别的原因需要使用其它存储引擎，否则应该优先考虑InnoDB引擎。</p>
<h2 id="InnoDB历史"><a href="#InnoDB历史" class="headerlink" title="InnoDB历史"></a>InnoDB历史</h2>]]></content>
  </entry>
  <entry>
    <title>MySQL架构与历史(上)</title>
    <url>/2021/12/17/MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2-%E4%B8%8A/</url>
    <content><![CDATA[<p>和其它数据库系统相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥好的作用，但同时也会带来一点选择上的困难。</p>
<h1 id="1-MySQL逻辑架构"><a href="#1-MySQL逻辑架构" class="headerlink" title="1. MySQL逻辑架构"></a>1. MySQL逻辑架构</h1><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211217211444051.png" alt="image-20211217211444051"></p>
<p>如图展示了MySQL的逻辑架构图，最上层的服务并不是MySQL独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的架构。比如连接处理、授权认证、安全等等。</p>
<p>第二层架构是大多数MySQL的核心服务功能所在地方，包括查询解析、分析、优化、缓存以及所有的内置函数，所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。</p>
<p>第三层包含了存储引擎。存储引擎负责MySQL中数据的存储和提取。和GNU/Linux下的各种文件系统一样，每个存储引擎都有它的优劣势。服务器通过API与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。存储引擎API包含几十个底层函数，用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作。但存储引擎不会去解析SQL（InnoDB是例外，它会解析外键定义，因为MySQL服务器本身没有实现该功能），不同存储引擎之间也不会相互通信，而只是简单地响应上层服务器的请求。</p>
<h2 id="1-1-连接管理与安全性"><a href="#1-1-连接管理与安全性" class="headerlink" title="1.1.连接管理与安全性"></a>1.1.连接管理与安全性</h2><p>每个客户端连接都会在服务器进程中拥有一个线程，这个连接的查询只会在这个单独的线程中执行，该线程只能轮流在某个CPU核心或者CPU中运行。服务器会负责缓存线程，因此不需要为每一个新建的连接创建或者销毁线程。</p>
<p>当客户短端连接到MySQL服务器时，服务器需要对其进行认证。认证基于用户名、原始主机信息和密码。如果使用了安全套接字（SSL）的方式连接，还可以使用X.509证书认证。一旦客户端连接成功，服务器会继续验证该客户端是否具有执行某个特定查询的权限。</p>
<h2 id="1-2-优化和执行"><a href="#1-2-优化和执行" class="headerlink" title="1.2 优化和执行"></a>1.2 优化和执行</h2><p>MySQL会解析查询，并创建内部数据结构（解析树），然后对其进行各种优化。用户可以通过特殊的关键字提示优化器，影响它的决策过程。也可以请求优化器解释优化过程的各个因素，使用户知道服务器是如何进行优化决策的，并提供一个参考基准，便于用户重构查询和schema、修改相关配置，使应用尽可能高效运行。</p>
<p>优化器并不关心表使用的存储引擎，但存储引擎会影响优化查询。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。</p>
<p>对于SELECT语句，在解析查询之前，服务器会先检查查询缓存，如果能够在其中找到对应的查询，服务器就不必再执行查询解析、优化和执行的整个过程，而是直接返回缓存中的结果集。</p>
<h1 id="2-并发控制"><a href="#2-并发控制" class="headerlink" title="2. 并发控制"></a>2. 并发控制</h1><p>无论何时，只要有多个查询需要在同一时刻修改数据，都会产生并发控制的问题。</p>
<h2 id="2-1-读写锁"><a href="#2-1-读写锁" class="headerlink" title="2.1 读写锁"></a>2.1 读写锁</h2><p>在处理并发读或者写时，可以通过实现一个由两种类型的锁组成的锁系统来解决问题。这两种类型的锁通常被称为<strong>共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）</strong>。</p>
<p>读锁是共享的，或者说是相互不阻塞的。多个客户在同一时刻可以同时读取同一个资源，而互不干扰。写锁则是排他的，也就是说一个写锁会阻塞其它的写锁和读锁，这是处于安全策略的考虑，只有这样，才能确保在给定的时间里，只有一个用户能执行写入，并防止其它用户读取正在写入的同一资源。</p>
<p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL会通过锁定防止其它用户读取同一数据。大多数时候，MySQL锁的内部管理都是透明的。</p>
<h2 id="2-2-锁粒度"><a href="#2-2-锁粒度" class="headerlink" title="2.2 锁粒度"></a>2.2 锁粒度</h2><p>一种提高共享资源并发性的方式就是让锁定对象更有选择性。尽量只锁定需要修改的部分数据，而不是所有资源。更理想的方式是，只对会修改的数据片进行精确的锁定。任何时候，在给定的资源上，锁定的数据量越少，则系统的并发程序越高，只要相互之间不发生冲突即可。</p>
<p>问题是加锁也需要消耗资源，如果系统花费大量的时间来管理锁，而不是存取数据，那么系统性能可能会因此受到影响。</p>
<p>所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡，这种平衡当然也会影响性能。大多数商业数据库系统没有提供更多的选择，一般都是在表上施加行级锁（row-level lock）并以各种复杂的方式来实现，以便在锁比较多的情况下尽可能提供更好的性能。</p>
<p>而MySQL则提供了多种选择。每种MySQL存储引擎都可以实现自己的锁策略和锁粒度。</p>
<h3 id="表锁（table-lock）"><a href="#表锁（table-lock）" class="headerlink" title="表锁（table lock）"></a>表锁（table lock）</h3><p><strong>表锁是MySQL中最基本的锁策略，并且是开销最小的策略</strong>。它会锁定整个表，一个用户在对表进行写操作前，需要先获得锁，这回阻塞其它用户对该表的读写操作。而读锁之间是不相互阻塞的。写锁比读锁有更高的优先级，因此一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插到写锁前面。</p>
<p>尽管存储引擎可以管理自己的锁，MySQL本身还是会使用各种有效的表锁来实现不同的目的。</p>
<h3 id="行级锁（row-lock）"><a href="#行级锁（row-lock）" class="headerlink" title="行级锁（row lock）"></a>行级锁（row lock）</h3><p><strong>行级锁可以最大程度地支持并发处理</strong>（同时也带来了<strong>最大的锁开销</strong>）。行级锁只在存储引擎层实现，而MySQL服务器层没有实现。服务器层完全不了解存储引擎中的锁实现。</p>
<h1 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h1><p>事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询；否则，所有语句都不会执行。也就是说，<strong>事务内的语句，要么全部执行成功，要么全部执行失败。</strong></p>
<p>银行应用是解释事务必要性的一个经典例子。假设一个银行的数据库有两张表：支票（checking）表和储蓄（savings）表。现在要从用户Jane的支票账户转移200美元到她的储蓄账户，那么至少需要三个步骤：</p>
<ol>
<li>检查支票账户的余额高于200美元。</li>
<li>从支票账户余额中减去200美元。</li>
<li>在储蓄账户余额中增加200美元。</li>
</ol>
<p>上述操作必须在一个事务中执行，任何一个步骤失败，都必须回滚所有步骤。</p>
<p>可以用 START TRANSACTION 语句开始一个事务，然后要么使用 COMMIT 提交事务将修改的数据持久保留，要么使用ROLLBACK撤销所有修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">SELECT balance FROM checking WHERE customer_id = 10233276;</span><br><span class="line">UPDATE checking SET balance =  balance - 200.00 WHERE customer_id = 10233276;</span><br><span class="line">UPDATE saving SET balance = balance + 200.00 WHERE customer_id = 10233276;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>除非系统通过严格的ACID测试，否则空谈事务的概念是不够的。ACID表示原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些标准特征。</p>
<h3 id="原子性（atomicity）"><a href="#原子性（atomicity）" class="headerlink" title="原子性（atomicity）"></a>原子性（atomicity）</h3><p>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚。不可能只执行其中的一部分操作。</p>
<h3 id="一致性（consistency）"><a href="#一致性（consistency）" class="headerlink" title="一致性（consistency）"></a>一致性（consistency）</h3><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。在前面的例子中，一致性确保了，即使在执行第三、四条语句之前时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。</p>
<h3 id="隔离性（isolation）"><a href="#隔离性（isolation）" class="headerlink" title="隔离性（isolation）"></a>隔离性（isolation）</h3><p>通常来说，一个事务所做的修改在最终提交以前，对其它事务是不可见的。在前面的例子中，当执行完第三条语句，第四条还未开始时，此时有另外一个账户汇款程序开始运行，则其看到的支票账户的余额并没有被减去200美元。</p>
<h3 id="持久性（durability）"><a href="#持久性（durability）" class="headerlink" title="持久性（durability）"></a>持久性（durability）</h3><p>一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</p>
<h2 id="3-1-隔离级别"><a href="#3-1-隔离级别" class="headerlink" title="3.1 隔离级别"></a>3.1 隔离级别</h2><p>隔离性其实比想象得要复杂。在SQL标准中定义了四种隔离级别。</p>
<blockquote>
<p>提示：每种存储引擎实现得隔离级别不尽相同。</p>
</blockquote>
<h3 id="READ-UNCOMMITTED（未提交读）"><a href="#READ-UNCOMMITTED（未提交读）" class="headerlink" title="READ UNCOMMITTED（未提交读）"></a>READ UNCOMMITTED（未提交读）</h3><p>在READ UNCOMMITTED级别，事务中的修改，即使没有提交，对其它事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读（Dirty Read）。这个级别会导致很多问题，从性能上讲，READ UNCOMMITTED不会比其它的级别好太多，但却缺乏其它级别的很多好处，除非真的有非常必要的理由，在实际应用中一般很少使用。</p>
<h3 id="READ-COMMITTED（提交读）"><a href="#READ-COMMITTED（提交读）" class="headerlink" title="READ COMMITTED（提交读）"></a>READ COMMITTED（提交读）</h3><p>大多数数据库系统的默认隔离级别都是READ COMMITTED（但MySQL不是）。READ COMMITTED满足前面提到的隔离性的简单定义：一个事务开始时，只能“看见”已经提交的事务所做的修改。换句话说，一个事务从开始知道提交之前，所做的任何修改对其它事务都是不可见的。这个级别有时候也叫做<strong>不可重复读</strong>（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。</p>
<h3 id="REPEATABLE-READ（可重复读）"><a href="#REPEATABLE-READ（可重复读）" class="headerlink" title="REPEATABLE READ（可重复读）"></a>REPEATABLE READ（可重复读）</h3><p>REPEATABLE READ解决了脏读的问题。该级别保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重复读隔离级别还是无法解决另外一个幻读（Phantom Read）的问题。所谓<strong>幻读，指的是当某个事务在读取某个范围的记录时，会产生幻行</strong>（Phantom Row）。InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。</p>
<p>可重复读是MySQL的默认事务隔离级别。</p>
<h3 id="SERIALIZABLE（可串行化）"><a href="#SERIALIZABLE（可串行化）" class="headerlink" title="SERIALIZABLE（可串行化）"></a>SERIALIZABLE（可串行化）</h3><p>SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题，简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性并且可以接受没有并发的情况下，才考虑。</p>
<table>
<thead>
<tr>
<th align="left">隔离级别</th>
<th align="center">脏读可能性</th>
<th align="center">不可重复读可能性</th>
<th align="center">幻读可能性</th>
<th align="center">加锁读</th>
</tr>
</thead>
<tbody><tr>
<td align="left">READ UNCOMMITTED</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="left">READ COMMITTED</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="left">REPEATABLE READ</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="left">SERIALIZABLE</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
</tbody></table>
<h2 id="3-2-死锁"><a href="#3-2-死锁" class="headerlink" title="3.2 死锁"></a>3.2 死锁</h2><p>死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺序锁定资源时，就可能会产生死锁。多个事务同时锁定同一个资源时，也会产生死锁。例如，设想下面两个事务同时处理StockPrice表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 事务1</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE StockPrice SET `close` = 45.50 WHERE stock_id = 4 AND `date` = &#x27;2021-12-17&#x27;;</span><br><span class="line">UPDATE StockPrice SET `close` = 19.80 WHERE stock_id = 3 AND `date` = &#x27;2021-12-18&#x27;;</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line"># 事务2</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE StockPrice SET high = 20.12 WHERE stock_id = 3 AND `date` = &#x27;2021-12-18&#x27;;</span><br><span class="line">UPDATE StockPrice SET high = 47.20 WHERE stock_id = 4 AND `date` = &#x27;2021-12-17&#x27;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>如果凑巧，两个事务都执行了第一条UPDATE语句，更新了一行数据，同时也锁定了该行数据，接着每个事务都尝试去执行第二条UPDATE语句，却发现已经被对方锁定，然后两个事务都等待对方释放锁，同时又持有对方需要的锁，陷入死循环。</p>
<p>为了解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制。锁的行为和顺序适合存储引擎相关的。以同样的顺序执行语句，有些存储引擎会产生死锁，有些不会。死锁的产生有双重原因：有些是因为真正的数据冲突，这种通常很难避免，但有些完全是由于存储引擎的实现方式导致的。</p>
<p>死锁发生以后，只有部分或者完全回滚其中一个事务，才能打破死锁。对于事务型的系统，这是无法避免的，所以应用程序在设计时必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可。</p>
<h2 id="3-3-事务日志"><a href="#3-3-事务日志" class="headerlink" title="3.3 事务日志"></a>3.3 事务日志</h2><p>事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中。事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志（Write-Ahead Logging），修改数据需要写两次磁盘。</p>
<p>如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。</p>
<h2 id="3-4-MySQL中的事务"><a href="#3-4-MySQL中的事务" class="headerlink" title="3.4 MySQL中的事务"></a>3.4 MySQL中的事务</h2><p>MySQL提供了两种事务型的存储引擎：InnoDB和NDB Cluster。另外还有一些第三方存储引擎也支持事务，比较知名的包括XtraDB和PBXT。</p>
<h3 id="自动提交（AUTOCOMMIT）"><a href="#自动提交（AUTOCOMMIT）" class="headerlink" title="自动提交（AUTOCOMMIT）"></a>自动提交（AUTOCOMMIT）</h3><p>MySQL默认采用自动提交模式。也就是说，如果不是显式的开始一个事务，则每个查询都被当作一个事务执行提交操作。在当前连接中，可以通过设置 autocommit 变量来启用或禁用自动提交模式：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211217232445701.png" alt="image-20211217232445701"></p>
<p>1或者ON表示启用，0或者OFF表示禁用。当autocommit=0时，所有的查询都是在一个事务中，知道显式执行commit提交或者rollback回滚，该事务结束，同时又开始另一个新事务。修改autocommit对非事务型的表，比如MyISAM或者内存表，不会有任何影响。对这类表来说，没有commit或者rollback的概念，也可以说是相当于一直处于autocommit启用的模式。</p>
<p>MySQL可以通过执行 set transaction isolation level 命令来设置隔离级别。新的隔离级别会在下一个事务开始的时候生效：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211217233445478.png" alt="image-20211217233445478"></p>
<p>MySQL能够识别所有的4个ANSI隔离级别，InnoDB引擎也支持所有的隔离级别。</p>
<h3 id="在事务中混合使用存储引擎"><a href="#在事务中混合使用存储引擎" class="headerlink" title="在事务中混合使用存储引擎"></a>在事务中混合使用存储引擎</h3><p>MySQL服务器层部管理事务，事务是由下层的存储引擎实现的。所以在同一个事务中，使用多种存储引擎是不可靠的。</p>
<p>如果在事务中混合使用了事务型和非事务型的表，在正常提交的情况下不会有什么问题。</p>
<p>但如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态，这种情况很难修复，事务的最终结果将无法确定。所以，为每张表选择合适的存储引擎非常重要。</p>
<h3 id="隐式和显式锁定"><a href="#隐式和显式锁定" class="headerlink" title="隐式和显式锁定"></a>隐式和显式锁定</h3><p>InnoDB采用的是两阶段锁定协议（two-phase locking protocol）。在事务执行过程中，随时都可以执行锁定，锁只有在执行commit或者rollback的时候才会释放，并且所有锁是在同一时刻被释放。前面描述的锁定都是隐式锁定，InnoDB会根据隔离级别在需要的时候自动加锁。</p>
<p>另外，InnoDB也支持通过特定的语句进行显式锁定，这些语句不属于SQL规范：</p>
<ul>
<li>SELECT … LOCK IN SHARE MODE</li>
<li>SELECT … FOR UPDATE</li>
</ul>
<p>MySQL也支持LOCK TABLES和UNLOCK TABLES语句，这是在服务器层实现的，和存储引擎无关。它们有自己的用途，但并不能替代事务处理。如果应用需要用到事务，还是应该选择事务型存储引擎。</p>
<blockquote>
<p>警告：LOCK TABLES和事务之间相互影响的话，情况会变得非常复杂，在某些MySQL版本中甚至会产生无法预料的结果。因此，建议除了事务中禁用了autocommit，可以使用LOCK TABLES之外，其它任何时候都不要显式执行LOCK TABLES，不管使用什么存储引擎。</p>
</blockquote>
<h1 id="4-多版本并发控制"><a href="#4-多版本并发控制" class="headerlink" title="4. 多版本并发控制"></a>4. 多版本并发控制</h1><p>MySQL的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制（MVCC，Multiversion Concurrency Control）。不仅是MySQL，包括Oracle、PostgreSQL等其它数据库系统也都实现了MVCC，但各自的实现机制不尽相同，因为MVCC没有一个统一的实现标准。</p>
<p>可以认为MVCC是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p>
<p>MVCC的实现，是通过保存数据在某个时间点的快照来实现的。也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p>
<p>前面说到不同存储引擎的MVCC实现是不同的，典型的有乐观并发控制和悲观并发控制。下面通过InnoDB的简化版行为来说明MVCC是如何工作的。</p>
<p>InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统版本号。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。下面看一下在REPEATABLE READ隔离级别下，MVCC具体如何操作。</p>
<ul>
<li><p>SELECT</p>
<ul>
<li>InnoDB会根据以下两个条件检查每行记录：<ul>
<li>InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</li>
<li>行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。</li>
</ul>
</li>
</ul>
</li>
<li><p>INSERT</p>
<ul>
<li>InnoDB为新插入的每一行保存当前系统版本号作为行版本号。</li>
</ul>
</li>
<li><p>DELETE</p>
<ul>
<li>InnoDB为删除的每一行保存当前系统版本号作为行删除标识。</li>
</ul>
</li>
<li><p>UPDATE</p>
<ul>
<li>InnoDB为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。</li>
</ul>
</li>
</ul>
<p>保存这两个额外系统版本号就，使大多数读操作可以不用加锁。使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行。不足是每行记录都需要额外空间，需要做更多的行检查工作，以及一些额外的维护工作。</p>
<p>MVCC只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作。其它两个隔离级别都和MVCC不兼容，因为READ UNCOMMITTED总是读取最新的数据行，而不是符合当前事务版本的数据行。而SERIALIZABLE则会对所有读取的行都加锁。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/16/Network-008-%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>网络应用是计算机网络存在的理由，如果我们不能构想出任何有用的应用，也就没有任何必要去设计支持它们的网络协议了。</p>
<p>研发网络应用程序的核心是写出能够运行在不同的端系统和通过网络彼此通信的程序。当研发新应用程序时，你需要编写将在多台端系统上运行的软件。例如，该软件能够用C、Java或Python来编写。重要的是，你不需要写在网络核心设备如路由器或链路层交换机上运行的软件。即使你要为网络核心设备写应用程序软件，你也不能做到这一点。网络核心设备并不在应用层上起作用，而仅在较低层起作用，特别是位于网络层及下面层次。这种基本设计，也即将应用软件限制在端系统的方法，促进了大量的网络应用程序的迅速研发和部署。</p>
<h1 id="1-网络应用程序体系结构"><a href="#1-网络应用程序体系结构" class="headerlink" title="1. 网络应用程序体系结构"></a>1. 网络应用程序体系结构</h1><p>从应用程序研发者的角度看，网络体系结构是固定的，并为应用程序提供了特定的服务集合。在另一方面，应用程序体系结构由应用程序研发者设计，规定了如何在各种端系统上组织该程序。在选择应用程序体系结构时，应用程序研发者很可能利用现代网络应用程序中所使用的两种主流体系结构之一：客户-服务器体系结构或对等（P2P）体系结构。</p>
<h2 id="1-1-客户-服务器体系结构"><a href="#1-1-客户-服务器体系结构" class="headerlink" title="1.1 客户-服务器体系结构"></a>1.1 客户-服务器体系结构</h2><p>在客户-服务器体系结构中，有一个总是打开的主机称为服务器，它服务于来自许多其它称为客户的主机的请求。一个经典例子是Web应用程序，其中总是打开的Web服务器服务于来自浏览器的请求。当Web服务器接收到来自某客户对某对象的请求时，它向该客户发送所请求的对象作为响应。</p>
<p>这种体系结构有两种典型特征：</p>
<ul>
<li>客户相互之间不直接通信。</li>
<li>服务器具有固定的、周知的地址，该地址称为IP地址。</li>
</ul>
<p>因为服务器具有固定的、周知的地址，并且因为该服务器总是打开的，客户总是能够通过向该服务器的IP地址发送分组来与其联系。</p>
<p>在一个客户-服务器应用中，常常会出现一台单独的服务器主机跟不上它所有客户请求的情况。为此，配备大量主机的<strong>数据中心</strong>常被用于创建强大的虚拟服务器。一个数据中心能够有数十万台服务器，它们必须要供电和维护。此外，服务提供商必须支付不断出现的互联和带宽费用，以发送和接收到达/来自数据中心的数据。</p>
<h2 id="1-2-P2P体系结构"><a href="#1-2-P2P体系结构" class="headerlink" title="1.2 P2P体系结构"></a>1.2 P2P体系结构</h2><p>在一个P2P体系结构中，对位于数据中心的专用服务器有最小的依赖。相反，应用程序在间断连接的主机对之间使用直接通信，这些主机对被称为<strong>对等方</strong>。这些对等方并不为服务提供商所有。因为这种对等方通信不必通过专门的服务器，该体系结构被称为对等方到对等方的。许多目前流行的、流量密集型应用都是P2P体系结构的。这些应用包括文件共享（例如BitTorrent）、对等方协助下载器（例如迅雷）等。某些应用具有混合的体系结构，它结合了客户-服务器和P2P的元素。</p>
<p>P2P体系结构的最引人入胜的特性之一是它们的自扩展性。例如，在一个P2P文件共享应用中，尽管每个对等方都由于请求文件产生工作量，但每个对等方通过向其它对等方分发文件也为系统增加服务能力。P2P也是成本有效的，因为它们通常不需要庞大的服务器基础设施和服务器带宽。然后，未来P2P应用面临三个主要挑战：</p>
<ul>
<li>ISP友好。大多数住宅ISP已经受制于“非对称的”带宽应用，也就是说，下载比上载要多得多。但是P2P视频流和文件分发应用改变了从服务器到住宅ISP的上载流量，因而给ISP带来了巨大压力。未来P2P应用需要设计对ISP友好的模式。</li>
<li>安全性。因为它们的高度分布和开放特性，P2P应用给安全带来挑战。</li>
<li>激励。未来P2P应用的成功也取决于说服用户自愿向应用提供带宽、存储和计算自愿，这对激励设计带来挑战。</li>
</ul>
<h1 id="2-进程通信"><a href="#2-进程通信" class="headerlink" title="2. 进程通信"></a>2. 进程通信</h1><p>在OS的术语中，进行通信的实际上是进程而不是程序。一个进程可以被认为是运行在端系统中的一个程序。当进程运行在相同的端系统上时就，它们使用进程间通信机制相互通信。进程间通信的规则由端系统上的OS确定。</p>
<p>在两个不同端系统上的进程，通过跨越计算机网络交换<strong>报文</strong>而相互通信。发送进程生成并向网络中发送报文；接收进程接收这些报文并可能通过将报文发送回去进行响应。</p>
<h2 id="2-1-客户和服务器进程"><a href="#2-1-客户和服务器进程" class="headerlink" title="2.1 客户和服务器进程"></a>2.1 客户和服务器进程</h2><p>网络应用程序由成对的进程组成，这些进程通过网络相互发送报文。我们通常将这两个进程之一标识为客户，另一个进程标识为服务器。对于Web而言，浏览器是一个客户进程，Web服务器是一台服务器进程。对于P2P文件共享，下载文件的对等方标识为客户，上载文件的对等方标识为服务器。</p>
<p>在有些情况下，一个进程能够既是客户又是服务器。例如，在P2P文件共享系统中，一个进程既能上载又能下载文件。无论如何，在任何给定的一对进程之间的通信会话场景中，我们仍能将一个进程表示为客户，另一个进程标识为服务器。我们定义客户和服务器进程如下：</p>
<blockquote>
<p>在给定的一对进程之间的通信会话场景中，发起通信（即在该会话开始时发起与其它进程的联系）的进程被标识为<strong>客户</strong>，在会话开始时等待联系的进程是<strong>服务器</strong>。</p>
</blockquote>
<h2 id="2-2-进程与计算机网络之间的接口"><a href="#2-2-进程与计算机网络之间的接口" class="headerlink" title="2.2 进程与计算机网络之间的接口"></a>2.2 进程与计算机网络之间的接口</h2><p>进程通过一个称为<strong>套接字</strong>的软件接口向网络发送报文和从网络接收报文。我们考虑一个类比来帮助我们理解进程和套接字。进程可类比于一座房子，而它的套接字可以类比于它的们。当一个进程想向位于另外一台主机上的另一个进程发送报文时，它把报文推出该门（套接字）。该发送进程假定该门到另外一侧之间有运输的基础设施，该设施将把报文传送到目的进程的门口。一旦该报文抵达目的主机，它通过接收进程的门（套接字）传递，然后接收进程对该报文进行处理。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20211219132923950.png" alt="image-20211219132923950"></p>
<p>如图显示了两个经过因特网通信的进程之间的套接字通信。如该图所示，套接字是同一台主机内应用层与运输层之间的接口。由于该套接字是建立网络应用程序的可编程接口，因此套接字也称为应用程序和网络之间的<strong>应用程序编程接口</strong>（Application Programming Interface，API）。应用程序开发者可以控制套接字在应用层端的一切，但是对该套接字的运输层端几乎没有控制权。应用程序开发者对于运输层的控制仅限于：</p>
<ol>
<li>选择运输层协议；</li>
<li>也许能设定几个运输层参数，如最大缓存和最大报文段长度等。</li>
</ol>
<p>一旦应用程序开发者选择了一个运输层协议，则应用程序就建立在由该协议提供的运输层服务之上。</p>
<h2 id="2-3-进程寻址"><a href="#2-3-进程寻址" class="headerlink" title="2.3 进程寻址"></a>2.3 进程寻址</h2><p>为了向特定目的地发送邮政邮件，目的地需要有一个地址。类似地，在一台主机上运行的进程为了向另一台主机上运行的进程发送分组，接收进程需要有一个地址。为了标识该接收进程，需要定义两种信息：</p>
<ol>
<li>主机的地址；</li>
<li>定义在目的主机中的接收进程的标识符。</li>
</ol>
<p>在因特网中，主机由其IP地址标识。在这里，我们只要知道IP地址是一个32比特的量且它能够唯一地标识该主机即可。除了知道报文发送的目的地的主机地址之外，发送进程还必须指定运行在主机上的接收进程（更具体的说，接收套接字）。因为一般而言一台主机能够运行许多网络应用，这些信息是需要的。<strong>目的地端口号</strong>用于这个目的。</p>
<h1 id="3-可供应用程序使用的运输服务"><a href="#3-可供应用程序使用的运输服务" class="headerlink" title="3. 可供应用程序使用的运输服务"></a>3. 可供应用程序使用的运输服务</h1><p>包括因特网在内的很多网络提供了不止一种运输层协议。当开发一个应用时，必须选择一种可用的运输层协议。一个运输层协议能够为调用它的应用程序提供以下四个方面的服务：可靠数据传输、吞吐量、定时和安全性。</p>
<h2 id="3-1-可靠数据传送"><a href="#3-1-可靠数据传送" class="headerlink" title="3.1 可靠数据传送"></a>3.1 可靠数据传送</h2><p>分组在计算机网络中可能丢失，因此，必须做一些工作以确保由应用程序的一端发送的数据正确、完全地交付给该应用程序的另一端。如果一个协议提供了这样的确保数据交付服务，就认为提供了<strong>可靠数据传输</strong>。运输层协议能够潜在地向应用程序提供的一个重要服务是进程到进程的可靠数据传输。当一个运输协议提供这种服务时，发送进程只要将数据传递给套接字，就可以完全相信该数据能无差错地到达接收进程。</p>
<p>当一个运输层协议不提供可靠数据传输时，由发送进程发送的某些数据可能不能够到达接收进程。这可能能被<strong>容忍丢失的应用</strong>所接受，如交谈式音频/视频，它们能够承受一定量的数据丢失。在这些多媒体应用中，丢失的数据引起播放的音频/视频出现小干扰，而不是致命的损伤。</p>
<h2 id="3-2-吞吐量"><a href="#3-2-吞吐量" class="headerlink" title="3.2 吞吐量"></a>3.2 吞吐量</h2><p>在沿着一条网络路径上的两个进程之间的通信会话场景中，可用吞吐量就是发送进程能够向接收进程交付比特的速率。因为其它会话将共享沿着该网络路径的带宽，并且因为这些会话将会到达和离开，该可用吞吐量将随时间波动。这些观察导致另一种自然的服务，即<strong>运输层协议能够以某种特定的速率提供确保的可用吞吐量</strong>。</p>
<p>具有吞吐量要求的应用程序被称为<strong>带宽敏感的应用</strong>。许多当前的多媒体应用是带宽敏感的，尽管某些多媒体应用程序可能采用自适应编码技术对数字语音或视频以与当前可用带宽相匹配的速率进行编码。</p>
<p>带宽敏感的应用具有特定的吞吐量要求，而弹性应用能够根据情况或多或少地利用可供使用的吞吐量。当然，吞吐量越多越好。</p>
<h2 id="3-3-定时"><a href="#3-3-定时" class="headerlink" title="3.3 定时"></a>3.3 定时</h2><p>运输层协议也能提供定时保证。如同具有吞吐量保证那样，定时保证能够以多种形式实现。一个保证的例子如：发送方注入进套接字中的每个比特到达接收方的套接字不迟于100ms。这种服务将对交互式实时应用程序有吸引力，如因特网电话、虚拟环境、电话会议和多方游戏，所有这些服务为了有效性而要求数据交付有严格的时间限制。对于非实时的应用，较低的时延总比较高的时延好，但对端到端的时延没有严格的约束。</p>
<h2 id="3-4-安全性"><a href="#3-4-安全性" class="headerlink" title="3.4 安全性"></a>3.4 安全性</h2><p>最后，运输协议能够为应用程序提供一种或多种安全性服务。例如，在发送主机中，运输协议能够加密由发送进程传输的所有数据，在接收主机中，运输层协议能够在将数据交付给接收进程之前解密这些数据。这种服务将在发送和接收进程之间提供机密性，以防该数据以某种方式在这两个进程之间被观察到。运输协议还能提供除了机密性以外的其它安全性服务，包括数据完整性和端点鉴别。</p>
<h1 id="4-因特网提供的运输服务"><a href="#4-因特网提供的运输服务" class="headerlink" title="4. 因特网提供的运输服务"></a>4. 因特网提供的运输服务</h1><p>因特网为应用程序提供两个运输层协议，即UDP和TCP。每个协议为调用它们的应用程序提供了不同的服务集合。</p>
<table>
<thead>
<tr>
<th align="left">应用</th>
<th align="center">数据丢失</th>
<th align="left">带宽</th>
<th align="left">时间敏感</th>
</tr>
</thead>
<tbody><tr>
<td align="left">文件传输</td>
<td align="center">不能丢失</td>
<td align="left">弹性</td>
<td align="left">不</td>
</tr>
<tr>
<td align="left">电子邮件</td>
<td align="center">不能丢失</td>
<td align="left">弹性</td>
<td align="left">不</td>
</tr>
<tr>
<td align="left">Web文档</td>
<td align="center">不能丢失</td>
<td align="left">弹性（几kbps）</td>
<td align="left">不</td>
</tr>
<tr>
<td align="left">因特网电话/视频会议</td>
<td align="center">容忍丢失</td>
<td align="left">音频（几dbps<del>1Mbps）<br />视频（10kbps</del>5Mbps）</td>
<td align="left">是，100ms</td>
</tr>
<tr>
<td align="left">存储音频/视频</td>
<td align="center">容忍丢失</td>
<td align="left">同上</td>
<td align="left">是，几秒</td>
</tr>
<tr>
<td align="left">交互式游戏</td>
<td align="center">容忍丢失</td>
<td align="left">几kbps~10kbps</td>
<td align="left">是，100ms</td>
</tr>
<tr>
<td align="left">即时讯息</td>
<td align="center">不能丢失</td>
<td align="left">弹性</td>
<td align="left">是和不是</td>
</tr>
</tbody></table>
<h2 id="4-1-TCP服务"><a href="#4-1-TCP服务" class="headerlink" title="4.1 TCP服务"></a>4.1 TCP服务</h2><p>TCP服务模型包括面向连接服务和可靠数据传输服务。当某个应用程序调用TCP作为其运输协议时，该应用程序就能获得来自TCP的这两种服务。</p>
<ul>
<li>面向连接的服务：在应用层数据报文开始流动之前，TCP让客户和服务器互相交换运输层控制信息。这个所谓的握手过程提示客户和服务器，使它们为大量分组的到来做好准备。在握手阶段，一个TCP连接就在两个进程的套接字之间建立了。这条连接是全双工的，即连接双方的进程可以在此连接上同时进行报文收发。当应用程序结束报文发送时，必须拆除该连接。</li>
<li>可靠的数据传送服务：通信进程能够依靠TCP，无差错、按适当顺序交付所有发送的数据。当应用程序的一段将字节流传进套接字时，它能够依靠TCP将相同的字节流交付给接收方的套接字，而没有字节的丢失和冗余。</li>
</ul>
<p>TCP协议还具有拥塞控制机制，这种服务不一定能为通信进程带来直接好处，但能为因特网带来整体好处。当发送方和接收方之间的网络出现拥塞时，TCP的拥塞控制机制会抑制发送进程。TCP拥塞控制也试图限制每个TCP连接，使它们达到公平共享网络带宽的目的。</p>
<blockquote>
<div aliqn="center">
    <font color="bule">TCP安全</font>
</div>

<p>无论TCP还是UDP都没有提供任何加密机制，这就是说发送进程传进其套接字的数据，与经网络传送到目的进程的数据相同。因此，举例来说如果某发送进程以明文方式发送了一个口令进入它的套接字，该明文口令将经过发送放于接收方之间的所有链路传送，这就可能在任何中间链路被嗅探和发现。因为隐私和其它安全问题对许多应用而言已经称为至关重要的问题，所以因特网界已经研制了TCP的加强版本，称为<strong>安全套接字层（Secure Sockets Layer，SSL）</strong>。用SSL加强后的TCP不仅能够做传统的TCP所能做的一切，而且提供了关键的进程到进程的安全性服务，包括加密、数据完整性和端点鉴别。</p>
</blockquote>
<h2 id="4-2-UDP服务"><a href="#4-2-UDP服务" class="headerlink" title="4.2 UDP服务"></a>4.2 UDP服务</h2><p>UDP是一种不提供不必要服务的轻量级运输协议，它仅提供最小服务。UDP是无连接的，因此在两个进程通信前没有握手过程。UDP协议提供一种不可靠数据传送服务，也就是说，当进程将一个报文发送进UDP套接字时，UDP协议并不保证该报文将到达接收进程。不仅如此，到达接收进程的报文也可能是乱序到达的。</p>
<p>UDP没有包括拥塞控制机制，所以UDP的发送端可以用它选定的任何速率向其下层注入数据。（然而，值得注意的是实际端到端吞吐量可能小于这种速率，这可能是因为中间链路的带宽受限或因为拥塞而造成的。）</p>
<h2 id="4-3-因特网运输协议所不提供的服务"><a href="#4-3-因特网运输协议所不提供的服务" class="headerlink" title="4.3 因特网运输协议所不提供的服务"></a>4.3 因特网运输协议所不提供的服务</h2><p>在我们对TCP和UDP的简要概述中，明显地缺少了对吞吐量或定时保证的讨论，即这些服务目前的因特网运输协议并没有提供。当然，这并不意味着时间敏感应用不能运行在今天的因特网上。这些应用经常工作的相当好，因为它们已经被设计成尽最大可能对付这种保证的缺乏。总之，今天的因特网通常能够为时间敏感应用提供满意的服务，但它不能提供任何定时或贷款保证。</p>
<p>表中指出了一些流行的因特网应用所使用的运输协议。可以看到，电子邮件、远程终端访问、Web、文件传输都是用了TCP。这些应用选择TCP的最主要原因是TCP提供了可靠数据传输服务，确保所有数据最终到达目的地。因为因特网电话应用通常能够忍受某些丢失但要求达到一定的最小速率才能有效工作，所以因特网电话应用的开发者通常愿意将该应用运行在UDP上，从而设法避开TCP的拥塞控制机制和分组开销。但因为许多防火墙被配置成阻挡UDP流量，所以因特网电话应用通常设计成如果UDP通信失败就使用TCP作为备份。</p>
<table>
<thead>
<tr>
<th>应用</th>
<th>应用层协议</th>
<th>支撑的运输协议</th>
</tr>
</thead>
<tbody><tr>
<td>电子邮件</td>
<td>SMTP[RFC 5321]</td>
<td>TCP</td>
</tr>
<tr>
<td>远程终端访问</td>
<td>Telnet[RFC 854]</td>
<td>TCP</td>
</tr>
<tr>
<td>Web</td>
<td>HTTP[RFC 26116]</td>
<td>TCP</td>
</tr>
<tr>
<td>文件传输</td>
<td>FTP[RFC 959]</td>
<td>TCP</td>
</tr>
<tr>
<td>流式多媒体</td>
<td>HTTP（如YouTube）</td>
<td>TCP</td>
</tr>
<tr>
<td>因特网电话</td>
<td>SIP[RFC 3261]、RTP[RFC 3550]或专用的（如Skype）</td>
<td>UDP或TCP</td>
</tr>
</tbody></table>
<h1 id="5-应用层协议"><a href="#5-应用层协议" class="headerlink" title="5. 应用层协议"></a>5. 应用层协议</h1><p>上面我们知道了通过把报文发送进套接字使网络进程间实现相互通信。但是如何构造这些报文？在这些报文中的各个字段的含义是什么？进程何时发送这些报文？这些问题将我们带进应用层协议的范围。<strong>应用层协议</strong>定义了运行在不同端系统上的应用程序进程如何相互传递报文。特别是应用层协议定义了：</p>
<ul>
<li>交换的报文类型，例如请求报文和响应报文。</li>
<li>各种报文类型的语法，如报文中的各个字段及这些字段是如何描述的。</li>
<li>字段的语义，即这些字段中包含的信息的含义。</li>
<li>一个进程何时以及如何发送报文，对报文进行响应的规则。</li>
</ul>
<p>有些应用层协议是由RFC文档定义的，因此它们位于公共域中。例如，Web的应用层协议HTTP。还有很多别的应用层协议是专用的，有意不为公共域使用。例如，Skype使用了专用的应用层协议。</p>
<p>区分网络应用和应用层协议是很重要的。应用层协议只是网络应用的一部分。看一个例子，Web是一种客户-服务器应用，它允许客户按照需求从Web服务器获得文档。该Web应用有很多组成部分，包括文档格式的标准、Web浏览器、Web服务器，以及一个应用层协议。Web的应用层协议是HTTP，它定义了在浏览器和Web服务器之间传输的报文格式和序列。因此，HTTP只是Web应用的一个部分（尽管是重要部分）。</p>
]]></content>
  </entry>
  <entry>
    <title>模块拼装——静态链接</title>
    <url>/2021/12/16/Compilers-%E6%A8%A1%E5%9D%97%E6%8B%BC%E8%A3%85%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>链接器年龄比编译器长</p>
<p>计算机的程序开发并非从一开始就有着这么复杂的自动化编译、链接过程。原始的链接概念远在高级程序语言发明之前就已经存在了，在最开始的时候，程序员（当时的程序员概念跟现在相差很大了）先把一个程序在纸上写好，当然当时没有很高级的语言，用的都是机器语言，甚至连汇编语言都没有。当程序要被运行时，程序员人工将他写的程序写入存储设备上，最原始的存储设备之一就是纸带，即在纸带上打相应的孔。</p>
<p>现在我们考虑一个问题，程序并不是一写好就永远不变化的，它可能会经常被修改。当我们需要修改的时候，程序员需要人工重新计算每个子程序或跳转的目标地址。当程序修改的时候，这些位置都要重新计算，十分繁琐和耗时，并且容易出错。这种重新计算各个目标的地址过程叫做重定位（Relocation）。</p>
<p>程序设计的模块化是人们一直在追求的目标，因为当一个系统十分复杂的时候，我们不得不将一个复杂的系统逐步分割成小的系统以达到各个突破的目的。一个复杂的软件也如此，人们把每个源代码模块独立地编译，然后按照需要将它们”组装“起来，这个组装模块的过程就是链接（Linking）。链接的主要内容就是把各个模块之间相互引用的部分都处理好，使得各个模块之间能够正确地衔接。链接过程主要包括了地址和空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定位（Relocation）等这些步骤。</p>
<blockquote>
<p>符号决议有时候也被叫做符号绑定（Symbol Binding）、名称绑定（Name Binding）、名称决议（Name Resolution），甚至还有叫做地址绑定（Address Binding）、指令绑定（Instruction Binding）的，大体上它们的意思都一样，但从细节角度来区分，它们之间还是存在一定的区别的，比如“决议”更倾向于静态链接，而“绑定”更倾向于动态链接，即它们所使用的范围不一样。在静态链接，我们将统一称为符号决议。</p>
</blockquote>
<p>最基本的静态链接过程如图所示。每个模块的源代码文件经过编译器编译成目标文件，目标文件和库一起链接形成最终可执行文件。而最常见的库就是运行时库（Runtime Library），它是支持程序运行的基本函数的集合。库其实是一组目标文件的包，就是一些最常用的代码编译成目标文件后打包存放。</p>
<blockquote>
<p>我们认为对于Object文件没有一个很合适的中文名称，把它叫做中间目标文件比较合适，简称为目标文件，很多时候我们也把目标文件称为模块。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>编译器做了什么</title>
    <url>/2021/12/15/Compilers-%E7%BC%96%E8%AF%91%E5%99%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>从最直观的角度来讲，编译器就是将高级语言翻译成机器语言的一个工具。编译过程一般可以分为6步：<strong>扫描、语法分析、语义分析、源代码优化、代码生成和目标代码优化</strong>。整个过程如图所示。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211215105442117.png" alt="image-20211215105442117"></p>
<p>我们结合图来描述从源代码（Source Code）到最终目标代码（Final Target Code）的过程。以一段很简单的C语言的代码为例子来讲述这个过程。比如我们有一行C语言的源代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>[index] = (index + <span class="number">4</span>) * (<span class="number">2</span> + <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>CompilerExpression.c</p>
<h2 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a>1. 词法分析</h2><p>首先源代码程序被输入到<strong>扫描器（Scanner）</strong>，扫描器的任务很简单，它只是简单地进行<strong>词法分析</strong>，运用一种类似于有限状态机的算法可以很轻松地将源代码的字符序列分割成一系列的<strong>记号（Token）</strong>。比如上面的那行程序，总共包含了28个非空字符，经过扫描以后，产生了16个记号，如表所示：</p>
<table>
<thead>
<tr>
<th>记号</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>array</td>
<td>标识符</td>
</tr>
<tr>
<td>[</td>
<td>左方括号</td>
</tr>
<tr>
<td>index</td>
<td>标识符</td>
</tr>
<tr>
<td>]</td>
<td>右方括号</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>index</td>
<td>标识符</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>4</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>右圆括号</td>
</tr>
<tr>
<td>*</td>
<td>乘号</td>
</tr>
<tr>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>2</td>
<td>数字</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>6</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>右圆括号</td>
</tr>
</tbody></table>
<p>词法分析产生的记号一般可以分为如下几类：<strong>关键字、标识符、字面量（包含数字、字符串等）和特殊符号（如加号、等号）</strong>。在识别记号的同时，扫描器也完成了其它工作。比如将标识符存放到符号表，将数字、字符串常量存放到文字表等，以备后面的步骤使用。</p>
<p>有一个叫<strong>lex</strong>的程序可以实现词法扫描，它会<strong>按照用户之前描述好的词法规则将输入的字符串分割成一个个记号</strong>。因为这样一个程序的存在，编译器的开发者就无需为每个编译器开发一个独立的词法扫描器，而是根据需要改变词法规则就可以了。</p>
<p>另外对于一些有预处理的语言，比如C，它的宏替换和文件包含等工作一般不归入编译器的范围而交给一个独立的预处理器。</p>
<h2 id="2-语法分析"><a href="#2-语法分析" class="headerlink" title="2. 语法分析"></a>2. 语法分析</h2><p>接下来<strong>语法分析器（Grammar Parser）</strong>将对由扫描器产生的记号进行语法分析，从而产生语法树（Syntax Tree）。整个分析过程采用了<strong>上下文无关语法（Context-free Grammar）</strong>的分析手段。简单地讲，由语法分析器生成的<strong>语法树就是以表达式（Expression）为节点的树</strong>。上面例子中的语句经过语法分析器以后形成如图所示的语法树：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216121146991.png" alt="image-20211216121146991"></p>
<p>从图中可以看到，整个语句被看作是一个赋值表达式；赋值表达式左边是一个数组表达式，右边是一个乘法表达式；数组表达式又由两个符号表达式组成，等等。符号和数字是最小的表达式，它们不是由其它的表达式来组成的，所以它们通常作为整个语法树的叶节点。在<strong>语法分析的同时，很多运算符号的优先级和含义也被确定下来了</strong>。另外，有些<strong>符号具有多重含义</strong>，比如星号*在C语言中可以表示乘法表达式，也可以表示对指针取内容的表达式，所以<strong>语法分析阶段必须对这些内容进行区分</strong>。如果出现了表达式不合法，比如各种括号不匹配、表达式中缺少操作等等，编译器就会报告语法分析阶段的错误。</p>
<p>正如前面词法分析有lex一样，语法分析也有一个现成的工具叫<strong>yacc（Yet Another Compiler Compiler）</strong>。它也像lex一样，可以<strong>根据用户给定的规则对输入的记号序列进行解析，从而构建出一颗语法树</strong>，对于不同的编程语言，编译器的开发者只须改变语法规则，而无需为每个编译器编写一个语法分析器，所以它又被称为“编译器编译器（Compiler Compiler）”。</p>
<h2 id="3-语义分析"><a href="#3-语义分析" class="headerlink" title="3. 语义分析"></a>3. 语义分析</h2><p>接下来进行的是语义分析，由<strong>语义分析器（Semantic Analyser）</strong>来完成。语法分析仅仅是完成了对表达式的语法层面的分析，但是它并不了解<strong>这个语句是否真正有意义</strong>。比如C语言里面两个指针做乘法运算是没有意义的，但是这个语句在语法上是合法的。<strong>编译器所能分析的语义是静态语义（Static Semantic）</strong>，所谓<strong>静态语义是指在编译器可以确定的语义，与之对应的动态语义（Dynamic Semantic）就是只有在运行期才能确定的语义。</strong></p>
<p><strong>静态语义通常包括声明和类型的匹配，类型的转换</strong>。比如当一个浮点型的表达式赋值给一个整型的表达式时，其中隐含了一个浮点型到整型转换的过程，语义分析过程中需要完成这个步骤。比如将一个浮点型赋值给一个指针的时候，语义分析程序会发现这个类型不匹配，编译器将会报错。动态语义一般指在运行期出现的语义相关的问题，比如将0作为除数。</p>
<p>经过语义分析阶段以后，整个语法树的表达式都被标识了类型，如果有些类型需要做隐式转换，语义分析程序会在语法树中插入相应的转换节点。上面描述的语法树在经过语义分析阶段以后就成了如图所示的形式：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216124101744.png" alt="image-20211216124101744"></p>
<p>可以看到，每个表达式（包括符号和数字）都被表示了类型。我们例子中几乎所有表达式都是整型的，所以无须做转换，整个分析过程十分顺利。语义分析器还对符号表里的符号类型也做了更新。</p>
<h2 id="4-中间语言生成"><a href="#4-中间语言生成" class="headerlink" title="4. 中间语言生成"></a>4. 中间语言生成</h2><p>现代的编译器有着很多层次的优化，往往在源码级别会有一个优化过程。我们这里所描述的<strong>源码级优化器（Source Code Optimizer）</strong>在不同编译器可能会有不同的定义或有一些其它的差异。在上例中，（2+6）这个表达式可以被优化掉，因为它的值在编译器就可以被确定。类似的还有很多其它复杂的优化过程，经过优化的语法树如图所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216124147236.png" alt="image-20211216124147236"></p>
<p>我们看到（2+6）这个表达式被优化成8。其实直接在语法树上做优化比较困难，所以源代码优化器往往将整个语法树转换成<strong>中间代码（Intermediate Code）</strong>，<strong>它是语法树的顺序表示</strong>，其实它已经非常接近目标代码了。但是它<strong>一般跟目标机器和运行时环境是无关的</strong>，比如它不包含数据的尺寸、变量地址和寄存器的名字等。中间代码有很多种类型，在不同的编译器中有着不同的形式，比较常见的有：<strong>三地址码（Three-address Code）和P-代码（P-Code）</strong>。我们就拿最常见的三地址码来作为例子，最基本的三地址码是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x = y op z</span><br></pre></td></tr></table></figure>

<p>这个三地址码表示将变量y和z进行op操作以后，赋值给x。这里op操作可以是算数运算，比如加减乘除等，也可以是其它人任何可以应用到y和z的操作。三地址码也得名于此，因为一个三地址码语句里面有三个变量地址。我们上面的语法树可以被翻译成三地址码后是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t1 = <span class="number">2</span> + <span class="number">6</span></span><br><span class="line">t2 = index + <span class="number">4</span></span><br><span class="line">t3 = t2 * t1</span><br><span class="line"><span class="built_in">array</span>[index] = t3</span><br></pre></td></tr></table></figure>

<p>我们可以看到，为了使所有的操作都符合三地址码形式，这里利用了几个临时便变量。在三地址码的基础上进行优化时，优化程序会将2+6的结果计算出来，得到t1 = 6。经过优化的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">t2 = index + <span class="number">4</span></span><br><span class="line">t2 = t2 * <span class="number">8</span></span><br><span class="line"><span class="built_in">array</span>[index] = t2</span><br></pre></td></tr></table></figure>

<p>中间代码使得编译器可以被分成<strong>前端和后端</strong>。编译器<strong>前端负责产生机器无关的中间代码</strong>，编译器<strong>后端将中间代码转换成目标机器代码</strong>。这样对于一些可以跨平台的编译器而言，它们可以针对不同的平台使用同一个前端和针对不同机器平台的数个后端。</p>
<h2 id="5-目标代码生成与优化"><a href="#5-目标代码生成与优化" class="headerlink" title="5. 目标代码生成与优化"></a>5. 目标代码生成与优化</h2><p>源代码级优化器产生中间代码标志着下面的过程都属于编辑器后端<strong>。编译器后端主要包括代码生成器（Code Generator）和目标代码优化器（Target Code Optimizer）</strong>。</p>
<p>代码生成器将中间代码转换成目标机器代码，这个过程十分依赖于目标机器，因为不同的机器有着不同的字长、寄存器、整数数据类型和浮点数数据类型等。对于上面例子中的中间代码，代码生成器可能会生成下面的代码序列（我们用x86汇编语言来表示，并且假设index的类型为int型，array的类型为int型数组）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl index, %ecx				; value of index to ecx</span><br><span class="line">addl $4, %ecx					; ecx = ecx + 4</span><br><span class="line">mull $8, %ecx					; ecx = ecx * 8</span><br><span class="line">movl index, %eax				; value of index to eax</span><br><span class="line">movl %ecx, array(, eax, 4)		; array[index] = ecx</span><br></pre></td></tr></table></figure>

<p>最后目标代码优化器对上述的目标代码进行优化，比如选择合适的寻址方式、使用位移来代替乘法运算、删除多余的指令等。上面的例子中，乘法由一条相对复杂的<strong>基址比例变址寻址（Base Index Scale Addressing）</strong>的lea指令完成，随后由一条mov指令完成最后的赋值操作，这条mov指令的寻址方式与lea是一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl index, %edx</span><br><span class="line">leal 32(, %edx, 8), %eax</span><br><span class="line">movl %eax, array(, %edx, 4)</span><br></pre></td></tr></table></figure>

<p>现代的编译器有着异常复杂的结构，这是因为现代高级编程语言本身非常复杂，另外现代的计算机CPU相当复杂，为了支持这些复杂性，编译器的机器指令优化过程也变得十分复杂。使得编译过程更为复杂的是有些编译器支持多种硬件平台，即允许编译器编译出多种目标CPU的代码。比如著名的GCC编译器就支持几乎所有CPU平台，这也导致了编译器的指令生成过程更为复杂。</p>
<p>经过这些扫描、语法分析、语义分析、源代码优化、代码生成和目标代码优化，编译器忙活了这么多个步骤之后，源代码终于被编译成了目标代码。但是这个目标代码中有一个问题是：index和array的地址还没有确定。如果我们要把目标代码使用汇编器编译成真正能够在机器上执行的指令，那么index和array的地址应该从哪儿得到？如果index和array定义在跟上面的源代码同一个编译单元里面，那么编译器可以为index和array分配空间，确定它们的地址；那如果是定义在其它的程序模块呢？</p>
<p>这个看似简单的问题引出了一个很大的话题：目标代码中有变量定义在其它模块，该怎么办？事实上，定义其它模块的全局变量和函数在最终运行时的绝对地址都要在最终链接的时候才能确定。所以现<strong>代的编译器可以将一个源代码文件编译成一个未链接的目标文件，然后由链接器最终将这些目标文件链接起来形成可执行文件</strong>。</p>
]]></content>
  </entry>
  <entry>
    <title>编译和链接</title>
    <url>/2021/12/14/Compilers-%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>对于平常的应用程序开发，我们很少需要关注编译和链接过程，因为通常的开发环境都是流行的集成开发环境（IDE），比如Visual Studio、IDEA等。这样的IDE一般都将编译和链接的过程一步完成，通常将这种编译和链接合并到一起的过程称为构建（Build）。即使使用命令行来编译一个源代码文件，简单的一句”gcc hello.c“命令就包含了非常复杂的过程。</p>
<h1 id="被隐藏了的过程"><a href="#被隐藏了的过程" class="headerlink" title="被隐藏了的过程"></a>被隐藏了的过程</h1><p>C语言的经典，”HelloWorld“程序几乎是每个程序员闭着眼睛都能写出的，编译运行通过一气呵成，基本成了程序入门和开发环境测试的默认的标准。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Linux下，当我们使用GCC来编译HelloWorld程序时，只须使用最简单的命令：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214232500974.png" alt="image-20211214232500974"></p>
<p>事实上，上述过程可以分解为4个步骤，分别是预处理（Prepressing）、编译（Compilation）、汇编（Assembly）和链接（Linking），如图所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214233130580.png" alt="image-20211214233130580"></p>
<h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h2><p>首先是源代码文件hello.c和相关的头文件，如stdio.h等被与编译器cpp预编译成一个.i文件。第一步预编译的过程相当于如下命令（-E表示只进行预编译）：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214233646816.png" alt="image-20211214233646816"></p>
<p>预编译过程主要处理那些源代码文件中的以”#“开始的预编译命令。比如”#include“、”#define“等，主要处理规则如下：</p>
<ul>
<li>将所有的”#define“删除，并且展开所有的宏定义。</li>
<li>处理所有条件预编译指令，比如”#if“、”#ifdef“、”#elif“、“#else”、“#endif”。</li>
<li>处理“#include”预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其它文件。</li>
<li>删除所有的注释。</li>
<li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号。</li>
<li>保留所有的#pragma编译器指令，因为编译器需要使用它们。</li>
</ul>
<p>经过预编译后的.i文件不包含任何宏定义，因为所有的宏已经被展开，并且包含的文件也已经被插入到.i文件中。所以当我们无法判断宏定义是否正确或头文件包含是否正确时，可以查看预编译后的文件来确定问题。</p>
<h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h2><p>编译过程就是把与处理完的文件进行一系列词法分析、语法分析、语义分析及优化后产生相应的汇编代码文件，这个过程往往是我们所说的整个程序构建的核心部分，也是最复杂的部分之一。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214234539174.png" alt="image-20211214234539174"></p>
<p>现在版本的GCC把预编译和编译两个步骤合并成一个步骤，使用一个叫cc1的程序来完成这两个步骤。这个程序位于/usr/lib/gcc/x86_64-linux-gnu/9/cc1”，我们也可以直接调用ccl来完成它：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214235219782.png" alt="image-20211214235219782"></p>
<p>对于C语言的代码来说，这个预编译和编译的程序是cc1，对于C++来说，有对应的程序叫做cc1plus；Objective-C是cc1obj；Java是jc1。所以实际上gcc这个命令只是这些后台程序的包装，它会根据不同的参数要求去调用预编译和编译程序cc1、汇编器as、链接器ld。</p>
<h2 id="3-汇编"><a href="#3-汇编" class="headerlink" title="3. 汇编"></a>3. 汇编</h2><p>汇编器是将汇编代码转变成机器可以执行的指令，每个汇编语句几乎都对应一条机器指令。所以汇编器的汇编过程相对于编译器来讲比较简单，它没有复杂的语法，也没有语义，也不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译就可以了。这个汇编过程我们可以用汇编器as来完成：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214235945685.png" alt="image-20211214235945685"></p>
<p>或者：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211215000126851.png" alt="image-20211215000126851"></p>
<p>或者使用gcc命令从C源代码文件开始，经过预编译、编译和汇编直接输出目标文件：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211215000221604.png" alt="image-20211215000221604"></p>
<h2 id="4-链接"><a href="#4-链接" class="headerlink" title="4. 链接"></a>4. 链接</h2><p>链接通常是一个让人比较费解的过程，为什么汇编器不直接输出可执行文件而是输出一个目标文件呢？链接过程到底包含了什么内容？为什么要链接？下面让我们来看看怎么样调用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ld -static /usr/lib/crtl.o /usr/lib/crti.o /usr/lib/gcc/x86_64-linux-gnu/9/crtbeginT.o -L /usr/lib/gcc/x86_64-linux-gnu/9/ -L /usr/lib -L /lib hello.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/x86_64-linux-gnu/9/crtend.o /usr/lib/crtn.o</span><br></pre></td></tr></table></figure>

<p>如果把所有的路径都省略掉，那么上面的命令就是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ld -staic crtl.o crti.o crtbeginT.o hello.o -start-group -lgcc -lgcc_eh -lc -end-group crtend.o crtn.o</span><br></pre></td></tr></table></figure>

<p>可以看到，我们需要将一大堆文件连接起来才可以得到“a.out”，即最终的可执行文件。至于crtl.o、crti.o、crtbeginT.o、crtend.o、crtn.o这些文件是什么？它们做什么用的？-lgcc -lgcc_eh -lc这些都是什么参数？为什么要使用它们？为什么要将它们和hello.o链接起来才可以得到可执行文件？等等。这里不做详细赘述。</p>
]]></content>
  </entry>
  <entry>
    <title>InnoDB体系架构</title>
    <url>/2021/12/14/MySQL-InnoDB%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214221614973.png" alt="image-20211214221614973"></p>
<p>图中显示了InnoDB的存储引擎的体系结构，InnoDB存储引擎有多个内存块，可以认为这些内存块组成了一个大的内存池，负责如下工作：</p>
<ul>
<li>维护所有进程/线程需要访问的多个内部数据结构。</li>
<li>缓存磁盘上的数据，方便快速地读取，同时在对磁盘文件的数据修改之前在这里缓存。</li>
<li>重做日志缓冲。</li>
</ul>
<p>后台线程的主要作用是负责刷新内存池中的数据，保证缓冲池的内存缓存的是最近的数据。此外将已修改的数据文件刷新到磁盘文件，同时保证在数据库发生异常的情况下InnoDB能恢复到正常运行状态。</p>
<h1 id="1-后台进程"><a href="#1-后台进程" class="headerlink" title="1. 后台进程"></a>1. 后台进程</h1><p>InnoDB存储引擎是多线程的模型，因此其后台有多个不同的后台线程，负责处理不同的任务。</p>
<h2 id="1-1-Master-Thread"><a href="#1-1-Master-Thread" class="headerlink" title="1.1 Master Thread"></a>1.1 Master Thread</h2><p>Master Thread是一个非常核心的后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新、合并插入缓冲（INSERT BUFFER）、UNDO页的回收等。</p>
<h2 id="1-2-IO-Thread"><a href="#1-2-IO-Thread" class="headerlink" title="1.2 IO Thread"></a>1.2 IO Thread</h2><p>在InnoDB存储引擎中大量使用了AIO（Async IO）来处理写IO请求，这样可以极大提高数据库的性能。而IO Thread的工作主要是负责这些IO请求的回调处理。</p>
<p>在InnoDB1.0版本之前共有4个IO Thread，分别是write、read、insert buffer和log IO thread。在Linux平台下，IO Thread的数量不能进行调整，但是在Windows平台下可以通过参数innodb_file_io_threads来增大IO Thread。从InnoDB 1.0x版本开始，read thread和write thread分别增大到了4个，并且不再使用innodb_file_io_threads参数，而是分别使用innodb_read_threads和innodb_write_io_threads参数进行设置：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216200735287.png" alt="image-20211216200735287"></p>
<p>可以通过命令show engine innodb status来观察InnoDB中的IO Thread：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status;</span><br><span class="line"></span><br><span class="line">| Type   | Name | Status</span><br><span class="line"></span><br><span class="line">| InnoDB |      |</span><br><span class="line">=====================================</span><br><span class="line">2021-12-16 20:08:28 0x5d40 INNODB MONITOR OUTPUT</span><br><span class="line">=====================================</span><br><span class="line">Per second averages calculated from the last 26 seconds</span><br><span class="line">......</span><br><span class="line">--------</span><br><span class="line">FILE I/O</span><br><span class="line">--------</span><br><span class="line">I/O thread 0 state: wait Windows aio (insert buffer thread)</span><br><span class="line">I/O thread 1 state: wait Windows aio (log thread)</span><br><span class="line">I/O thread 2 state: wait Windows aio (read thread)</span><br><span class="line">I/O thread 3 state: wait Windows aio (read thread)</span><br><span class="line">I/O thread 4 state: wait Windows aio (read thread)</span><br><span class="line">I/O thread 5 state: wait Windows aio (read thread)</span><br><span class="line">I/O thread 6 state: wait Windows aio (write thread)</span><br><span class="line">I/O thread 7 state: wait Windows aio (write thread)</span><br><span class="line">I/O thread 8 state: wait Windows aio (write thread)</span><br><span class="line">I/O thread 9 state: wait Windows aio (write thread)</span><br><span class="line">......</span><br><span class="line">----------------------------</span><br><span class="line">END OF INNODB MONITOR OUTPUT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到IO Thread 0为insert buffer thread。IO Thread 1为log thread。之后就是根据参数innodb_read_threads和innodb_write_io_threads来设置的读写线程，并且读线程的ID总是小于写线程的。</p>
<h2 id="1-3-Purge-Thread"><a href="#1-3-Purge-Thread" class="headerlink" title="1.3 Purge Thread"></a>1.3 Purge Thread</h2><p>事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页。</p>
<p>从InnoDB 1.2版本开始，InnoDB支持多个Purge Thread，这样做的目的是为了进一步加快undo页的回收。同时由于Purge Thread需要离散地读取undo页，这样也能更进一步利用磁盘的随机读取性能。如用户可以设置4个Purge Thread：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216201354742.png" alt="image-20211216201354742"></p>
<h2 id="1-4-Page-Cleaner-Thread"><a href="#1-4-Page-Cleaner-Thread" class="headerlink" title="1.4 Page Cleaner Thread"></a>1.4 Page Cleaner Thread</h2><p>Page Cleaner Thread是在InnoDB 1.2.x版本中引入的。其作用是将之前版本中脏页的刷新操作都放入到单独的线程中来完成。而其目的是为了减轻原Master Thread的工作以及对于用户查询线程的阻塞，进一步提高InnoDB存储引擎的性能。</p>
<h1 id="2-内存"><a href="#2-内存" class="headerlink" title="2. 内存"></a>2. 内存</h1><h2 id="2-1-缓冲池"><a href="#2-1-缓冲池" class="headerlink" title="2.1 缓冲池"></a>2.1 缓冲池</h2><p>InnoDB存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理。因此可将其视为基于磁盘的数据库系统（Disk-base Database）。在数据库系统中，由于CPU速度与磁盘速度之间的鸿沟，基于磁盘的数据库系统通常使用缓冲池技术来提高数据库的整体性能。</p>
<p>缓冲池简单来说就是一块内存区域，通过内存速度来弥补磁盘速度慢对数据库性能的影响。在数据库中进行读取页的操作，首先将从磁盘读到的页存放到缓冲池中，这个过程称为将页”FIX“在缓冲池中。下一次再读相同的页时，首先判断缓冲池中是否有该页。若在，称该页在缓冲池中被命中，直接读取该页；否则，读取磁盘上的页。</p>
<p>对于数据库中页的的修改操作，则首先刷新在缓冲池中的页，然后再以一定频率刷新的磁盘上。需要注意的是，页从缓冲池刷新到磁盘上并不是在页每次发生修改时，而是通过一种称为Checkpoint的机制刷新会磁盘。同样也是为了提高数据库的整体性能。</p>
<p>对于InnoDB存储引擎而言，其缓冲池的配置通过参数innodb_buffer_pool_size来设置：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216204300389.png" alt="image-20211216204300389"></p>
<p>具体来看，缓冲池中缓存的数据页类型有：索引页、数据页、undo页、插入缓冲（insert buffer）、自适应哈希索引（adaptive hash index）、InnoDB存储的锁信息（lock info）、数据字典信息（data dictionary）等。不能简单认为：缓冲池只是缓冲索引页和数据页，它们只是占缓冲池很大的一部分而已。如图显示了InnoDB存储引擎中内存的结构情况：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216205758868.png" alt="image-20211216205758868"></p>
<p>从InnoDB 1.0.x版本开始，允许有多个缓冲池实例。每个页根据哈希值平均分配到不同缓冲池实例中。这样做的好处是减少数据库内部的资源竞争，增加数据库的并发处理能力。可以通过参数innodb_buffer_pool_instances来进行配置，该值默认为1：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216210013503.png" alt="image-20211216210013503"></p>
<p>在配置文件中将innodb_buffer_pool_instances设置为大于1的值就可以得到多个缓冲池实例。再通过show engine innodb status可以观察到如下的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status;</span><br><span class="line">......</span><br><span class="line">----------------------</span><br><span class="line">BUFFER POOL AND MEMORY</span><br><span class="line">----------------------</span><br><span class="line">Total large memory allocated 137297920</span><br><span class="line">Dictionary memory allocated 99230</span><br><span class="line">Buffer pool size   8192</span><br><span class="line">Free buffers       7680</span><br><span class="line">Database pages     510</span><br><span class="line">Old database pages 0</span><br><span class="line">Modified db pages  0</span><br><span class="line">Pending reads      0</span><br><span class="line">Pending writes: LRU 0, flush list 0, single page 0</span><br><span class="line">Pages made young 0, not young 0</span><br><span class="line">0.00 youngs/s, 0.00 non-youngs/s</span><br><span class="line">Pages read 476, created 34, written 36</span><br><span class="line">0.00 reads/s, 0.00 creates/s, 0.00 writes/s</span><br><span class="line">No buffer pool page gets since the last printout</span><br><span class="line">Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s</span><br><span class="line">LRU len: 510, unzip_LRU len: 0</span><br><span class="line">I/O sum[0]:cur[0], unzip sum[0]:cur[0]</span><br><span class="line">......</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>从MySQL 5.6版本开始，还可以通过information_schema架构下的表INNODB_BUFFER_POOL_STATS来观察缓冲的状态：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216212001753.png" alt="image-20211216212001753"></p>
<h2 id="2-2-LRU-List、Free-List和Flush-List"><a href="#2-2-LRU-List、Free-List和Flush-List" class="headerlink" title="2.2 LRU List、Free List和Flush List"></a>2.2 LRU List、Free List和Flush List</h2><p>在上面的介绍中，我们知道了缓冲池是一个很大的内存区域，里面存放着各种类型的页。那么InnoDB是如何对这么大的内存区域进行管理的呢？</p>
<p>通常来说，数据库中的缓冲池是通过LRU（Latest Recent Used，最近最少使用）算法来进行管理的。即最频繁使用的页在LRU列表的前面。当缓冲池不能存放新读取到的页时，将首先释放LRU列表中尾端的页。</p>
<p>在InnoDB存储引擎中，缓冲池中页的大小默认为16KB，同样使用LRU算法对缓冲池进行管理。稍有不同的是对传统的LRU算法做了一些优化。在InnoDB中，LRU列表中还加入了midpoint位置。新读取到的页，虽然是最新访问的页，但并不是直接放入LRU的首部，而是放入LRU列表的midpoint位置。这个算法在InnoDB存储引擎下称为midpoint insertion strategy。在默认配置下，该位置在LRU列表长度的5/8处。midpoint位置可由参数innodb_old_blocks_pct控制：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216220939693.png" alt="image-20211216220939693"></p>
<p>在这里，参数的值为37，表示新读取的页插入到LRU列表尾端的37%的位置（差不多3/8的位置）。在InnoDB存储引擎中，把midpoint之后的列表称为old列表，之前的列表称为new列表。可以简单地理解为new列表中的页都是最为活跃的热点数据。</p>
<p>那为什么不采用原始的LRU算法，直接放到首部呢？这是因为若直接将读取到的页放入首部，那么某些SQL操作可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。常见的这类操作为索引或数据的扫描操作。这类操作需要访问表中的许多页，甚至是全部的页，而这些页通常来说又仅在这次查询操作中需要，并不是活跃的热点数据。</p>
<p>为了解决这个问题，InnoDB引入了另一个参数innodb_old_blocks_time来进一步管理LRU列表，表示页读取到mid位置后需要等待多久才会被加入到LRU列表的热端。因此当需要执行上述所说的SQL操作时，可以通过下面的方法尽可能使LRU列表中热点数据不被刷出：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216222024115.png" alt="image-20211216222024115"></p>
<p>如果用户预估自己活跃的热点数据不止63%，那么在执行SQL语句前，还可以通过下面语句来减少热点页可能被刷出的概率：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216222130553.png" alt="image-20211216222130553"></p>
<p>LRU列表用来管理已经读取的页，但当数据库刚启动时，LRU列表是空的。这时页都存放在Free列表中。当需要从缓冲池中分页时，首先从Free列表中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU中。否则，根据LRU算法，淘汰LRU末尾的页，将该内存空间分配给新的页。当页从LRU列表的old部分加入到new部分时，称此时发生的操作为page made young，而因为innodb_old_blocks_time的设置而导致页没有从old部分移动到new部分的操作称为page not made young。可以通过show engine innodb status来观察LRU列表及Free列表的使用情况和运行状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status;</span><br><span class="line">| InnoDB |      |</span><br><span class="line">=====================================</span><br><span class="line">2021-12-16 22:26:24 0x5d40 INNODB MONITOR OUTPUT</span><br><span class="line">=====================================</span><br><span class="line">Per second averages calculated from the last 34 seconds</span><br><span class="line">......</span><br><span class="line">----------------------</span><br><span class="line">BUFFER POOL AND MEMORY</span><br><span class="line">----------------------</span><br><span class="line">......</span><br><span class="line">Buffer pool size   8192</span><br><span class="line">Free buffers       7680</span><br><span class="line">Database pages     510</span><br><span class="line">Old database pages 0</span><br><span class="line">Modified db pages  0</span><br><span class="line">Pending reads      0</span><br><span class="line">Pending writes: LRU 0, flush list 0, single page 0</span><br><span class="line">Pages made young 0, not young 0</span><br><span class="line">0.00 youngs/s, 0.00 non-youngs/s</span><br><span class="line">Pages read 476, created 34, written 36</span><br><span class="line">0.00 reads/s, 0.00 creates/s, 0.00 writes/s</span><br><span class="line">No buffer pool page gets since the last printout</span><br><span class="line">Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s</span><br><span class="line">LRU len: 510, unzip_LRU len: 0</span><br><span class="line">I/O sum[0]:cur[0], unzip sum[0]:cur[0]</span><br><span class="line">......</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>通过命令可以看到：当前Buffer pool size共有8192个页，即8192*16K，总共0.125GB的缓冲池。Free buffers表示当前Free列表中页的数量，Database pages表示LRU列表中页的数量。可能的情况是Free buffers与Database pages的数量之和不等于Buffer pool size。就像上图所示的那样，因为缓冲池中的页还可能会被分配给自适应哈希索引、lock信息、Insert Buffer等页，而这部分页不需要LRU算法进行维护，因此不存在于LRU列表中。</p>
<p>pages made young显示了LRU列表中页移动到前端的次数，因为该服务器在运行阶段没有改变innodb_old_blocks_time的值，因此not young为0。youngs/s、non-youngs/s表示每秒这两类操作的次数。</p>
<p>从InnoDB 1.2版本开始，还可以通过表innodb_buffer_pool_stats来观察缓冲池的运行状态：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216224427564.png" alt="image-20211216224427564"></p>
<p>此外，还可以通过表innodb_buffer_page_lru来观察每个LRU列表中每个页的具体信息，例如通过下面的语句可以看到缓冲池LRU列表中space为443的表的页类型：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216225001890.png" alt="image-20211216225001890"></p>
<p>InnoDB存储引擎从1.0.x版本开始支持压缩页的功能，即将原本16KB的页压缩为1KB、2KB、4KB和8KB。而由于页的大小发生了变化，LRU列表也有了些许的改变。对于非16KB的页，是通过unzip_LRU列表进行管理的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine innodb status;</span><br><span class="line">| InnoDB |      |</span><br><span class="line">=====================================</span><br><span class="line">2021-12-16 22:26:24 0x5d40 INNODB MONITOR OUTPUT</span><br><span class="line">=====================================</span><br><span class="line">Per second averages calculated from the last 34 seconds</span><br><span class="line">......</span><br><span class="line">----------------------</span><br><span class="line">BUFFER POOL AND MEMORY</span><br><span class="line">----------------------</span><br><span class="line">......</span><br><span class="line">LRU len: 510, unzip_LRU len: 0</span><br><span class="line">......</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到LRU列表中一共有510个页，而unzip_LRU列表中没有页。这里需要注意的是，LRU中的页包含了unzip_LRU列表中的页。</p>
<p>对于压缩页的表，每个表的压缩比率可能各不相同。可能存在有的表页大小为8KB，有的表页大小为2KB的情况。unzip_LRU是怎样从缓冲池中分配内存的呢？</p>
<p>首先，在unzip_LRU列表中对不同压缩页大小的页进行分别管理。其次，通过伙伴算法进行内存的分配。例如对需要从缓冲池中申请页为4KB的大小，其过程如下：</p>
<ol>
<li>检查4KB的unzip_LRU列表，检查是否有可用的空闲页；</li>
<li>若有，则直接使用；</li>
<li>否则，检查8KB的unzip_LRU列表；</li>
<li>若能够得到空闲页，将页分成2个4KB页，再进行存放；</li>
<li>不能，从LRU列表中申请一个16KB的页，将页分为一个8KB和两个4KB的页，分别存放到对应的unzip_LRU列表中。</li>
</ol>
<p>同样，可以通过information_schema架构下的表innodb_buffer_page_lru来观察unzip_LRU列表中的页：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216230809187.png" alt="image-20211216230809187"></p>
<p>在LRU列表中的页被修改后，称该页为脏页（dirty page），即缓冲池中的页和磁盘上的页数据产生了不一致。这时数据库会通过checkpoint机制将脏页刷新回磁盘，而Flush列表中的页即为脏页列表。需要注意的是，脏页既存在于LRU列表中，也存在于Flush列表中。LRU列表用来管理缓冲池中也的可用性，Flush列表用来管理将也刷新回磁盘，二者互不影响。</p>
<p>同LRU列表一样，Flush列表也可以通过命令show engine innodb status来查看，前面例子中Modified db pages 0就显示了脏页的数量。information_schema架构下并没有类似innodb_buffer_page_lru的表来显示脏页的数量及脏页的类型，但正如前面说的，脏页同样存在于LRU列表中，我们可以通过加入oldest_modification大于0的SQL查询条件：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216231543226.png" alt="image-20211216231543226"></p>
<p>可以看到当前没有脏页。</p>
<h2 id="2-3-重做日志缓冲"><a href="#2-3-重做日志缓冲" class="headerlink" title="2.3 重做日志缓冲"></a>2.3 重做日志缓冲</h2><p>在上面的图中可以看到，InnoDB存储引擎的内存区域除了有缓冲池外，还有重做日志缓冲（redo log buffer）。InnoDB首先将重做日志信息先放入到这个缓冲区，然后按一定频率将其刷新到重做日志文件。重做日志缓冲一般不需要设置得很大，因为一般情况下每一秒钟会将重做日志缓冲刷新到日志文件，因此用户只需要保证每秒产生得事务量在这个缓冲大小即可。该值可由innodb_log_buffer_size控制，默认为16MB。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211216232025773.png" alt="image-20211216232025773"></p>
<p>在通常情况下，16MB的重做日志缓冲池足以满足绝大部分的应用，因为重做日志在下列三种情况下会将重做日志缓冲中的内容刷新到外部磁盘的重做日志文件中。</p>
<ul>
<li>Master Thread每一秒将重做日志缓冲刷新到重做日志文件；</li>
<li>每个事务提交时会将重做日志缓冲刷新到重做日志文件；</li>
<li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件。</li>
</ul>
<h2 id="2-4-额外的内存池"><a href="#2-4-额外的内存池" class="headerlink" title="2.4 额外的内存池"></a>2.4 额外的内存池</h2><p>在InnoDB存储引擎中，对内存的管理是通过一种称为内存堆（heap）的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。例如，分配了缓冲池（innodb_buffer_pool），但是每个缓冲池中的帧缓冲（frame buffer）还有对应的缓冲控制对象，这些对象记录了一些诸如LRU、锁、等待等信息，而这个对象的内存需要从额外内存池中申请。因此，在申请了很大的InnoDB缓冲池时，也应考虑相应地增加这个值。</p>
]]></content>
  </entry>
  <entry>
    <title>什么是因特网</title>
    <url>/2021/12/14/Network-001-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    <content><![CDATA[<p>在这里，我们使用一种特定的计算机网络，即公共因特网，作为讨论计算机网络及其协议的主要载体。关于什么是因特网这个问题，可以从两种方式来回答：其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件；其二，我们能够根据分布式应用提供服务的联网基础设施来描述因特网。</p>
<h1 id="1-具体构成描述"><a href="#1-具体构成描述" class="headerlink" title="1. 具体构成描述"></a>1. 具体构成描述</h1><p>因特网是一个世界范围的计算机网络，即它是一个互联了遍及全世界的数以亿计的计算设备的网络。所有这些设备都成为主机（host）或端系统（end system）。</p>
<p>端系统通过通信链路（communication link）和分组交换机（packet switch）连接到一起。不同的链路能够以不同的速率传输数据，链路的传输速率以比特/秒度量（bit/s，或bps）。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包用计算机网络的术语来说称为分组（packet）。这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p>
<p>分组交换机从它的一条入通信链路接收到达的分组，并从它的一条出通信链路转发该分组。现在，市面上最著名的两种分组交换机类型是路由器（router）和链路层交换机（link-layer switch）。链路层交换机通常用于接入网中，而路由器通常用于网络核心中。从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径（route或path）。</p>
<p>端系统通过因特网服务提供商（Internet Service Provider，ISP）接入因特网，包括如本地电缆或电话公司那样的住宅区ISP、公司ISP、大学ISP等等。每个ISP是一个由多个分组交换机和多段通信链路组成的网络。</p>
<p>端系统、分组交换机和其它因特网部件都要运行一系列协议（protocol），这些协议控制因特网中信息的接收和发送。TCP（Transmission Control Protocol，传输控制协议）和IP（Internet Protocol，网际协议）是因特网中两个最为重要的协议。IP协议定义了路由器和端系统之间发送和接收的分组格式。因特网的主要协议统称为TCP/IP。</p>
<p>鉴于因特网协议的重要性，每个人就各个协议及其作用取得一致认识是很重要的，这样人们就能够创造协同工作的系统和产品。这正是标准发挥作用的地方。因特网标准由因特网工程任务组研发（Internet Engineering Task Force，IETF）。IETF的标准文档称为请求评论（Request For Comment，RFC）。RFC最初是作为普通的请求评论，以解决因特网先驱者们面临的网络和协议问题。</p>
<h1 id="2-服务描述"><a href="#2-服务描述" class="headerlink" title="2. 服务描述"></a>2. 服务描述</h1><p>我们从为应用程序提供服务的基础设施的角度来描述因特网。这些应用程序包括电子邮件、Web冲浪、即时讯息、社交网络等。这些应用程序称为分布式应用程序（distributed application），因为它们涉及多台相互交换数据的端系统。重要的是，因特网应用程序运行在端系统上，即它们并不运行在网络核心中的分组交换机中。尽管分组交换机促进端系统之间的数据交换，但它们并不关心作为数据的源或宿的应用程序。</p>
<p>与因特网相连的端系统提供了一个应用程序编程接口（Application Programming Interface，API），该API规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的地软件交付数据的方式。因特网API是一套发送软件必须遵循的规则集合，因此因特网能够将数据交付给目的地。</p>
<blockquote>
<p>PS：关于什么是分组交换？什么是TCP/IP？什么是路由器？因特网正在使用什么样的通信链路？什么是分布式应用程序？一个烤箱或天气传感器怎样与因特网相连？将在后面解释这些重要的术语和问题。</p>
</blockquote>
<h1 id="3-什么是协议"><a href="#3-什么是协议" class="headerlink" title="3. 什么是协议"></a>3. 什么是协议</h1><p>下面考虑计算机网络中另一个重要的时髦术语：协议。什么是协议？协议是用来干什么的？</p>
<h2 id="3-1-人类活动的类比"><a href="#3-1-人类活动的类比" class="headerlink" title="3.1 人类活动的类比"></a>3.1 人类活动的类比</h2><p>我们先通过与某些人类活动进行类比，来更好的理解计算机网络协议的概念。考虑当你想要向某人询问时间的时候要怎么做？如图显示了一种典型的交互过程。人类协议要求一方首先进行问候，以开始和另一个人进行通信。对“你好”的典型响应是返回一个“你好”报文，隐含着你能继续向我询问时间。同样的，如果对我们回答“不要烦我”诸如此类的话则表示了一个勉强的或不能进行的通信。在这个情况下，按照人类协议，发话者也许不能够询问时间了。在某些时候，我们的“你好”得不到任何回答，那么，发话者通常会放弃向这个人询问时间。</p>
<p><img src="https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220112210944423.png" alt="image-20220112210944423"></p>
<p>如果人们使用了不同的协议（比如一个人讲礼貌，而另一个人不讲礼貌，或者一个人知道时间的概念，另一个不知道），该协议就不能互动，因而不能完成有用的工作。在网络中这个道理同样成立。即为了完成一项工作，要求两个（或多个）通信实体运行相同的协议。</p>
<h2 id="3-2-网络协议"><a href="#3-2-网络协议" class="headerlink" title="3.2 网络协议"></a>3.2 网络协议</h2><p> 网络协议类似于人类协议，除了交换报文和采取动作的实体是某些设备的硬件或软件组件。在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。</p>
<p>我们以一个计算机网络协议为例，当你向一个Web服务器发出请求时所发生的情况。首先，你的计算机将向该Web服务器发送一条连接请求报文，并等待回答。该Web服务器将最终能接收到连接请求报文，并返回一条连接响应报文。得知请求该Web文档正常以后，计算机则在一条GET报文中发送要从这台Web服务器上取回的网页的名字。最后，Web服务器向计算机返回该Web网页（文件）。</p>
<p>从上面的例子中我们可以看见，报文的交换以及发送和接收这些报文时所采取的动作是定义一个协议的关键元素：</p>
<blockquote>
<p>一个<strong>协议</strong>定义了在两个或多个通信实体之间交换的报文格式和次序，以及报文发送和/接收一条报文或其它事件所采取的动作。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>最快最简单的排序——桶排序</title>
    <url>/2021/12/14/Algorithm-%E6%9C%80%E5%BF%AB%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%8E%92%E5%BA%8F%E2%80%94%E2%80%94%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>生活中，排序可以说是无处不在。站队的时候会按身高排序，考试的时候按分数排序，购物的时候按价格排序……</p>
<p>我们来看一个具体需求：现在需要向控制台输入五个成绩（满分10分），并将成绩按从大到小排列后输出到控制台。（输入成绩5、3、5、2、8）</p>
<p>在这里我们只需要借助一个一维数组就可以解决问题。首先申请一个大小为11的数组 int arr[11]。刚开始的时候，我们将arr[0] ~ arr[10]都初始化为0，表示这些分数还都没有人得过。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214203726463.png" alt="image-20211214203726463"></p>
<p>下面开始处理每个人的分数，第一个人5分，我们将相对应的a[5]的值在原来的基础上加一，即a[5] = 1，表示5分出现过一次。同理类似，最后得到下列结果：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214203657932.png" alt="image-20211214203657932"></p>
<p>接下来，我们只需要将出现过的分数打印出来即可，出现几次打印几次，具体如下：</p>
<p>a[0] = 0，表示“0”没有出现过，不打印。</p>
<p>a[1] = 0，表示“1”没有出现过，不打印。</p>
<p>a[2] = 1，表示“2”出现过一次，打印2。</p>
<p>a[3] = 1，表示“3”出现过一次，打印3。</p>
<p>a[4] = 0，表示“4”没有出现过，不打印。</p>
<p>a[5] = 2，表示“5”出现过两次，打印5、5。</p>
<p>a[6] = 0，表示“6”没有出现过，不打印。</p>
<p>a[7] = 0，表示“7”没有出现过，不打印。</p>
<p>a[8] = 1，表示“8”出现过一次，打印8。</p>
<p>a[9] = 0，表示“9”没有出现过，不打印。</p>
<p>a[10] = 0，表示“10”没有出现过，不打印。</p>
<p>最终屏幕输出“2 3 5 5 8”，完整代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">int</span> arr[<span class="number">11</span>];</span><br><span class="line">  <span class="keyword">int</span> i, j, t;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环读入五个成绩</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    arr[t]++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将结果输出到控制台</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= arr[i]; j++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214204358363.png" alt="image-20211214204358363"></p>
<p>这种排序方法暂且叫它”桶排序“。因为其实真正的桶排序要比这个复杂一点，目前这个算法已经能够满足我们的需求了。</p>
<p>这个算法就好比有11个桶，编号从0~10。每出现一个数，就在对应编号的桶中放一个小旗子，最后只要数一下每个桶中有几个小旗子就OK了。</p>
<p>这样，如果我们需要对数据范围在0~1000的整数进行排序，我们需要1001个桶，来表示0-1000之间每个数出现的次数。</p>
<p>现在来说一下时间复杂度的问题。代码中第8行的循环一共循环了m次（m为桶的个数），第13行的代码循环了n次（n为待排序数的个数），第19行和20行一共循环了m+n次。所以整个排序算法一共执行了m+n+m+n次。用大O表示该算法的时间复杂度为O(M+N)。</p>
<p>这是一个非常快的排序算法。桶排序从1956年就开始被使用，该算法的基本思想是由E.J.Issac和R.C.Singleton提出来的。然而，我们现在实现的并非真正的桶排序算法，真正的桶排序算法要比这个更加复杂！</p>
]]></content>
  </entry>
  <entry>
    <title>永远的HelloWorld</title>
    <url>/2021/12/14/Compilers-%E6%B0%B8%E8%BF%9C%E7%9A%84HelloWorld/</url>
    <content><![CDATA[<p>毫无疑问，“HelloWorld”对于程序员来说简直是如雷贯耳。下面是一个C语言的HelloWorld程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于下面这些问题，你的脑子里能够马上反应出一个清晰又明确的答案吗？</p>
<ul>
<li>程序为什么要被编译器编译了之后才可以运行？</li>
<li>编译器在把C语言程序转换成可以执行的机器码的过程中做了什么，怎么做的？</li>
<li>最后编译出来的可执行文里面是什么？除了机器码还有什么？它们怎么存放的，怎么组织的？</li>
<li>/#include&lt;stdio.h&gt;是什么意思？把stdio.h包含进来意味着什么？C语言库又是什么？它怎么实现的？</li>
<li>不同的编译器（Microsoft VC、GCC）和不同的硬件平台（x86、SPARC、MIPS、ARM），以及不同的OS（Windows、Linux、UNIX、Solaris），最终编译出来的结果一样吗？为什么？</li>
<li>HelloWorld程序是怎么运行起来的？OS是怎么装载它的？它从哪儿开始执行，到哪儿结束？main函数之前发生了什么？main函数结束以后又发生了什么？</li>
<li>如果没有OS，HelloWorld可以运行吗？如果要在一台没有OS的机器上运行HelloWorld需要什么？应该怎么实现？</li>
<li>printf是怎么实现的？它为什么可以有不定数量的参数？为什么它能够在终端上输出字符串？</li>
<li>HelloWorld程序在运行时，它在内存中是什么样子的？</li>
</ul>
<p>在接下来的“程序员的自我修养”系列将逐个解决这些问题！</p>
<h2 id="1-万变不离其宗"><a href="#1-万变不离其宗" class="headerlink" title="1. 万变不离其宗"></a>1. 万变不离其宗</h2><p>对于系统程序开发者来说，计算机多如牛毛的硬件设备中，有三个部件最为关键，它们分别是<strong>中央处理器CPU、内存和I/O控制芯片</strong>，这三个部件几乎就是计算机的核心了；对于普通应用程序开发者来说，它们似乎除了要关心CPU以外，其它的硬件细节基本不用关心，对于一些高级平台的开发者来说，连CPU都不需要关心，因为这些平台为它们提供了一个通用的抽象的计算机，它们只要关心这个抽象的计算机就可以了。</p>
]]></content>
  </entry>
  <entry>
    <title>连接MySQL</title>
    <url>/2021/12/13/MySQL-%E8%BF%9E%E6%8E%A5MySQL/</url>
    <content><![CDATA[<p>连接MySQL操作是一个连接进程和MySQL数据库实例进行通信。从程序设计的角度来说，<strong>本质上是进程通信</strong>。如果对进程通信比较了解，可以知道常用的进程通信方式有管道、命名管道、命名字、TCP/IP套接字、UNIX域套接字。MySQL数据库提供的连接方式从本质上看都是上述提及的进程通信方式。</p>
<h2 id="1-TCP-IP"><a href="#1-TCP-IP" class="headerlink" title="1. TCP/IP"></a>1. TCP/IP</h2><p>TCP/IP套接字方式是MySQL数据库在任何平台下都提供的连接方式，也是网络中使用的最多的一种方式。这种方式在TCP/IP连接上建立一个基于网络的连接请求，一般情况下客户端（client）在一台服务器上，而MySQL实例（server）在另一台服务器上，这两台机器通过一个TCP/IP网络连接。例如，用户可以在Windows服务器下请求一台远程Linux服务器下的MySQL实例，如下所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213234830324.png" alt="image-20211213234830324"></p>
<p>这里我连的localhost本地的MySQL，如果要连接远程服务器只需要把localhost改成对应IP。</p>
<p>这里需要注意的是，在通过TCP/IP连接到MySQL实例时，MySQL数据库会先检查一张权限视图，用来判断发起请求的客户端IP是否允许连接到MySQL实例。该视图在mysql架构下，表名为user，如下所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213235547816.png" alt="image-20211213235547816"></p>
<h2 id="2-命名管道和共享内存"><a href="#2-命名管道和共享内存" class="headerlink" title="2. 命名管道和共享内存"></a>2. 命名管道和共享内存</h2><p>在Windows 2000、Windows XP、Windows 2003和Windows Vista以及在此之上的平台上，如果两个需要进程通信的进程在同一台服务器上，那么可以使用命名管道，Microsoft SQL Server数据库默认安装后的本地连接也是使用命名管道。在MySQL数据库中须在配置文件中启用 –enable-named-pipe 选项。在MySQL4.1之后的版本中，MySQL还提供了共享内存的连接方式，这是通过在配置文件中添加 –shared-memory实现的。如果想使用共享内存的方式，在连接时，MySQL客户端还必须使用 –protocol=memory选项。</p>
<h2 id="3-UNIX域套接字"><a href="#3-UNIX域套接字" class="headerlink" title="3. UNIX域套接字"></a>3. UNIX域套接字</h2><p>在Linux和UNIX环境下，还可以使用UNIX域套接字。UNIX域套接字其实不是一个网络协议，所以只能在MySQL客户端和数据库实例在一台服务器上的情况下使用。用户可以在配置文件中指定套接字文件的路径，如 –socket=/tmp/mysql.sock。当数据库实例启动后 ，用户可以通过下列命令来进行UNIX域套接字文件的查找：</p>
<p>在知道了UNIX域套接字文件的路径后，就可以使用该方式进行连接了，如下所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211214001744968.png" alt="image-20211214001744968"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -S /tmp/mysql.sock</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/2021/12/12/DesignPattern-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>工厂方法模式定义了一个用户创建对象的接口，让子类决定实例化哪一个类。工厂方法模式使一个类的实例化延迟到其子类。</p>
<p>在看到工厂方法时可能有这样的疑问：</p>
<ul>
<li>为什么要创建一个对象的接口？</li>
<li>为什么要把类实例化延迟到其子类？</li>
</ul>
<p>我们看一个具体实例：比如某人有一个习惯，在睡前吃一个水果，无论什么水果都行。水果本身是一个抽象的概念，比如有苹果、葡萄等。此人的习惯是任意水果都行，所以它不关心是哪一种水果的具体实现，如果让他执行每晚固定吃水果的程序时都确定哪一种水果，这是不现实的，每天家里能有的水果是不可知的，这就是工厂方法模式要解决的问题。</p>
<p>在编程活动中，对于一个大型的软件工程，一个行之有效的方案就是进行模块式的分解。每一个模块由大量的代码构成，此模块的功能被其它模块使用，使用的方式就是：</p>
<ul>
<li>实例化此模块</li>
<li>调用此模块功能</li>
</ul>
<p>注意这两个步骤中的第一步，在复杂的应用中会产生严重的副作用。模块的接口虽然不易变，但是各种具体实现的类及其需求是经常变化的。比如编码客户端的时候设计的用户按钮是方形的，但是交付客户的时候客户的需求改成了圆形，程序中创建的按钮有数万个，更改程序时就成了非常麻烦的事。</p>
<p>以上各种情形下所出现的棘手问题都可以由工厂方法模式解决。</p>
<h2 id="1-商品上架遇到的问题"><a href="#1-商品上架遇到的问题" class="headerlink" title="1. 商品上架遇到的问题"></a>1. 商品上架遇到的问题</h2><p>超市中有很多种商品，每种商品上架时都需要合适的货架来摆放。</p>
<p>现在我们使用软件实现商品上架，在以下的设计中，基本思路是为商品选择货架，而不是为货架选择商品，这是根据需求决定的设计方式。商品上架的流程是先拿到商品对象，创建一个可以容纳的货架空间，最后讲商品放入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleShelf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name  = <span class="string">&quot;普通货架类&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印货架名，货架类信息，所放商品信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot;(&quot;</span> + <span class="keyword">this</span> + <span class="string">&quot;)&quot;</span> + <span class="string">&quot;上摆放了：&quot;</span> + goods.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleShelfClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到商品</span></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(<span class="string">&quot;巧克力&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到货架</span></span><br><span class="line">        SampleShelf shelf = <span class="keyword">new</span> SampleShelf();</span><br><span class="line">        <span class="comment">// 上架</span></span><br><span class="line">        shelf.put(goods);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到商品</span></span><br><span class="line">        Goods goods1 = <span class="keyword">new</span> Goods(<span class="string">&quot;方便面&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到货架</span></span><br><span class="line">        SampleShelf shelf1 = <span class="keyword">new</span> SampleShelf();</span><br><span class="line">        <span class="comment">// 上架</span></span><br><span class="line">        shelf1.put(goods1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213221122918.png" alt="image-20211213221122918"></p>
<p>从代码和结果可以看出，我们需要商品就实例化一个商品，需要货架就实例化一个货架，从结果也可以看出，两个商品分别取得了不同的货架进行存放。</p>
<p>但是我们设想一下在这个系统设计出来以后有可能发生的事情：</p>
<ul>
<li>货架的使用应该具有可复用性，即如果一个货架没有装满的话，还可以用来装其它的货物。由于使用程序来装货物，所以货物不应该知道货架的细节。</li>
<li>每一种货物所摆放的货架是有要求的，不能任意用一种货架。</li>
<li>当使用代码大量增加时，如果再想做统一的操作，将会增加大量代码。</li>
<li>未来将会增加货架的种类，在此系统中，增加货架的种类势必增加货架类和改变使用的代码，使用代码和特定的货架是紧密耦合的。</li>
</ul>
<p>由以上的研究可以发现，简单的设计在需求的复杂性提高了后会出现问题，而工厂方法模式就是解决创建类问题的一种方法。</p>
<h2 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2. 简单工厂模式"></a>2. 简单工厂模式</h2><p>一个具体工厂通过条件语句创建多个产品，产品的创建逻辑集中在一个工厂类上。客户端通过传递不同的参数给工厂，实现创建不同产品的目的。增减新产品时，需要修改工厂类、增加产品类，这不符合OCP原则。</p>
<p>先看一下通常所见到的代码初步设计类图：</p>
<p><img src="C:/Users/pengbin007/AppData/Roaming/Typora/typora-user-images/image-20211213202048185.png" alt="image-20211213202048185"></p>
<p>这个图使用的结构类似于上面的商品上架的代码，这种设计所能造成的缺点我们已经讨论过了，下面看一下由此图进行的模式演化：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213202557212.png" alt="image-20211213202557212"></p>
<p>由图可见，设计中加入了一个抽象的层次Auto类，加入此抽象层次的好处是显而易见的，它帮助架构降低了Client类和各种具体车型之间的耦合度，而且符合了开-闭原则，如果以后需要加入其它车型，设计将变得很容易。</p>
<p>但是，此设计的缺点也是存在的，它并没有将客户端的构建具体依赖对象的代码和客户端的使用代码完全分开，这样就会对扩展性和功能性设计造成麻烦，请思考以下问题：</p>
<ul>
<li>客户所用的任何一部车都需要在使用前登记。</li>
<li>如果Car类车型没有了，使用Truck车型替代。</li>
<li>公司的Car类车全部换为SuperCar。</li>
</ul>
<p>如果采用简单工厂模式，则可以解决以上问题，如图：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213203646066.png" alt="image-20211213203646066"></p>
<p>图中各种元素如下：</p>
<ul>
<li>产品接口：Auto此接口用于描述各种具体的产品。</li>
<li>具体产品：Car、Bus、Truck。</li>
<li>静态工厂类：StaticFactory类中具有静态的工厂方法。</li>
<li>客户类：Client类调用静态工厂生产各种Auto的实现对象。</li>
</ul>
<p>具体代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用静态工厂创建对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Auto auto1 = StaticFactory.createAuto(<span class="number">1</span>);</span><br><span class="line">        auto1.run();</span><br><span class="line"></span><br><span class="line">        Auto auto2 = StaticFactory.createAuto(<span class="number">2</span>);</span><br><span class="line">        auto2.run();</span><br><span class="line"></span><br><span class="line">        Auto auto3 = StaticFactory.createAuto(<span class="number">4</span>);</span><br><span class="line">        auto3.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> <span class="keyword">extends</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Auto <span class="title">createAuto</span><span class="params">(<span class="keyword">int</span> autoId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(autoId) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bus();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Truck();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有这种车型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Auto</span> <span class="keyword">extends</span> <span class="title">StaticFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Auto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(<span class="string">&quot;轿车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动&quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Auto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(<span class="string">&quot;巴士&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动&quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Auto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Truck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(<span class="string">&quot;卡车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动&quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213204023931.png" alt="image-20211213204023931"></p>
<p>经过了以上的简单工厂模式的设计，可以发现它有以下几个方面的优点：</p>
<ol>
<li>用代码和具体使用类的耦合度降低。</li>
<li>令创建与使用的代码相分离，可以独立地变化，易于维护和扩展。</li>
<li>可以通过外部配置的方法将耦合度进一步降低。</li>
</ol>
<h2 id="3-工厂方法模式"><a href="#3-工厂方法模式" class="headerlink" title="3. 工厂方法模式"></a>3. 工厂方法模式</h2><p>简单工厂模式虽然有一定的优点，但是还是存在下面的不足：</p>
<ul>
<li><p>工厂实现的产品抽象，不具备复杂性。</p>
</li>
<li><p>工厂不具备抽象性。</p>
</li>
</ul>
<p>为了解决这些问题，GoF的设计模式中提出了工厂方法模式。解决方法就是将各种产品使用不同的工厂生产，各种工厂中的创建方法可以互相独立地改变，并将这些工厂类抽象出一个共同的父类，如下图：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213210920006.png" alt="image-20211213210920006"></p>
<p>工厂方法和简单工厂的区别在于其对工厂也做了一层抽象，不同的工厂负责生产不同的产品。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用静态工厂创建对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Factory factory;</span><br><span class="line">        Auto auto;</span><br><span class="line"></span><br><span class="line">        factory = <span class="keyword">new</span> BusFactory();</span><br><span class="line">        auto = factory.createAuto();</span><br><span class="line">        auto.run();</span><br><span class="line"></span><br><span class="line">        factory = <span class="keyword">new</span> CarFactory();</span><br><span class="line">        auto = factory.createAuto();</span><br><span class="line">        auto.run();</span><br><span class="line"></span><br><span class="line">        factory = <span class="keyword">new</span> TruckFactory();</span><br><span class="line">        auto = factory.createAuto();</span><br><span class="line">        auto.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">extends</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Auto <span class="title">createAuto</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Auto <span class="title">createAuto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Truck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Auto <span class="title">createAuto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TruckFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Auto <span class="title">createAuto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213211500428.png" alt="image-20211213211500428"></p>
<p>以上就是工厂方法模式的简单实现，分析其实现可以发现简单工厂模式的两种主要缺点已经被解决了，现在我们看工厂方法能实现而简单工厂不能实现的情况：</p>
<ul>
<li>对每一种生产出的产品实例做不同的操作。</li>
<li>增加一种完全不同类型的产品。</li>
<li>在不修改原有工厂类的情况下增加对新产品的支持。</li>
</ul>
<h2 id="4-使用工厂方法模式解决商品上架问题"><a href="#4-使用工厂方法模式解决商品上架问题" class="headerlink" title="4. 使用工厂方法模式解决商品上架问题"></a>4. 使用工厂方法模式解决商品上架问题</h2><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213214955812.png" alt="image-20211213214955812"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bed</span> <span class="keyword">extends</span> <span class="title">Goods</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setName(<span class="string">&quot;双人床&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setWidth(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shelf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shelfName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWidth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getShelfName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelfName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShelfName</span><span class="params">(String shelfName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shelfName = shelfName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxWidth</span><span class="params">(<span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxWidth = maxWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;将&quot;</span> + goods.getName() + <span class="string">&quot;放入&quot;</span> + <span class="keyword">this</span>.getShelfName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallShelf</span> <span class="keyword">extends</span> <span class="title">Shelf</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmallShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setShelfName(<span class="string">&quot;一种90cm的小货架&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setMaxWidth(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigShelf</span> <span class="keyword">extends</span> <span class="title">Shelf</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setShelfName(<span class="string">&quot;一种200cm的大货架&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setMaxWidth(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShelfFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWidth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxWidth</span><span class="params">(<span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxWidth = maxWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Shelf <span class="title">createShelf</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallShelfFactory</span> <span class="keyword">extends</span> <span class="title">ShelfFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmallShelfFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setMaxWidth(<span class="keyword">new</span> SmallShelf().getMaxWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shelf <span class="title">createShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmallShelf();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigShelfFactory</span> <span class="keyword">extends</span> <span class="title">ShelfFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigShelfFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setMaxWidth(<span class="keyword">new</span> BigShelf().getMaxWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shelf <span class="title">createShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigShelf();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlaceGoodsHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">placeGoods</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ShelfFactory&gt; shelfFactories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        shelfFactories.add(<span class="keyword">new</span> SmallShelfFactory());</span><br><span class="line">        shelfFactories.add(<span class="keyword">new</span> BigShelfFactory());</span><br><span class="line"></span><br><span class="line">        Shelf shelf;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(ShelfFactory shelfFactory : shelfFactories) &#123;</span><br><span class="line">            <span class="keyword">if</span>(shelfFactory.getMaxWidth() &gt;= goods.getWidth()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    shelf = shelfFactory.createShelf();</span><br><span class="line">                    shelf.put(goods);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到符合&quot;</span> + goods.getName() + <span class="string">&quot;尺寸的货架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Goods&gt; goods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        goods.add(<span class="keyword">new</span> Phone());</span><br><span class="line">        goods.add(<span class="keyword">new</span> TV());</span><br><span class="line">        goods.add(<span class="keyword">new</span> Bed());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;init already&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Goods good : goods) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PlaceGoodsHelper.placeGoods(good);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;放置货物完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211213215148107.png" alt="image-20211213215148107"></p>
<p>到此，我们已经可以使用工厂方法模式完全解决商品上架的问题了，但是，由于篇幅原因，有一些因素没有完全考虑到，读者可以自行扩展。部分扩展如下：</p>
<ul>
<li>考虑一个货架可以放多个货物的情况。</li>
<li>考虑商品防止的优先级的问题。</li>
<li>考虑更多类型的货架，如不同的形状和材质的货架。</li>
<li>考虑货物体积与货架空间相互作用引发的最优化放置问题。</li>
</ul>
<p>完整代码见我的码云仓库：<a href="https://gitee.com/pengzong888/blog">https://gitee.com/pengzong888/blog</a></p>
<h2 id="5-工厂方法模式的使用范围"><a href="#5-工厂方法模式的使用范围" class="headerlink" title="5. 工厂方法模式的使用范围"></a>5. 工厂方法模式的使用范围</h2><ul>
<li>当客户程序不需要知道要使用对象的创建过程时。</li>
<li>客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象时。</li>
<li>当客户想分离对象的创建和使用代码时。</li>
<li>当客户想集中管理创建代码时。</li>
<li>当客户需要使用的对象种类非常多，并且有扩展需求时。</li>
</ul>
<p>其优点在于分担了对象承受的压力，使结构变得灵活起来，并且符合开-闭原则。同样的可以看出工厂方法的加入，使得对象的数量成倍增长。当产品种类非常多时，会出现大量的与之对应的工厂对象，这不是我们希望的。</p>
<h2 id="6-简单工厂与其它模式的区别"><a href="#6-简单工厂与其它模式的区别" class="headerlink" title="6. 简单工厂与其它模式的区别"></a>6. 简单工厂与其它模式的区别</h2><ul>
<li>工厂方法模式与简单工厂模式在结构上的不同不是很明显。工厂方法模式的核心是一个抽象工厂类，而简单工厂模式把核心放在一个具体类上。</li>
<li>工厂方法模式之所以有一个别名叫多态性工厂模式是因为，具体工厂类都有共同的接口，或者有共同的抽象父类。</li>
<li>当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，这很好地符合了”开放——封闭“原则。而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。</li>
<li>工厂方法模式退化后可以演变成简单工厂模式。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java线程</title>
    <url>/2021/12/11/Java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-创建和运行线程"><a href="#1-创建和运行线程" class="headerlink" title="1. 创建和运行线程"></a>1. 创建和运行线程</h2>]]></content>
  </entry>
  <entry>
    <title>乐观锁 &amp; 悲观锁</title>
    <url>/2021/12/10/MyBatisPlus-%E4%B9%90%E8%A7%82%E9%94%81-%E6%82%B2%E8%A7%82%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>乐观锁对应于生活中乐观的人总是想着事情往好的方向发展，悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展。这两种人各有优缺点，不能以偏概全的说一种人好于另外一种人。</p>
</blockquote>
<h2 id="1-两种锁的使用场景"><a href="#1-两种锁的使用场景" class="headerlink" title="1. 两种锁的使用场景"></a>1. 两种锁的使用场景</h2><ul>
<li><p><strong>悲观锁</strong></p>
<p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁的实现。</p>
</li>
<li><p><strong>乐观锁</strong></p>
<p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断以下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量。像数据库提供的write_condition机制，其实就是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p>
</li>
</ul>
<p>乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，所以一般多写场景下用悲观锁。</p>
<h2 id="2-乐观锁常见的两种实现方式"><a href="#2-乐观锁常见的两种实现方式" class="headerlink" title="2. 乐观锁常见的两种实现方式"></a>2. 乐观锁常见的两种实现方式</h2><h3 id="2-1-版本号机制"><a href="#2-1-版本号机制" class="headerlink" title="2.1 版本号机制"></a>2.1 版本号机制</h3><p>一般是在数据库表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p>
<h3 id="2-2-CAS算法"><a href="#2-2-CAS算法" class="headerlink" title="2.2 CAS算法"></a>2.2 CAS算法</h3><p>即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数：</p>
<ul>
<li>需要读写的内存值 V</li>
<li>进行比较的值 A</li>
<li>拟写入的新值 B</li>
</ul>
<p>当且仅当V的值等于A时，CAS通过原子方式用新值来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p>
<h2 id="3-乐观锁的缺点"><a href="#3-乐观锁的缺点" class="headerlink" title="3. 乐观锁的缺点"></a>3. 乐观锁的缺点</h2><h4 id="3-1-ABA问题"><a href="#3-1-ABA问题" class="headerlink" title="3.1 ABA问题"></a>3.1 ABA问题</h4><p>ABA问题是乐观锁一个常见的问题。如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它依然是A值，那我们就一定能说明它的值没有被其它线程修改过吗?</p>
<p>很明显这是不能保证的。因为在这段时间它的值可能被其它线程改为其它值，然后又改回A，那么CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的”ABA“问题。JDK1.5以后的AtomicStampedReference类就提供了这种能力，其中的compareAndSet方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210142529751.png" alt="image-20211210142529751"></p>
<h4 id="3-2-循环时间开销大"><a href="#3-2-循环时间开销大" class="headerlink" title="3.2 循环时间开销大"></a>3.2 循环时间开销大</h4><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令由两个作用，第一它可以延迟流水线执行指令（de-pipeline），使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p>
<h4 id="3-3-只能保证一个共享变量的原子操作"><a href="#3-3-只能保证一个共享变量的原子操作" class="headerlink" title="3.3 只能保证一个共享变量的原子操作"></a>3.3 只能保证一个共享变量的原子操作</h4><p>CAS只对单个共享变量有效，当操作涉及跨多个共享变量时CAS无效。但是从JDK1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并称一个共享变量来操作。</p>
<h2 id="4-CAS与synchronized的使用场景"><a href="#4-CAS与synchronized的使用场景" class="headerlink" title="4.CAS与synchronized的使用场景"></a>4.CAS与synchronized的使用场景</h2><p>简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般比较多）</p>
<p>对于资源竞争较少的情况，使用synchronized同步锁进行线程阻塞、唤醒切换以及用户态内核态间的切换操作额外浪费、消耗CPU资源；而CAS基于硬件实现、不需要进入内核、不需要切换线程、操作自旋几率较少，因此可以获得更高的性能。</p>
<p>对于资源竞争严重的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。</p>
<blockquote>
<p>补充：Java并发编程这个领域中synchronized关键字一直都是元老级的角色，很久之前很多人都会称它为”<strong>重量级锁</strong>“。但是，在Java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的<strong>偏向锁</strong>和<strong>轻量级锁</strong>以及其它<strong>各种优化</strong>之后变得在某些情况下并不是那么重了。synchronized的底层实现主要依靠Lock-Free的队列，基本思路是：<strong>自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量</strong>。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突的情况下，性能远高于CAS。</p>
</blockquote>
<h2 id="5-使用MyBatisPlus乐观锁插件"><a href="#5-使用MyBatisPlus乐观锁插件" class="headerlink" title="5. 使用MyBatisPlus乐观锁插件"></a>5. 使用MyBatisPlus乐观锁插件</h2><h3 id="5-1-主要适用场景"><a href="#5-1-主要适用场景" class="headerlink" title="5.1 主要适用场景"></a>5.1 主要适用场景</h3><p>当要更新一条记录的时候，希望这条记录没有被别人更新。</p>
<p>实现方式：</p>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时，set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新不对</li>
</ul>
<h3 id="5-2-插件配置"><a href="#5-2-插件配置" class="headerlink" title="5.2 插件配置"></a>5.2 插件配置</h3><p>Spring XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-注解实体字段"><a href="#5-3-注解实体字段" class="headerlink" title="5.3 注解实体字段"></a>5.3 注解实体字段</h3><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210150455245.png" alt="image-20211210150455245"></p>
<p>需要为实体字段添加@Version注解（对应表中要有对应version字段）</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210144526594.png" alt="image-20211210144526594"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-特别说明"><a href="#5-4-特别说明" class="headerlink" title="5.4 特别说明"></a>5.4 特别说明</h3><ul>
<li>支持的数据类型只有：int、Integer、long、Long、Date、Timestamp、LocalDateTime。</li>
<li>整数类型下newVersion = oldVersion + 1；</li>
<li>newVersion会回到entity中。</li>
<li>仅支持updateById(id)与update(entity, wrapper)方法。</li>
<li>在update(entity, wrapper)方法下，wrapper不能复用。</li>
</ul>
<h2 id="6-模拟CAS算法"><a href="#6-模拟CAS算法" class="headerlink" title="6. 模拟CAS算法"></a>6. 模拟CAS算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompareAndSwap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> CompareAndSwap cas = <span class="keyword">new</span> CompareAndSwap();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="keyword">int</span> expectedValue = cas.get();</span><br><span class="line">					<span class="keyword">boolean</span> b = cas.compareAndSet(expectedValue, (<span class="keyword">int</span>)(Math.random() * <span class="number">101</span>));</span><br><span class="line">					System.out.println(b);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;).start();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareAndSwap</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取内存值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//比较</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> oldValue = value;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(oldValue == expectedValue)&#123;</span><br><span class="line">			<span class="keyword">this</span>.value = newValue;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> oldValue;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//设置</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> expectedValue == compareAndSwap(expectedValue, newValue);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Java中的锁——Lock接口和队列同步器</title>
    <url>/2021/12/09/Java%E4%B8%AD%E7%9A%84%E9%94%81%E2%80%94%E2%80%94Lock%E6%8E%A5%E5%8F%A3%E5%92%8C%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/</url>
    <content><![CDATA[<h2 id="1-Lock接口"><a href="#1-Lock接口" class="headerlink" title="1. Lock接口"></a>1. Lock接口</h2><p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问共享资源（有些锁允许并发访问，比如读写锁）。在Lock接口出现之前，Java程序是靠synchronized关键字实现锁功能的，而Java5之后，并发包中新增了Lock接口用来实现锁功能，它提供了与synchronized关键字类似的同步功能，只是在使用时需要显式的获取和释放锁。虽然它缺少了隐式获取释放锁的便捷性，但是却拥有了锁获取和释放的可操作性、可中断的获取锁以及超时获取锁等多种synchronized关键字所不具备的同步特性。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210072342912.png" alt="image-20211210072342912"></p>
<p>看一个简单的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>锁也是一种资源，所以它的释放我们放在finally中，确保最终能够被释放。同时，防止锁被无故释放（放在try中，如果发生异常，在异常抛出的同时，也会导致锁无故释放）。</p>
<p>Lock接口提供的synchronized关键字所不具备的主要特性如下表：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>尝试非阻塞地获取锁</td>
<td>当前线程尝试获取锁，如果这一时刻锁没有被其它线程获取到，则成功获取并持有锁</td>
</tr>
<tr>
<td>能被中断地获取锁</td>
<td>与synchronized不同，获取到锁的线程能够被响应中断，当获取到锁的线程被中断时，中断异常将会别抛出，同时锁会被释放</td>
</tr>
<tr>
<td>超时获取锁</td>
<td>在指定的截止时间之前获取锁，如果截止时间到了仍旧无法获取锁，则返回</td>
</tr>
</tbody></table>
<p>Lock是一个接口，它定义了获取和释放锁的基本操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁，调用该方法当前线程将会获取锁，当锁获得后，从该方法返回</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 可以中断地获取锁，和lock()方法不同之处在于该方法会响应中断，即在锁的获取中可以中断当前线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="comment">// 尝试非阻塞的获取锁，调用该方法后立刻返回，如果能够获取则返回true，否则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 超时的获取锁，当前线程在以下三种情况下会返回：</span></span><br><span class="line"><span class="comment">// ①当前线程在超时时间内获得了锁</span></span><br><span class="line"><span class="comment">// ②当前线程在超时时间内被中断（抛异常InterruptedException）</span></span><br><span class="line"><span class="comment">// ③超时时间结束，返回false</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 获取等待通知组件，该组件和当前的锁绑定，当前线程只有获得了锁，才能调用该组件的wait()方法，而调用后，当前线程将释放锁</span></span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>Lock接口的实现基本都是通过聚合了一个同步器的子类来完成线程访问控制的。</p>
<h2 id="2-队列同步器"><a href="#2-队列同步器" class="headerlink" title="2. 队列同步器"></a>2. 队列同步器</h2><p>队列同步器AbstractQueuedSynchronizer(以下简称同步器)，是用来构建锁或者其它同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210082331997.png" alt="image-20211210082331997"></p>
<p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。而子类推荐被定义为自定义同步组件的静态内部类，同步器自身没有实现任何同步接口，它仅仅是定义了若干同步状态获取和释放的方法来供自定义同步组件使用，同步器既可以支持独占式地获取同步状态，也可以支持共享式地获取同步状态，这样就可以方便实现不同类型的同步组件。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211210084125565.png" alt="image-20211210084125565"></p>
<p>同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。可以这样理解二者之间的关系：锁是面向使用者的，它定义了使用者与锁交互的接口，隐藏了实现细节；同步器面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待与唤醒等底层操作。锁和同步器很好地隔离了使用者和实现者所需关注的领域。</p>
<h3 id="2-1-队列同步器的接口与示例"><a href="#2-1-队列同步器的接口与示例" class="headerlink" title="2.1 队列同步器的接口与示例"></a>2.1 队列同步器的接口与示例</h3><p>重写同步器指定方法时，需要使用同步器提供的如下3个方法来访问或修改同步状态：</p>
<blockquote>
<p>getState()：获取当前同步状态。</p>
<p>setState()：设置当前同步状态。</p>
<p>compareAndSetState(int expect, int update)：使用CAS设置当前状态，该方法能够保证状态设置的原子性。</p>
</blockquote>
<p>同步器可重写的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行CAS设置同步状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 共享式获取同步状态，返回大于等于0的值，表示获取成功，反之，获取失败</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 共享式释放同步状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现自定义同步组件时，将会调用同步器提供的模板方法，部分方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 独占式获取同步状态，如果当前线程获取成功，则由该方法返回，否则，将会进入同步队列等待，该方法将会调用重写的tryAcquire(int arg)方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 与acquire(int arg)相同，但是该方法响应中断，当前线程未获取到同步状态而进入同步队列中，如果当前线程别中断，则该方法会抛出InterruptedException并返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 在acquireInterruptibly(int arg)基础上增加了超时限制，如果当前线程在超时时间内没有获取到同步状态，那么将会返回false，如果获取到了返回true</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquireNanos</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 独占式的释放同步状态，该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 共享式获取同步状态，如果当前线程未获取到同步状态，将会进入同步队列等待，与独占式获取的主要区别是在同一时刻可以有多个线程获取到同步状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 与acquireShared(int arg)相同，该方法响应中断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 在acquireSharedInterruptibly(int arg)基础上增加了超时限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquireSharedNanos</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">long</span> nanosTimeout)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 共享式的释放同步状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 获取等待在同步队列上的线程集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Collection&lt;Thread&gt; <span class="title">getQueuedThreads</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>同步器提供的模板方法基本上分为3类：独占式获取与释放同步状态、共享式获取与释放同步状态和查询同步队列中的等待线程情况。自定义同步组件将使用同步器提供的模板方法来实现自己的同步语义。</p>
<p>我们先看一个独占锁的示例：</p>
]]></content>
  </entry>
  <entry>
    <title>Java内存模型的基础</title>
    <url>/2021/12/09/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Java线程之间的通信对程序员完全透明，内存可见性问题很容易困扰Java程序员。</p>
<h2 id="1-并发编程模型的两个关键问题"><a href="#1-并发编程模型的两个关键问题" class="headerlink" title="1. 并发编程模型的两个关键问题"></a>1. 并发编程模型的两个关键问题</h2><ul>
<li><p>线程之间如何通信</p>
<p>通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>
<p>在共享内存的并发模型里，线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过发送消息来显式进行通信。</p>
</li>
<li><p>线程之间如何同步</p>
<p>同步是指程序中用于控制不同线程间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>
</li>
</ul>
<p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，这个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p>
<h2 id="2-Java内存模型的抽象结构"><a href="#2-Java内存模型的抽象结构" class="headerlink" title="2. Java内存模型的抽象结构"></a>2. Java内存模型的抽象结构</h2><p>在Java中，所有实例域、静态域和数组元素都存储在堆内存中，对内存在线程之间共享(下面用共享变量代指三者)。局部变量，方法定义参数和异常处理器参数不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>
<p>Java线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都由一个私有的本地内存，本地内存中存储该线程已读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其它的硬件和编译器优化。Java内存模型的抽象示意图：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211209193054163.png" alt="image-20211209193054163"></p>
<p>从图中来看，如果线程A和线程B之间要通信的话，必须要经历下面两个步骤。</p>
<ol>
<li>线程A把本地内存A中更新过的共享变量刷新到主存中去。</li>
<li>线程B到主存中去读取线程A之前已经更新过的共享变量。</li>
</ol>
<p>线程之间通信如图：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211209194936096.png" alt="image-20211209194936096"></p>
<p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序员提供内存可见性保证。</p>
<h2 id="3-从源代码到指令序列的重排序"><a href="#3-从源代码到指令序列的重排序" class="headerlink" title="3. 从源代码到指令序列的重排序"></a>3. 从源代码到指令序列的重排序</h2><p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分3种类型。</p>
<ol>
<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应及其指令的执行顺序。</li>
<li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211209200421067.png" alt="image-20211209200421067"></p>
<p>在这些重排序中可能会导致对线程程序出现内存可见性问题。对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的都要禁止）。对于处理器重排序，JMM的处理器重排序规则会要求Java编译器在生成指令序列时，插入特定类型的内存屏障指令，通过内存屏障指令来禁止特定类型的处理器重排序。</p>
<p>JMM属于语句级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>
<h2 id="4-并发编程模型的分类"><a href="#4-并发编程模型的分类" class="headerlink" title="4. 并发编程模型的分类"></a>4. 并发编程模型的分类</h2><p>我们先看一个处理器操作内存的执行结果：</p>
<table>
<thead>
<tr>
<th></th>
<th>Processor A</th>
<th>Processor B</th>
</tr>
</thead>
<tbody><tr>
<td>代码</td>
<td>a = 1; // A1<br />x = b; // A2</td>
<td>b = 2; // B1<br />y = a; // B2</td>
</tr>
<tr>
<td>运行结果</td>
<td>初始状态：a = b = 0</td>
<td>处理器允许执行后得到结果：x = y = 0</td>
</tr>
</tbody></table>
<p> 假设处理器A和处理器B按程序的顺序并行执行内存访问，最终可能得到x = y = 0的结果。具体原因如下图：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211209211248724.png" alt="image-20211209211248724"></p>
<p>在这里，处理器A和B可以同时把共享变量a和b写入自己的写缓冲区，然后从内存中读取另一个共享变量，最后才把自己写缓冲区中保存的脏数据刷新到内存中。所以这就得到了 x = y = 0 的结果。</p>
<p>从内存操作实际发生的顺序来看，直到处理器A执行A3来刷新自己的写缓冲区，写操作A1才算真正执行了。虽然执行顺序为：A1→A2，但内存操作实际发生顺序却是A2→A1。此时，处理器A的内存操作顺序被重排序了（B与A的情况一样）。</p>
<p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此都会允许对写-读操作进行重排序。</p>
<p>下表是常见处理器允许的重排序类型的列表</p>
<table>
<thead>
<tr>
<th align="center">处理器</th>
<th align="center">Load-Load</th>
<th align="center">Load-Store</th>
<th align="center">Store-Store</th>
<th align="center">Store-Load</th>
<th align="center">数据依赖</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SPARC-TSO</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">Y</td>
<td align="center">N</td>
</tr>
<tr>
<td align="center">x86</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">Y</td>
<td align="center">N</td>
</tr>
<tr>
<td align="center">IA64</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">N</td>
</tr>
<tr>
<td align="center">PowerPC</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">N</td>
</tr>
</tbody></table>
<p>从表中可以看出：常见的处理器都运行Store-Load重排序，而不允许对存在数据依赖的操作进行重排序。sparc-TSO和X86拥有相对较强的处理器内存模型，它们仅允许对写-读操作进行重排序（因为它们都使用了写缓冲区）。</p>
<p>为了保证内存可见性，Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为4类，如表所示。</p>
<table>
<thead>
<tr>
<th>屏障类型</th>
<th>指令示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LoadLoad Barriers</td>
<td>Load1;LoadLoad;Load2</td>
<td>确保Load1数据的装载先于Load2及所有后续装载指令的装载</td>
</tr>
<tr>
<td>StoreStore Barriers</td>
<td>Store1;StoreStore;Store2</td>
<td>确保Store1数据对其它处理器可见(刷新到内存)先于Store2及所有后续存储指令的存储</td>
</tr>
<tr>
<td>LoadStore Barriers</td>
<td>Load1;LoadStore;Store2;</td>
<td>确保Load1数据装载先于Store2及所有后续的存储指令刷新到内存</td>
</tr>
<tr>
<td>StoreLoad Barriers</td>
<td>Store1;StoreLoad;Load2;</td>
<td>确保Store1数据对其它处理器变得可见(指刷新到内存)先于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令(存储和装载指令)完成之后，才执行该屏障之后的内存访问指令</td>
</tr>
</tbody></table>
<p>StoreLoad Barriers是一个”全能型“的屏障，它同时具有其它3个屏障的效果。现代的多处理器大多支持该屏障。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（Buffer Fully Flush）。</p>
<h2 id="5-happens-before简介"><a href="#5-happens-before简介" class="headerlink" title="5. happens-before简介"></a>5. happens-before简介</h2><p>从JDK5开始，Java使用新的JSR-133内存模型。JSR-133使用happens-before的概念来阐述操作之间的内存可见性。在JMM中如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。这里的两个操作既可以是在一个线程之内，也可以是在不同线程之间。</p>
<p>与程序员密切相关的happens-before规则如下：</p>
<ul>
<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>
<li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>
<li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>
<li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>
</ul>
<blockquote>
<p>注意：两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前。</p>
</blockquote>
<p>happens-before与JMM的关系如图所示：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211209215601271.png" alt="image-20211209215601271"></p>
<p>一个happens-before规则对应于一个或多个编译器和处理器重排序规则。对于Java程序员来说，happens-before规则简单易懂，它避免Java程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现方法。</p>
]]></content>
  </entry>
  <entry>
    <title>初见设计模式</title>
    <url>/2021/12/09/DesignPattern-%E5%88%9D%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>设计模式最初是在建筑学中被提出的，建筑师克里斯托弗·亚历山大在1970年代编撰了一本汇集设计模式的书，但是设计模式的思想在建筑设计领域里的影响远没有后来在软件开发领域里传播的广泛和深远。</p>
<p>软件设计中的设计模式是在GoF（”四人帮“，指Gamma、Helm、Johnson &amp; Vlissides、Addison-Wesley四人）合著的《设计模式》一书中第一次提出的，随后被规范化。</p>
<h2 id="1-为什么要使用"><a href="#1-为什么要使用" class="headerlink" title="1. 为什么要使用"></a>1. 为什么要使用</h2><p>设计模式优点如下：</p>
<ul>
<li><strong>复用解决方案</strong></li>
<li><strong>设计模式将设计方法标准化</strong></li>
<li><strong>设计模式可以提高个人和团队的设计能力</strong></li>
<li><strong>设计模式使软件更容易修改和维护</strong></li>
</ul>
<h2 id="2-设计模式分类"><a href="#2-设计模式分类" class="headerlink" title="2. 设计模式分类"></a>2. 设计模式分类</h2><ul>
<li>创建型模式：用于创建对象。对象的创建会消耗掉系统的很多资源，所以单独对对象的创建进行研究，以便能够高效地创建对象就是创建型模式要探讨的问题。</li>
<li>结构型模式：用于构建类间的关系。如何设计对象的结构、继承和依赖关系会影响到后续程序的维护性，代码的健壮性、耦合性等。这些因素需要使用结构型模式来优化。</li>
<li>行为型模式：用于控制对象的行为。如果对象的行为设计的号，那么对象的行为就会更清晰，它们之间的协作效率就会更高。</li>
</ul>
<p>具体分类见下23种：</p>
<blockquote>
<ul>
<li>创建型模式<ul>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
<li>单例模式</li>
</ul>
</li>
<li>结构型模式<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>装饰模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
</li>
<li>行为型模式<ul>
<li>命令模式</li>
<li>观察者模式</li>
<li>责任链模式</li>
<li>迭代器模式</li>
<li>访问者模式</li>
<li>状态模式</li>
<li>备忘录模式</li>
<li>策略模式</li>
<li>调停者模式</li>
<li>模板方法模式</li>
<li>解释器模式</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="3-七大原则"><a href="#3-七大原则" class="headerlink" title="3. 七大原则"></a>3. 七大原则</h2><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础。</p>
<h3 id="3-1-单一职责原则"><a href="#3-1-单一职责原则" class="headerlink" title="3.1 单一职责原则"></a>3.1 单一职责原则</h3><p>对类来说，即一个类应该只负责一项职责。如：类A负责两个不同职责1和2，当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1和A2。</p>
<p>注意事项和细节：</p>
<ul>
<li>降低类的复杂度，一个类只负责一项职责。</li>
<li>提高类的可读性，可维护性。</li>
<li>降低变更引起的风险。</li>
<li>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则。</li>
</ul>
<h3 id="3-2-接口隔离原则"><a href="#3-2-接口隔离原则" class="headerlink" title="3.2 接口隔离原则"></a>3.2 接口隔离原则</h3><p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</p>
<h3 id="3-3-依赖倒转原则"><a href="#3-3-依赖倒转原则" class="headerlink" title="3.3 依赖倒转原则"></a>3.3 依赖倒转原则</h3><ol>
<li>高层模块不应该依赖低层模块，二者都应该依赖其抽象。</li>
<li>抽象不应该依赖细节，细节应该依赖抽象。</li>
<li>依赖倒转的中心思想是面向接口编程。</li>
<li>依赖倒转原则的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在Java中，抽象是指接口或抽象类，细节就是具体的实现类。</li>
<li>使用接口或抽象类的目的是指定好规范，而不涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。</li>
</ol>
<p>依赖关系传递方式：</p>
<ul>
<li>接口传递</li>
<li>构造方法传递</li>
<li>setter方式传递</li>
</ul>
<p>注意事项和细节：</p>
<ul>
<li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好。</li>
<li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化。</li>
<li>继承时遵循里氏替换原则。</li>
</ul>
<h3 id="3-4-里氏替换原则"><a href="#3-4-里氏替换原则" class="headerlink" title="3.4 里氏替换原则"></a>3.4 里氏替换原则</h3><h4 id="3-4-1-OO中的继承性的思考和说明"><a href="#3-4-1-OO中的继承性的思考和说明" class="headerlink" title="3.4.1 OO中的继承性的思考和说明"></a>3.4.1 OO中的继承性的思考和说明</h4><ul>
<li>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li>
<li>继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其它的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。</li>
</ul>
<p>而在编程中，为了正确的使用继承，我们需要用到里氏替换原则。</p>
<h4 id="3-4-2-基本介绍"><a href="#3-4-2-基本介绍" class="headerlink" title="3.4.2 基本介绍"></a>3.4.2 基本介绍</h4><p>里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出的。</p>
<p>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。<strong>换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</strong></p>
<p>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。</p>
<p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。</p>
<h3 id="3-5-开闭原则"><a href="#3-5-开闭原则" class="headerlink" title="3.5 开闭原则"></a>3.5 开闭原则</h3><p>开闭原则是编程中最基础、最重要的设计原则。一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节。这样，当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p>
<p>我们在编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</p>
<h3 id="3-6-迪米特法则"><a href="#3-6-迪米特法则" class="headerlink" title="3.6 迪米特法则"></a>3.6 迪米特法则</h3><p>一个对象应该对其它对象保持最少的了解，但是，类与类关系越密切，耦合度越大。迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息。迪米特法则还有个更简单的定义：只与直接的朋友通信。</p>
<p>所谓的直接的朋友就是：每个对象都会与其它对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称<strong>出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接朋友</strong>。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p>
<p>迪米特法则的核心是降低类之间的耦合，但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系，并不是要求完全没有依赖关系。</p>
<h3 id="3-7-合成复用原则"><a href="#3-7-合成复用原则" class="headerlink" title="3.7 合成复用原则"></a>3.7 合成复用原则</h3><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
  </entry>
  <entry>
    <title>【Effective-Java】覆盖equals请遵守通用约定</title>
    <url>/2021/12/08/EffectiveJava-%E8%A6%86%E7%9B%96equals%E8%AF%B7%E9%81%B5%E5%AE%88%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<p>尽管Object类是一个具体的类，但设计它主要是为了扩展。它的所有非final方法（equals、hashCode、toString、clone和finalize）都有明确的通用约定，因为它们设计成是要覆盖的。任何一个类，它在覆盖这些方法的时候，都有责任遵守这些通用约定；如果不能做到这一点，其它依赖于这些约定的类就无法结合该类一起正常运作。</p>
<span id="more"></span>

<h2 id="1-不需要覆盖equals的情况"><a href="#1-不需要覆盖equals的情况" class="headerlink" title="1. 不需要覆盖equals的情况"></a>1. 不需要覆盖equals的情况</h2><p>覆盖equals方法看起来非常简单，但是有许多覆盖方式会导致错误，并且后果严重。因此，我们先来看一下不需要覆盖equals方法的情况：</p>
<ol>
<li>类的每个实例本质上都是唯一的。</li>
<li>类没有必要提供“逻辑相等”的测试功能。</li>
<li>父类已经覆盖了equals，父类的行为对于这个类也是合适的。例如，大多数的Set都是从AbstractSet继承equals实现的，List实现从AbstractList继承equals实现的，Map从AbstractMap继承equals实现的。</li>
<li>类是私有的，或者是包级私有的，可以确定它的equals方法永远不会被调用。如果你非常想要规避风险，可以覆盖equals方法，以确保它不会被意外调用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(); <span class="comment">// Method is never called.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-什么时候覆盖equals"><a href="#2-什么时候覆盖equals" class="headerlink" title="2. 什么时候覆盖equals"></a>2. 什么时候覆盖equals</h2><p>如果类具有自己特有的“逻辑相等”概念（不同于对象等同的概念），而且父类还没有覆盖equals。这通常属于“值类”的情形。值类仅仅是一个表示值的类，例如Integer或者String。程序员在利用equals方法来比较值对象的引用时，希望知道它们在逻辑上是否相等，而不是想了解它们是否指向同一个对象。而为了满足程序员的要求，不仅必须重写equals方法，而且这样做也使得这个类的实例可以被用作映射表的键，或者集合的元素，使映射或者集合表现出预期的能力。</p>
<h2 id="3-必须遵守的通用约定"><a href="#3-必须遵守的通用约定" class="headerlink" title="3. 必须遵守的通用约定"></a>3. 必须遵守的通用约定</h2><p>在覆盖equals方法时，必须要遵守它的通用约定。下面是约定的内容，来自Object的规范。equals方法实现了等价关系，其属性如下：</p>
<ul>
<li>自反性（reflexive）：对于任何非null的引用值x，x.equals(x)必须返回true。</li>
<li>对称性（symmetric）：对于任何非null的引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true。</li>
<li>传递性（transitive）：对于任何非null的引用值x、y和z，如果x.equals(y)返回true，并且y.equals(z)也返回true，那么x.equals(z)也必须返回true。</li>
<li>一致性（consistent）：对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)就会一致地返回true，或者一致地返回false。</li>
<li>非空性（Non-nullity）：对于任何非null的引用值x，x.equals(null)必须返回false。</li>
</ul>
<h2 id="4-属性详解"><a href="#4-属性详解" class="headerlink" title="4. 属性详解"></a>4. 属性详解</h2><ul>
<li><p>自反性</p>
<p>这个要求仅仅说明对象必须等于其自身。</p>
</li>
<li><p>对称性</p>
<p>第二个要求是说，任何两个对象对于“它们是否相等”的问题都必须保持一致。与第一个要求不同，若无意中违反这一条，这种情形倒是不难想象。例如下面的类，它实现了一个区分大小写的字符串。字符串由toString保存，但在equals操作中被忽略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInsensitiveString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String s;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CaseInsensitiveString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = Objects.requireNonNull(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> CaseInsensitiveString)</span><br><span class="line">            <span class="keyword">return</span> s.equalsIgnoreCase(((CaseInsensitiveString) o).s);</span><br><span class="line">       	<span class="keyword">if</span>(o <span class="keyword">instanceof</span> String)</span><br><span class="line">            <span class="keyword">return</span> s.equalsIgnoreCase((String) o);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个类中，equals方法的意图非常好，它企图与普通的字符串对象进行互操作。假设我们有一个不区分大小写的字符串和一个普通的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    CaseInsensitiveString polish = <span class="keyword">new</span> CaseInsensitiveString(<span class="string">&quot;Polish&quot;</span>);</span><br><span class="line">    String s = <span class="string">&quot;polish&quot;</span>;</span><br><span class="line">    System.out.println(polish.equals(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果不出所料返回true。问题在于，虽然CaseInsensitiveString类中的equals方法知道普通字符串对象，但是，String类中的equals方法却并不知道不区分大小写的字符串。因此，s.equals(polish)返回false，显然违反了对称性。为了解决这个问题，只需把企图与String互操作的这段代码从equals方法中去掉就可以了。这样做之后，就可以重构该方法，使它变成一条单独的返回语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o <span class="keyword">instanceof</span> CaseInsensitiveString &amp;&amp; ((CaseInsensitiveString) o).s.equalsIgnoreCase(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>传递性</p>
<p>equals约定的第三个要求是，如果一个对象等于第二个对象，而第二个对象又等于第三个对象，则第一个对象一定等于第三个对象。同样地，无意识地违反这条规则的情形也不难想象。我们有一个父类Point：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Point))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Point p = (Point) o;</span><br><span class="line">        <span class="keyword">return</span> p.x == x &amp;&amp; p.y == y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个子类ColorPoint：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们如果不给ColorPoint提供equals方法，直接从Point中继承过来，在equals作比较的时候颜色信息就被忽略掉了。虽然这样做不会违反equals约定，但是我们明显无法接受。假设我们在ColorPoint中也重写了equals方法，只有当它的参数是另一个有色点，并且具有同样的位置和颜色时，才返回true：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> ColorPoint))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.equals(o) &amp;&amp; ((ColorPoint) o).color == color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法的问题在于，在比较普通点和有色点，以及相反的情形时，可能会得到不同的结果。前一种比较忽略了颜色信息，而后一种比较则总是返回false，因为参数类型不正确。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211208234254912.png" alt="image-20211208234254912"></p>
<p>为了修正这个问题，我们可以让ColorPoint在进行“混合比较”时忽略颜色信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Point))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> ColorPoint))</span><br><span class="line">        <span class="keyword">return</span> o.equals(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.equals(o) &amp;&amp; ((ColorPoint) o).color == color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法确实提供了对称性，但是却牺牲了传递性：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211208234815483.png" alt="image-20211208234815483"></p>
<p>此外，这种方法还可能导致无限递归问题：假设Point有两个子类：ColorPoint和SmellPoint，它们各自都带有这种equals方法。那么对colorPoint.equals(SmellPoint)的调用将会抛出StackOverflowError异常。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211208235227767.png" alt="image-20211208235227767"></p>
<p>如何解决这个问题呢？事实上，这是面向对象语言中关于等价关系的一个基本问题。<strong>我们无法在扩展可实例化的类的同时，既增加新的值组件，同时又保留equals约定</strong>，除非愿意放弃面向对象的抽象所带来的优势。而一种方法是在equals方法中用getClass测试代替instanceof测试，可以扩展可实例化的类和增加新的值组件，同时保留equals约定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o == <span class="keyword">null</span> || o.getClass() != getClass())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Point p = (Point) o;</span><br><span class="line">    <span class="keyword">return</span> p.x == x &amp;&amp; p.y == y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段程序只有当对象具有相同的实现类时，才能使对象等同。这也并不是我们想要的结果！</p>
<p>虽然没有一种令人满意的办法可以既扩展不可实例化的类，又增加值组件，但还是有一种不错的权宜之计：遵从“复合优先于继承”的建议。我们不再让ColorPoint扩展Point，而是在ColorPoint中加入一个私有的Point域，以及一个公有的试图方法，此方法返回一个与该有色点处在相同位置的普通Point对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Point point</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Color color)</span> </span>&#123;</span><br><span class="line">		point = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">        <span class="keyword">this</span>.color = Objects.requireNonNull(color);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Returns the point-view of this color point. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">asPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> ColorPoint))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ColorPoint cp = (ColorPoint) o;</span><br><span class="line">		<span class="keyword">return</span> cp.point.equals(point) &amp;&amp; cp.color.equals(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java平台类库中，有一些类扩展了可实例化的类，并添加了新的值组件。例如，java.sql.Timestamp对java.util.Date进行了扩展，并增加了nanoseconds域。而在Timestamp中也告诉我们不要把这两个混用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This type is a composite of a &lt;code&gt;java.util.Date&lt;/code&gt; and a</span></span><br><span class="line"><span class="comment"> * separate nanoseconds value. Only integral seconds are stored in the</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.util.Date&lt;/code&gt; component. The fractional seconds - the nanos - are</span></span><br><span class="line"><span class="comment"> * separate.  The &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt; method never returns</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;true&lt;/code&gt; when passed an object</span></span><br><span class="line"><span class="comment"> * that isn&#x27;t an instance of &lt;code&gt;java.sql.Timestamp&lt;/code&gt;,</span></span><br><span class="line"><span class="comment"> * because the nanos component of a date is unknown.</span></span><br><span class="line"><span class="comment"> * As a result, the &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * method is not symmetric with respect to the</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.util.Date.equals(Object)&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * method.  Also, the &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.util.Date&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * implementation and therefore does not include nanos in its computation.</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> * Due to the differences between the &lt;code&gt;Timestamp&lt;/code&gt; class</span></span><br><span class="line"><span class="comment"> * and the &lt;code&gt;java.util.Date&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * class mentioned above, it is recommended that code not view</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Timestamp&lt;/code&gt; values generically as an instance of</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;java.util.Date&lt;/code&gt;.  The</span></span><br><span class="line"><span class="comment"> * inheritance relationship between &lt;code&gt;Timestamp&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * and &lt;code&gt;java.util.Date&lt;/code&gt; really</span></span><br><span class="line"><span class="comment"> * denotes implementation inheritance, and not type inheritance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Timestamp</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">Date</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最后注意，你可以在一个抽象类的子类中增加新的值组件且不违反equals约定。</p>
</li>
<li><p>一致性</p>
<p>第四个要求是，如果两个对象相等，它们就必须始终保持相等，除非其中有变化。换句话说，可变对象在不同时候可以与不同的对象相等，而不可变对象则不会这样。当你写一个类的受，应该仔细考虑它是否应该是不可变的。如果认为它应该是不可变的，就必须保证equals满足：相等的对象永远相等，不相等的对象永远不相等。</p>
<p>无论类是否是不可变的，都不要使equals方法依赖于不可靠的资源。如果违反了这条禁令，要想满足一致性的要求就十分困难了。例如，java.net.URL的equals方法依赖于对URL主机IP地址的比较。而将一个主机名转变成IP地址可能需要访问网络，随着时间的推移，就不能确保会产生相同的结果，即IP地址发生了变化。这样会导致URL的equals方法违反equals约定，在实践中可能引发一些问题。这种行为是一个大错误且不应被模仿。遗憾的是，因为兼容性要求，这样行为无法被改变。</p>
</li>
<li><p>非空性</p>
<p>通用约定不允许抛出NullPointerException异常。许多类的equals都通过一个显式的null测试来防止这种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(o == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这项测试是不必要的。为了测试其参数的等同性，equals方法必须先把参数转换成适当的类型，以便可以调用它的访问方法，或者访问它的域。在进行转换之前，必须使用instanceof操作符，检查参数类型是否正确：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> MyType))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    MyType mt = (MyType) o;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果漏掉这一步，并且传递的参数是错误的类型，会抛出ClassCastException异常，违反了约定。但是，如果instanceof的第一个操作数为null，那么，不管第二个操作数是哪种类型，instanceof都应该返回false。因此，如果把null传给equals，类型检查就会返回false，所以不需要显式的null检查。</p>
</li>
</ul>
<p>结合所有这些要求，得出了以下实现高质量equals方法的诀窍：</p>
<blockquote>
<ol>
<li>使用==操作符检查“参数是否为这个对象的引用”。</li>
<li>使用instanceof操作符检查”参数是否为正确的类型“。</li>
<li>把参数转换成正确的类型。</li>
<li>对于该类中的每个”关键“域，检查参数中的域是否与该对象中对应的域相匹配。</li>
<li>覆盖equals时总要覆盖hashCode。</li>
<li>不要企图让equals方法过于智能。</li>
<li>不要将equals声明中的Object对象替换为其它的类型。（那样做的话就不是Override重写了）</li>
</ol>
</blockquote>
<p>对于既不是float也不是double类型的基本类型域，可以使用==进行比较；对于对象引用域，可以递归调用equals方法；对于float域，可以使用Float.compare(float, float)方法；对于double域，则使用Double.compare(double, double)。</p>
<p>有些对象引用域包含null可能是合法的，所以，为了避免可能导致空指针异常，则使用静态方法Objects.equals(Ojbect, Object)来检查这类域的等同性。</p>
<p>域的比较顺序可能会影响equals方法的性能。为了获得最佳的性能，应该最先比较最有可能不一致的域，或者是开销最低的域，最理想的情况是两个条件同时满足的域。</p>
<p>在编写完equals方法之后，应该问自己三个问题：它是否是对称的、传递的、一致的？并且要编写单元测试来检验。除非用AutoValue生成的。</p>
<p>编写和测试equals（及hashCode）方法都是十分繁琐的，得到的代码也很琐碎。代替手工编写和测试的最佳途径，是使用Google开源的AutoValue框架，它会自动生成这些方法，通过类汇总的单个注解就能触发。</p>
<p>IDE也有工具可以生成，但得到的源代码比使用Auto-Value的更加冗长，可读性也更差，它无法自动追踪类中的变化，但通常由于程序员手工实现它们。</p>
<p>总而言之，不要轻易覆盖equals方法，除非迫不得已。因为大多数情况下，Object继承的实现已经是想要的，如果覆盖，一定要比较这个类的所有关键域，并且查看是否遵守equals合约的所有五个条款。</p>
]]></content>
  </entry>
  <entry>
    <title>Collection接口继承树</title>
    <url>/2021/12/02/Collection%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202210335782.png" alt="image-20211202210335782"></p>
<ul>
<li><p>Collection接口是List、Set和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。</p>
<span id="more"></span></li>
<li><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）实现。</p>
</li>
<li><p>在Java5之前，Java集合会丢失容器中所有对象的数据类型，把所有对象都当成Object类型处理；从JDK5.0增加了泛型以后，Java集合可以记住容器中对象的数据类型。</p>
</li>
</ul>
<h2 id="1-Collection接口方法"><a href="#1-Collection接口方法" class="headerlink" title="1. Collection接口方法"></a>1. Collection接口方法</h2><p>1.1 添加 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(Object obj) </span><br><span class="line">addAll(Collection coll) </span><br></pre></td></tr></table></figure>

<p>1.2 获取有效元素的个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.3 清空集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.4 是否是空集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.5 是否包含某个元素 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span> <span class="comment">// 是通过元素的equals方法来判断是否是同一个对象 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection c)</span> <span class="comment">// 也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。</span></span></span><br></pre></td></tr></table></figure>

<p>1.6 删除 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span> <span class="comment">// 通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection coll)</span> <span class="comment">// 取当前集合的差集 </span></span></span><br></pre></td></tr></table></figure>

<p>1.7 取两个集合的交集 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection c)</span> <span class="comment">// 把交集的结果存在当前集合中，不影响c </span></span></span><br></pre></td></tr></table></figure>

<p>1.8 集合是否相等 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span></span><br></pre></td></tr></table></figure>

<p>1.9 转成对象数组 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] toArray() </span><br></pre></td></tr></table></figure>

<p>1.10 获取集合对象的哈希值 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashCode() </span><br></pre></td></tr></table></figure>

<p>1.11 遍历 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iterator() <span class="comment">// 返回迭代器对象，用于集合遍历</span></span><br></pre></td></tr></table></figure>

<h2 id="2-List接口"><a href="#2-List接口" class="headerlink" title="2. List接口"></a>2. List接口</h2><blockquote>
<ul>
<li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组。</li>
<li>List集合类中**==元素有序、且可重复==**，集合中的每个元素都有其对应的顺序索引。</li>
<li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li>
<li>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</li>
</ul>
</blockquote>
<p>List除了从Collection集合继承的方法外，List集合里添加了一些根据索引来操作集合元素的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span></span>; <span class="comment">// 在index位置插入ele元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection eles)</span></span>; <span class="comment">// 从index开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 获取指定index的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span></span>; <span class="comment">// 返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span></span>; <span class="comment">// 返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 移除指定index的元素，并返回此元素</span></span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span></span>; <span class="comment">// 设置指定index的元素为ele</span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span>; <span class="comment">// 返回从fromIndex到toIndex的子集合</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1. ArrayList"></a>2.1. ArrayList</h3><blockquote>
<ul>
<li>ArrayList是LIst接口的典型实现类、主要实现类。</li>
<li>本质上，ArrayList是对象引用的一个“变长”数组。</li>
<li>ArrayList的JDK1.8之前与之后的实现区别？<ul>
<li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组。</li>
<li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当要添加第一个元素时再创建一个始容量为10的数组。</li>
</ul>
</li>
<li>Arrays.asList(…)方法返回的List集合，既不是ArrayList实例，也不是Vector实例。而是一个固定长度的List集合。</li>
</ul>
</blockquote>
<p>我们可以执行下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer[] datas = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(datas);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    System.out.println(list.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果是抛异常UnsupportedOperationException。查看Arrays.asList()源码发现</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202214748103.png" alt="image-20211202214748103"></p>
<p>asList方法返回的虽然是一个ArrayList，但并不是我们平常使用的那个。而是Arrays的一个静态内部类，并且这个类实现了Serializable接口，说明它是可序列化的，正如我们所使用的String一样，是不可变的。</p>
<h3 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h3><blockquote>
<ul>
<li>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</li>
<li>新增方法：<ul>
<li>void addFirst(Object obj)</li>
<li>void addLast(Object obj)</li>
<li>Object getFirst()</li>
<li>Object getLast()</li>
<li>Object removeFirst()</li>
<li>Object removeLast()</li>
</ul>
</li>
</ul>
</blockquote>
<p>LinkedList：**==双向链表==**，内部没有声明数组，而是定义了Node类型的first和last，用于记录首末元素。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202220345414.png" alt="image-20211202220345414">同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：</p>
<ul>
<li>prev变量记录前一个元素的位置</li>
<li>next变量记录下一个元素的位置</li>
</ul>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202220452685.png" alt="image-20211202220452685"></p>
<h3 id="2-3-Vector"><a href="#2-3-Vector" class="headerlink" title="2.3 Vector"></a>2.3 Vector</h3><p>Vector是一个古老的集合，JDK1.0就有了（ArrayList和LinkedList都是since1.2）。大多数操作与ArrayList相同，区别之处在于==<strong>Vector是线程安全的</strong>==。</p>
<p>新增方法：</p>
<ul>
<li>void addElement(Object obj)</li>
<li>void insertElementAt(Object obj, int index)</li>
<li>void setElementAt(Object obj, int index)</li>
<li>void removeElement(Object obj)</li>
<li>void removeAllElement()</li>
</ul>
<p>在各种List中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList。Vector总是比ArrayList慢，所以尽量避免使用。</p>
<h2 id="3-Set接口"><a href="#3-Set接口" class="headerlink" title="3. Set接口"></a>3. Set接口</h2><blockquote>
<ul>
<li>Set接口是Collection的子接口，Set接口没有提供额外的方法。</li>
<li>Set集合不允许包含相同的元素，如果试着把两个相同的元素加入同一个Set集合中，则添加操作失败。</li>
<li>Set判断两个对象是否相同不是使用==运算符，而是根据equals()方法。</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202222826445.png" alt="image-20211202222826445"></p>
<h3 id="3-1-HashSet"><a href="#3-1-HashSet" class="headerlink" title="3.1 HashSet"></a>3.1 HashSet</h3><blockquote>
<ul>
<li>HashSet是Set接口的典型实现，大多数时候使用Set集合时都使用这个实现类。</li>
<li>HashSet按Hash算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</li>
<li>HashSet具有以下特点：<ul>
<li>不能保证元素的排列顺序</li>
<li>不是线程安全的</li>
<li>集合元素可以是null（根据不重复原则，只能有一个）</li>
</ul>
</li>
<li>HashSet集合判断两个元素相等的标准：两个对象通过hashCode()方法比较相等，并且两个对象的equals()方法返回值也相等。</li>
<li>对于存放在Set容器中的对象，对应的类一定要重写equals和hashCode方法，以实现对象相等规则。即：”**==相等的对象必须具有相等的散列码==**“。</li>
</ul>
</blockquote>
<h4 id="3-1-1-向HashSet中添加元素的过程"><a href="#3-1-1-向HashSet中添加元素的过程" class="headerlink" title="3.1.1 向HashSet中添加元素的过程"></a>3.1.1 向HashSet中添加元素的过程</h4><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203090912611.png" alt="image-20211203090912611"></p>
<p>对于添加成功的情况二和情况三而言：元素a与已经存在指定索引位置上数据以链表的方式存储。</p>
<p>JDK7：元素a放到数组中，指向原来的元素。</p>
<p>JDK8：原来的元素在数组中，指向元素a。</p>
<p>总结：**==七上八下==**</p>
<blockquote>
<p>注释：HashSet底层：数组 + 链表的结构（前提：JDK7）。初始容量为16，当如果使用率超过0.75，就会扩大容量为原来的2倍。</p>
</blockquote>
<h4 id="3-1-2-重写hashCode-方法的基本原则"><a href="#3-1-2-重写hashCode-方法的基本原则" class="headerlink" title="3.1.2 重写hashCode()方法的基本原则"></a>3.1.2 重写hashCode()方法的基本原则</h4><ul>
<li>在程序运行时，同一个对象多次调用hashCode方法应该返回相同的值。</li>
<li>当两个对象的equals方法比较返回true时，这两个对象的hashCode方法的返回值也应相等。</li>
<li>对象中用作equals方法比较的Field，都应该用来计算hashCode值。</li>
</ul>
<h4 id="3-1-3-重写equals-方法的基本原则"><a href="#3-1-3-重写equals-方法的基本原则" class="headerlink" title="3.1.3 重写equals()方法的基本原则"></a>3.1.3 重写equals()方法的基本原则</h4><p>以自定义的Customer类为例，何时需要重写equals？</p>
<ul>
<li>当一个类有自己特有的”逻辑相等“概念，当改写equals的时候，总是要改写hashCode，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode方法，它们仅仅是两个对象。</li>
<li>因此，违反了”**==相等的对象必须具有相等的散列码==**“。</li>
<li>结论：复写equals方法的时候一般都需要同时复写hashCode方法。<strong>通常参与计算hashCode的对象的属性也应该参与到equals中进行计算</strong>。</li>
</ul>
<h4 id="3-1-4-Eclipse-IDEA工具里hashCode的重写"><a href="#3-1-4-Eclipse-IDEA工具里hashCode的重写" class="headerlink" title="3.1.4 Eclipse/IDEA工具里hashCode的重写"></a>3.1.4 Eclipse/IDEA工具里hashCode的重写</h4><p>在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203092415291.png" alt="image-20211203092415291"></p>
<ul>
<li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的”冲突“就越少，查找起来效率也会提高。（减少冲突）</li>
<li>31只占用5bits（1 1111），相乘造成数据溢出的概率较小。</li>
<li>31可以由 <u>*i × 31 == (i &lt;&lt; 5) -1*</u> 来表示，现在很多虚拟机里面都有做相关优化。（提高算法效率）</li>
<li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数背身和被乘数还有1来整除！（减少冲突）</li>
</ul>
<h3 id="3-2-LinkedHashSet"><a href="#3-2-LinkedHashSet" class="headerlink" title="3.2 LinkedHashSet"></a>3.2 LinkedHashSet</h3><blockquote>
<ul>
<li>LinkedHashSet是HashSet的子类。</li>
<li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以**==插入顺序==**保存的。</li>
<li><strong>LinkedHashSet插入性能略低于HashSet</strong>，但在迭代访问Set里的全部元素时有很好的性能。</li>
<li>LinkedHashSet不允许集合元素重复</li>
</ul>
</blockquote>
<h3 id="3-3-TreeSet"><a href="#3-3-TreeSet" class="headerlink" title="3.3 TreeSet"></a>3.3 TreeSet</h3><blockquote>
<ul>
<li>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。</li>
<li>TreeSet底层使用<strong>红黑树</strong>结构存储数据。</li>
<li>新增的方法：<ul>
<li>Comparator comparator() </li>
<li>Object first() </li>
<li>Object last() </li>
<li>Object lower(Object e) </li>
<li>Object higher(Object e) </li>
<li>SortedSet subSet(fromElement, toElement) </li>
<li>SortedSet headSet(toElement) </li>
<li>SortedSet tailSet(fromElement)</li>
</ul>
</li>
<li>TreeSet两种排序方法：自然排序和定制排序。默认采用自然排序。</li>
<li>特点：有序，查询速度比List快。</li>
<li></li>
</ul>
</blockquote>
<h4 id="3-3-1-自然排序"><a href="#3-3-1-自然排序" class="headerlink" title="3.3.1 自然排序"></a>3.3.1 自然排序</h4><p>TreeSet会调用集合元素的compareTo(Object obj)方法来比较元素之间的大小关系，然后将集合元素按升序（默认情况）排列。</p>
<p>如果试图把一个对象添加到TreeSet时，则该对象的类必须实现Comparable接口，而实现了Comparable的类又必须实现compareTo方法，两个对象即通过compareTo方法的返回值来比较大小。</p>
<p>Comparable的典型实现：</p>
<ul>
<li>BigDecimal、BigInteger以及所有的数组型对应的包装类：按它们对应的数值大小进行比较。</li>
<li>Character：按字符的unicode值来进行比较。</li>
<li>Boolean：true对应的包装类实例大于false对应的包装类实例。</li>
<li>String：按字符串中字符的unicode值进行比较。</li>
<li>Date、Time：后边的时间、日期比前面的大。</li>
</ul>
<blockquote>
<ul>
<li>向TreeSet中添加元素时，只有第一个元素无须比较compareTo方法，后面添加的所有元素都会调用compareTo方法进行比较。</li>
<li>因为只有相同类的两个实例才会比较大小，所以向TreeSet中添加的应该是同一个类的对象。</li>
<li>对于TreeSet集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过compareTo方法比较返回值。</li>
<li>当需要把一个对象放入TreeSet中，重写该对象对应的equals方法时，应保证该方法与compareTo方法有一致的结果；如果两个对象通过equals方法比较返回true，则通过compareTo方法比较应返回0.否则，让人难以理解。</li>
</ul>
</blockquote>
<h4 id="3-3-2-定制排序"><a href="#3-3-2-定制排序" class="headerlink" title="3.3.2 定制排序"></a>3.3.2 定制排序</h4><p>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable即可，或不希望按照升序的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现，需要重写compare(T o1, T o2)方法。</p>
<p>利用int compare(T o1, T o2)方法，比较o1和o2大小，返回正整数，表示o1大；0表示相等；负整数表示o2大。</p>
<p>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Comparator comparator = (o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Customer &amp;&amp; o2 <span class="keyword">instanceof</span>  Customer) &#123;</span><br><span class="line">            Customer u1 = (Customer) o1;</span><br><span class="line">            Customer u2 = (Customer) o2;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(u1.getAge(), u2.getAge());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入类型不匹配！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeSet treeSet = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line">    treeSet.add(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
