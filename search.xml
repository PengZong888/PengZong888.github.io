<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>集合面试题</title>
    <url>/2021/12/02/%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="请问ArrayList-LinkedList-Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别？"><a href="#请问ArrayList-LinkedList-Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别？" class="headerlink" title="请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别？"></a>请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别？</h3><span id="more"></span>

<ul>
<li><p>ArrayList和LinkedList的异同</p>
<blockquote>
<p>二者都是线程不安全的，相对线程安全的Vector，执行效率高。</p>
<p>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于随机访问get和set，ArrayList优于LinkedList，因为LinkedList要移动指针。对于新增和删除操作以及add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p>
</blockquote>
</li>
<li><p>ArrayList和Vector的区别</p>
<blockquote>
<p>Vector和ArrayList几乎是完全相同的，唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下，大多数的Java程序员使用ArrayList而不是Vector，因为同步完全可以由程序员自己来控制。Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。</p>
</blockquote>
</li>
</ul>
<h3 id="负载因子值的大小，对HashMap有什么影响"><a href="#负载因子值的大小，对HashMap有什么影响" class="headerlink" title="负载因子值的大小，对HashMap有什么影响"></a>负载因子值的大小，对HashMap有什么影响</h3><blockquote>
<ul>
<li>负载因子的大小决定了HashMap的数据密度。</li>
<li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或插入时的比较次数增多，性能会下降。</li>
<li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发射如果碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内存空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li>
<li>按照其它语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合框架概述</title>
    <url>/2021/12/02/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h2><p>Java最初的版本只为最常用的数据结构提供了很少的一组类：Vector、Stack、Hashtable、BitSet与Enumeration接口，其中的Enumeration接口提供了一种用于访问任意容器中各个元素的抽象机制。</p>
<p>随着JavaSE1.2的问世，设计人员感到是推出一组功能完善的数据结构的时机了。面对一大堆相互矛盾的设计策略，他们希望让类库规模小且易于学习，而不希望像C++的“标准模板库”（即STL）那样复杂，但却又希望能够得到STL率先推出的“泛型算法”所具有的优点。本节将介绍Java集合框架的基本设计，展示使用它们的方法，并解释一些颇具争议的特性背后的考虑。</p>
<span id="more"></span>

<h3 id="1-将集合的接口与实现分离"><a href="#1-将集合的接口与实现分离" class="headerlink" title="1. 将集合的接口与实现分离"></a>1. 将集合的接口与实现分离</h3><p>与现代的数据结构类库的常见情况一样，Java集合类库也将接口（interface）与实现（implementation）分离。首先，看一下人们熟悉的数据结构——队列（queue）是如何分离的。</p>
<p>队列接口指出可以在队列的尾部添加元素，在队列的头部删除元素，并且可以查找队列中元素的个数。当需要收集对象，并按照“先进先出”的规则检索对象时就应该使用队列。</p>
<p>队列接口的最简形式可能类似下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123; <span class="comment">// a simplified form of the interface in the standard library</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个接口并没有说明队列是如何实现的。队列通常有两种实现方式：</p>
<ul>
<li>一种是使用循环数组</li>
<li>另一种是使用链表</li>
</ul>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202153503296.png" alt="image-20211202153503296"></p>
<p>每一个实现都可以通过一个实现了Queue接口的类表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span> &lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="number">0</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">false</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">false</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">null</span>;    &#125;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="number">0</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">false</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">false</span>;    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">null</span>;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注释：实际上，Java类库没有名为CircularArrayQueue和LinkedListQueue的类。这里只是以这些类作为示例，解释一下集合接口与实现在概念上的不同。如果需要一个循环数组队列，就可以使用ArrayDeque类。如果需要一个链表队列，就直接使用LinkedList类，这个类实现了Queue接口。</p>
</blockquote>
<p>当在程序中使用队列时，一旦构建了集合就不需要知道究竟使用了哪种实现。因此，只有在构建集合对象时，使用具体的类才有意义。也就是在调用构造器的地方，指明你需要使用的接口实现类。具体做法就是在创建一个集合对象时，我们一般静态创建一个接口，在调用构造器new这个对象时，再指明具体的接口实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&lt;Customer&gt; expressLane = <span class="keyword">null</span>;</span><br><span class="line">expressLane = <span class="keyword">new</span> CircularArrayQueue();</span><br><span class="line"><span class="comment">// 也就等价于</span></span><br><span class="line">Queue&lt;Customer&gt; expressLane = <span class="keyword">new</span> CircularArrayQueue();</span><br><span class="line"><span class="comment">// 这种创建集合对象的做法也是我们在实际开发中通常所用的方法</span></span><br></pre></td></tr></table></figure>

<p>在研究API文档时，会发现另外一组名字以Abstract开头的类，例如，AbstractQueue。这些类是为类库设计者而设计的。如果想要实现自己的队列类（也许不太可能），会发现扩展AbstractQueue类要比实现Queue接口中的所有方法轻松得多。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202182324676.png" alt="image-20211202182324676"></p>
<h3 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2. Collection接口"></a>2. Collection接口</h3><p>在Java类库中，集合类的基本接口是Collection接口。这个接口有两个基本方法add和iterator()。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202182633987.png" alt="image-20211202182633987"></p>
<p>add用于向集合中添加元素。如果添加成功就返回true，否则返回false。例如，如果你试图向集合中添加一个已经存在的对象，会返回false。因为集合中不允许存在重复的对象。</p>
<p>iterator用于返回一个实现了Iterator接口的对象。可以使用这个迭代器对象依次访问集合中的元素。</p>
<h3 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3. 迭代器"></a>3. 迭代器</h3><p>Iterator接口包含4个方法</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202184905848.png" alt="image-20211202184905848"></p>
<p>通过反复调用next方法，可以逐个访问集合中的每个元素。但是，如果到了集合的末尾，next方法将抛出一个NoSuchElementException。因此，需要在调用next之前调用hasNext方法来判断是否下一个元素是否为null。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202185152900.png" alt="image-20211202185152900"></p>
<p>如果想要查看集合中的所有元素，就请求一个迭代器，并在hasNext返回true时反复地调用next方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; c = ......;</span><br><span class="line">Iterator&lt;String&gt; iter = c.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    String element = iter.next();</span><br><span class="line">    <span class="keyword">do</span> something with element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用“foreach”循环可以更加简练地表示同样的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String element : c) &#123;</span><br><span class="line"> 	<span class="keyword">do</span> something with element   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译器简单地将“foreach”循环翻译为带有迭代器的循环。</p>
<p>“foreach”循环可以与任何实现了Iterable接口的对象一起工作，这个接口包含三个抽象方法(Java SE 8之后)：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202190640844.png" alt="image-20211202190640844"></p>
<p>Collection接口扩展了Iterable接口。因此，对于标准类库中的任何集合都可以使用“foreach”循环。</p>
<p>在Java集合类库中，应该将迭代器认为是位于两个元素之间。<strong>当调用next时，迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用</strong>。</p>
<blockquote>
<p>注释：这里还有一个有用的推论。可以将Iterator.next与InputStream.read看作为等效的。从数据流中读取一个字节，就会自动地“消耗掉”这个字节。下一次调用read将会消耗并返回输入的下一个字节。用同样的方式，反复地调用next就可以读取集合中所有元素。</p>
</blockquote>
<p>Iterator接口的remove方法将会删除上次调用next方法时返回的元素。在大多数情况下，在决定删除某个元素之前应该先看一下这个元素是很具有实际意义的。然而，<strong>如果先要删除指定位置上的元素，仍然需要越过这个元素</strong>。更为重要的是，对next方法和remove方法的调用具有互相依赖性。<u><strong>如果调用remove之前没有调用next将是不合法的。如果这样做，将会抛出IllegalStateException异常</strong>。</u></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202192504271.png" alt="image-20211202192504271"></p>
<p>如果想删除两个相邻的元素，不能直接地调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">it.remove();</span><br><span class="line">it.remove(); <span class="comment">// Error!!!</span></span><br></pre></td></tr></table></figure>

<p>相反，必须先调用next越过将要删除的元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">it.remove();</span><br><span class="line">it.next();</span><br><span class="line">it.remove(); <span class="comment">// OK!</span></span><br></pre></td></tr></table></figure>

<h3 id="4-泛型实用方法"><a href="#4-泛型实用方法" class="headerlink" title="4. 泛型实用方法"></a>4. 泛型实用方法</h3><p>由于Collection与Iterator都是泛型接口，可以编写操作任何集合类型的实用方法。例如，下面是一个检测任意结合是否包含指定元素的泛型方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Collection&lt;E&gt; c, Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(E element : c) </span><br><span class="line">        <span class="keyword">if</span>(element.equals(obj))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>Java类库设计者认为：这些实用方法中的某些方法非常有用，应该将它们提供给用户使用。这样，类库的使用者就不必自己重新构建这些方法了。contains就是这样一个实用方法。</p>
<p>事实上，Collection接口声明了很多有用的方法，所有的实现类都必须提供这些方法。在这些方法中，有很多方法的功能非常明确，不需要过多的解释。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202194211291.png" alt="image-20211202194211291"></p>
<p>当然，如果实现Collection接口的每一个类都要提供如此多的例行方法将是一件很烦人的事情。为了能够让实现者更容易地实现这个接口，Java类库提供了一个类AbstractCollection，它将基础方法size和iterator抽象化了，但是在此提供了例行方法。例如：</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202194307915.png" alt="image-20211202194307915"></p>
<h3 id="5-集合框架中的接口"><a href="#5-集合框架中的接口" class="headerlink" title="5. 集合框架中的接口"></a>5. 集合框架中的接口</h3><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202195210125.png" alt="image-20211202195210125"></p>
<h3 id="6-Collections工具类"><a href="#6-Collections工具类" class="headerlink" title="6. Collections工具类"></a>6. Collections工具类</h3><blockquote>
<ul>
<li>Collections是一个操作Set、List和Map等集合的工具类。</li>
<li>Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</li>
</ul>
</blockquote>
<ul>
<li><p>排序操作（均为static方法）</p>
<ul>
<li>reverse(List); 反转List中元素的顺序</li>
<li>shuffle(List); 对List集合元素进行随机排序</li>
<li>sort(List); 根据元素的自然顺序对指定List集合元素按升序排序</li>
<li>sort(List, Comparator); </li>
<li>swap(List, int, int); 将指定list集合中的i出元素和j出元素进行交换</li>
</ul>
</li>
<li><p>查找、替换</p>
<ul>
<li>Object max(Collection); 自然排序后，返回给定集合中最大元素</li>
<li>Object max(Collection，Comparator);</li>
<li>Object min(Collection);</li>
<li>Object min(Collection，Comparator);</li>
<li>int frequency(Collection，Object); 返回指定集合中指定元素的出现次数</li>
<li>void copy(List dest,List src);</li>
<li>boolean replaceAll(List list，Object oldVal，Object newVal); 使用新值替换List对象的所有旧值</li>
</ul>
</li>
<li><p>同步机制</p>
<p>Collections类中提供了多个synchronizedXxx方法，该方法可以将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203191631324.png" alt="image-20211203191631324"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Map接口继承树</title>
    <url>/2021/12/03/Map%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203111736182.png" alt="image-20211203111736182"></p>
<ul>
<li>Map与Collection并列存在。用于保存具有**==映射关系==**得数据：key-value。</li>
<li>Map中的key和value都可以是任何引用类型得数据。</li>
<li>Map中的**==key用Set来存放，不允许重复==**，即同一个Map对象所对应的类，须重写hashCode和equals方法。</li>
</ul>
<span id="more"></span>

<ul>
<li><p>常用String类作为Map的“键”。</p>
</li>
<li><p>key和value之间存在单向一对一关系，即通过指定的key总能找到唯一的、确定的value。</p>
</li>
<li><p>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。其中，<strong>HashMap是Map接口使用频率最高的实现类</strong>。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203112634817.png" alt="image-20211203112634817"></p>
</li>
</ul>
<h2 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h2><ul>
<li>添加、删除、修改操作<ul>
<li>Object put(Object key,Object value); 将指定key-value添加到(或修改)当前Map对象中</li>
<li>void putAll(Map m); 将m中所有key-value对存放到当前map中</li>
<li>Object remove(Object key); 移出指定key的key-value对，并返回value</li>
<li>void clear(); 清空当前map中的所有数据</li>
</ul>
</li>
<li>元素查询的操作<ul>
<li>Object get(Object key); 获取指定key对应的value</li>
<li>boolean containsKey(Object key); 是否包含指定的key</li>
<li>boolean containsValue(Object value); 是否包含指定的value</li>
<li>int size(); 返回map中key-value对的个数</li>
<li>boolean isEmpty(); 判断当前map是否为空</li>
<li>boolean equals(Object obj); 判断当前map和参数对象obj是否相等</li>
</ul>
</li>
<li>元视图操作<ul>
<li>Set keySet(); 返回所以key构成的Set集合</li>
<li>Collection values(); 返回所有value构成的Collection集合</li>
<li>Set entrySet(); 返回所有key-value对构成的Set集合</li>
</ul>
</li>
</ul>
<h2 id="2-HashMap"><a href="#2-HashMap" class="headerlink" title="2. HashMap"></a>2. HashMap</h2><blockquote>
<ul>
<li><strong>==HashMap是Map接口使用频率最高的实现类。==</strong></li>
<li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li>
<li>所有的key构成的集合是Set：无序的、不可重复的。所以要重写方法。</li>
<li>所有value构成的集合是Collection：无序的、可以重复的。所以要重写equals。</li>
<li>一个key-value构成一个entry。</li>
<li>所有的entry构成的集合是Set：无序的、不可重复的。</li>
<li>HashMap判断两个key相等的标准是：两个key通过equals方法返回true，hashCode值也相等。</li>
<li>HashMap判断两个value相等的标准是：两个value通过equals方法返回true。</li>
</ul>
</blockquote>
<h3 id="2-1-HashMap的存储结构"><a href="#2-1-HashMap的存储结构" class="headerlink" title="2.1 HashMap的存储结构"></a>2.1 HashMap的存储结构</h3><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203132751458.png" alt="image-20211203132751458"></p>
<h3 id="2-2-HashMap源码中的重要常量"><a href="#2-2-HashMap源码中的重要常量" class="headerlink" title="2.2 HashMap源码中的重要常量"></a>2.2 HashMap源码中的重要常量</h3><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203133703159.png" alt="image-20211203133703159"></p>
<h3 id="2-3-JDK-1-8之前"><a href="#2-3-JDK-1-8之前" class="headerlink" title="2.3 JDK 1.8之前"></a>2.3 JDK 1.8之前</h3><p>HashMap的内部存储结构其实是**<u>数组和链表</u>**的结合。当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p>
<p>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且**==新添加的元素作为链表的head==**。</p>
<ul>
<li><p><strong>添加元素的过程</strong></p>
<p>向HashMap中添加entry1(key, value)，首先需要计算entry1中key的哈希值（根据key所在类的hashCode计算得到），这个哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上已经存在entry2（或还有链表存在的entry3，entry4），则需要通过循环的方法，依次比较entry1中key和其它的entry。如果彼此hash值相同，则直接添加成功。如果hash值相同，继续比较二者是否equals。如果返回true，则使用entry1的value去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都为false，则entry1仍可添加成功。entry1指向原有的entry元素。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203165213991.png" alt="image-20211203165213991"></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203165106541.png" alt="image-20211203165106541"></p>
</li>
<li><p><strong>HashMap的扩容</strong></p>
<p>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的，所以为了提高查询的效率，就要对HashMap的数组进行扩容，而**<u>在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</u>**</p>
</li>
<li><p><strong>那么HashMap什么时候进行扩容呢？</strong></p>
<p>当HashMap中的元素个数超过数组大小 * loadFactor时，就会进行数组扩容，而loadFactor默认值就是0.75.也就是说，默认数组大小为16，当元素个数超过16 * 0.75 = 12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为2 * 16 = 32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以<em><strong>如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能</strong></em>。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203164010966.png" alt="image-20211203164010966"></p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203165721926.png" alt="image-20211203165721926"></p>
</li>
</ul>
<h3 id="2-4-JDK-1-8"><a href="#2-4-JDK-1-8" class="headerlink" title="2.4 JDK 1.8"></a>2.4 JDK 1.8</h3><p>HashMap的内部存储结构其实是**<u>数组 + 链表 + 红黑树</u>**的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p>
<p>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子节点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last，或树的叶子节点。</p>
<ul>
<li><p><strong>扩容和树形化</strong></p>
<p>扩容操作与JDK1.7相类似。当HashMap中的其中一个链的对象个数如果达到了8个，此时如果没有capacity没有达到64，那么HashMap会先扩容解决；如果已经达到了64，那么这个链会变成树，节点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize时判断树节点个数低于6个，也会把树再转化为链表。</p>
</li>
<li><p><strong>关于映射关系的key是否可以修改？</strong></p>
<p>不要修改！映射关系存储到HashMap中会存储key的hash值，这样就不用再每次查找时重新计算每一个Entry或Node(TreeNode)的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashCode值得计算，那么会导致匹配不上。</p>
</li>
</ul>
<h3 id="2-5-总结：JDK1-8相较于之前得变化"><a href="#2-5-总结：JDK1-8相较于之前得变化" class="headerlink" title="2.5 总结：JDK1.8相较于之前得变化"></a>2.5 总结：JDK1.8相较于之前得变化</h3><ol>
<li>HashMap map = new HashMap(); // 默认情况下，先不创建长度为16的数组</li>
<li>当首次调用map.put()时，再创建长度为16的数组</li>
<li>数组为Node类型，在JDK1.7中称为Entry类型</li>
<li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li>
<li>当数组指定索引位置的链表长度 &gt; 8时，且map中的数组的长度 &gt; 64时，次索引位置上的所有key-value对使用红黑树进行存储。</li>
</ol>
<h2 id="3-LinkedHashMap"><a href="#3-LinkedHashMap" class="headerlink" title="3. LinkedHashMap"></a>3. LinkedHashMap</h2><ul>
<li>HashMap的子类。</li>
<li>在HashMap存储结构的基础上，使用了一对双向链表来记录添加元素的顺序。</li>
<li>与LinkedHashSet类似，LinkedHashMap可以维护Map的迭代顺序：迭代顺序与key-value对的插入顺序一致。</li>
</ul>
<h2 id="4-TreeMap"><a href="#4-TreeMap" class="headerlink" title="4. TreeMap"></a>4. TreeMap</h2><ul>
<li>TreeMap存储key-value对时，需要根据key-value对进行排序，TreeMap可以保证所有的key-value对处于有序状态。</li>
<li>TreeMap底层使用红黑树结构存储数据。</li>
<li>TreeMap的key的排序：<ul>
<li>自然排序：TreeMap所有key必须实现Comparable接口，而且所有的key应该是同一个类的对象，否则将会抛出ClassCastException。</li>
<li>定制排序：创建TreeMap时，传入一个Comparator对象。此时不需要Map的key实现Comparable接口。</li>
</ul>
</li>
<li>TreeMap判断两个key相等的标准：两个key通过compareTo方法或者compare方法返回0.</li>
</ul>
<h2 id="5-Hashtable"><a href="#5-Hashtable" class="headerlink" title="5. Hashtable"></a>5. Hashtable</h2><ul>
<li>Hashtable是一个古老的Map实现类，JDK1.0就提供了，并且与HashMap不同的是，它是线程安全的。</li>
<li>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。</li>
<li>与HashMap不同，Hashtable不允许使用null作为key和value。</li>
<li>与HashMap一样，Hashtable也不能保证其中key-value对的顺序。</li>
<li>判断key、value相等的标准，同HashMap。</li>
</ul>
<h2 id="6-Properties"><a href="#6-Properties" class="headerlink" title="6. Properties"></a>6. Properties</h2><ul>
<li>Properties类是Hashtable的子类，该对象用于处理属性文件</li>
<li>由于属性文件里的key、value都是字符串类型，所以**<u>Properties里的key和value都是字符串类型</u>**。</li>
<li>存取数据时，建议使用setProperty(String key, String value)方法和getProperty(String key)方法。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection接口继承树</title>
    <url>/2021/12/02/Collection%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202210335782.png" alt="image-20211202210335782"></p>
<ul>
<li><p>Collection接口是List、Set和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。</p>
<span id="more"></span></li>
<li><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口（如：Set和List）实现。</p>
</li>
<li><p>在Java5之前，Java集合会丢失容器中所有对象的数据类型，把所有对象都当成Object类型处理；从JDK5.0增加了泛型以后，Java集合可以记住容器中对象的数据类型。</p>
</li>
</ul>
<h2 id="1-Collection接口方法"><a href="#1-Collection接口方法" class="headerlink" title="1. Collection接口方法"></a>1. Collection接口方法</h2><p>1.1 添加 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(Object obj) </span><br><span class="line">addAll(Collection coll) </span><br></pre></td></tr></table></figure>

<p>1.2 获取有效元素的个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.3 清空集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.4 是否是空集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure>

<p>1.5 是否包含某个元素 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span> <span class="comment">// 是通过元素的equals方法来判断是否是同一个对象 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection c)</span> <span class="comment">// 也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。</span></span></span><br></pre></td></tr></table></figure>

<p>1.6 删除 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span> <span class="comment">// 通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection coll)</span> <span class="comment">// 取当前集合的差集 </span></span></span><br></pre></td></tr></table></figure>

<p>1.7 取两个集合的交集 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection c)</span> <span class="comment">// 把交集的结果存在当前集合中，不影响c </span></span></span><br></pre></td></tr></table></figure>

<p>1.8 集合是否相等 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span></span><br></pre></td></tr></table></figure>

<p>1.9 转成对象数组 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] toArray() </span><br></pre></td></tr></table></figure>

<p>1.10 获取集合对象的哈希值 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashCode() </span><br></pre></td></tr></table></figure>

<p>1.11 遍历 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iterator() <span class="comment">// 返回迭代器对象，用于集合遍历</span></span><br></pre></td></tr></table></figure>

<h2 id="2-List接口"><a href="#2-List接口" class="headerlink" title="2. List接口"></a>2. List接口</h2><blockquote>
<ul>
<li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组。</li>
<li>List集合类中**==元素有序、且可重复==**，集合中的每个元素都有其对应的顺序索引。</li>
<li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li>
<li>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</li>
</ul>
</blockquote>
<p>List除了从Collection集合继承的方法外，List集合里添加了一些根据索引来操作集合元素的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span></span>; <span class="comment">// 在index位置插入ele元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection eles)</span></span>; <span class="comment">// 从index开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 获取指定index的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span></span>; <span class="comment">// 返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span></span>; <span class="comment">// 返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 移除指定index的元素，并返回此元素</span></span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span></span>; <span class="comment">// 设置指定index的元素为ele</span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span>; <span class="comment">// 返回从fromIndex到toIndex的子集合</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1. ArrayList"></a>2.1. ArrayList</h3><blockquote>
<ul>
<li>ArrayList是LIst接口的典型实现类、主要实现类。</li>
<li>本质上，ArrayList是对象引用的一个“变长”数组。</li>
<li>ArrayList的JDK1.8之前与之后的实现区别？<ul>
<li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组。</li>
<li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当要添加第一个元素时再创建一个始容量为10的数组。</li>
</ul>
</li>
<li>Arrays.asList(…)方法返回的List集合，既不是ArrayList实例，也不是Vector实例。而是一个固定长度的List集合。</li>
</ul>
</blockquote>
<p>我们可以执行下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer[] datas = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(datas);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    System.out.println(list.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果是抛异常UnsupportedOperationException。查看Arrays.asList()源码发现</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202214748103.png" alt="image-20211202214748103"></p>
<p>asList方法返回的虽然是一个ArrayList，但并不是我们平常使用的那个。而是Arrays的一个静态内部类，并且这个类实现了Serializable接口，说明它是可序列化的，正如我们所使用的String一样，是不可变的。</p>
<h3 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h3><blockquote>
<ul>
<li>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</li>
<li>新增方法：<ul>
<li>void addFirst(Object obj)</li>
<li>void addLast(Object obj)</li>
<li>Object getFirst()</li>
<li>Object getLast()</li>
<li>Object removeFirst()</li>
<li>Object removeLast()</li>
</ul>
</li>
</ul>
</blockquote>
<p>LinkedList：**==双向链表==**，内部没有声明数组，而是定义了Node类型的first和last，用于记录首末元素。</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202220345414.png" alt="image-20211202220345414">同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：</p>
<ul>
<li>prev变量记录前一个元素的位置</li>
<li>next变量记录下一个元素的位置</li>
</ul>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202220452685.png" alt="image-20211202220452685"></p>
<h3 id="2-3-Vector"><a href="#2-3-Vector" class="headerlink" title="2.3 Vector"></a>2.3 Vector</h3><p>Vector是一个古老的集合，JDK1.0就有了（ArrayList和LinkedList都是since1.2）。大多数操作与ArrayList相同，区别之处在于==<strong>Vector是线程安全的</strong>==。</p>
<p>新增方法：</p>
<ul>
<li>void addElement(Object obj)</li>
<li>void insertElementAt(Object obj, int index)</li>
<li>void setElementAt(Object obj, int index)</li>
<li>void removeElement(Object obj)</li>
<li>void removeAllElement()</li>
</ul>
<p>在各种List中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList。Vector总是比ArrayList慢，所以尽量避免使用。</p>
<h2 id="3-Set接口"><a href="#3-Set接口" class="headerlink" title="3. Set接口"></a>3. Set接口</h2><blockquote>
<ul>
<li>Set接口是Collection的子接口，Set接口没有提供额外的方法。</li>
<li>Set集合不允许包含相同的元素，如果试着把两个相同的元素加入同一个Set集合中，则添加操作失败。</li>
<li>Set判断两个对象是否相同不是使用==运算符，而是根据equals()方法。</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211202222826445.png" alt="image-20211202222826445"></p>
<h3 id="3-1-HashSet"><a href="#3-1-HashSet" class="headerlink" title="3.1 HashSet"></a>3.1 HashSet</h3><blockquote>
<ul>
<li>HashSet是Set接口的典型实现，大多数时候使用Set集合时都使用这个实现类。</li>
<li>HashSet按Hash算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</li>
<li>HashSet具有以下特点：<ul>
<li>不能保证元素的排列顺序</li>
<li>不是线程安全的</li>
<li>集合元素可以是null（根据不重复原则，只能有一个）</li>
</ul>
</li>
<li>HashSet集合判断两个元素相等的标准：两个对象通过hashCode()方法比较相等，并且两个对象的equals()方法返回值也相等。</li>
<li>对于存放在Set容器中的对象，对应的类一定要重写equals和hashCode方法，以实现对象相等规则。即：”**==相等的对象必须具有相等的散列码==**“。</li>
</ul>
</blockquote>
<h4 id="3-1-1-向HashSet中添加元素的过程"><a href="#3-1-1-向HashSet中添加元素的过程" class="headerlink" title="3.1.1 向HashSet中添加元素的过程"></a>3.1.1 向HashSet中添加元素的过程</h4><p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203090912611.png" alt="image-20211203090912611"></p>
<p>对于添加成功的情况二和情况三而言：元素a与已经存在指定索引位置上数据以链表的方式存储。</p>
<p>JDK7：元素a放到数组中，指向原来的元素。</p>
<p>JDK8：原来的元素在数组中，指向元素a。</p>
<p>总结：**==七上八下==**</p>
<blockquote>
<p>注释：HashSet底层：数组 + 链表的结构（前提：JDK7）。初始容量为16，当如果使用率超过0.75，就会扩大容量为原来的2倍。</p>
</blockquote>
<h4 id="3-1-2-重写hashCode-方法的基本原则"><a href="#3-1-2-重写hashCode-方法的基本原则" class="headerlink" title="3.1.2 重写hashCode()方法的基本原则"></a>3.1.2 重写hashCode()方法的基本原则</h4><ul>
<li>在程序运行时，同一个对象多次调用hashCode方法应该返回相同的值。</li>
<li>当两个对象的equals方法比较返回true时，这两个对象的hashCode方法的返回值也应相等。</li>
<li>对象中用作equals方法比较的Field，都应该用来计算hashCode值。</li>
</ul>
<h4 id="3-1-3-重写equals-方法的基本原则"><a href="#3-1-3-重写equals-方法的基本原则" class="headerlink" title="3.1.3 重写equals()方法的基本原则"></a>3.1.3 重写equals()方法的基本原则</h4><p>以自定义的Customer类为例，何时需要重写equals？</p>
<ul>
<li>当一个类有自己特有的”逻辑相等“概念，当改写equals的时候，总是要改写hashCode，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode方法，它们仅仅是两个对象。</li>
<li>因此，违反了”**==相等的对象必须具有相等的散列码==**“。</li>
<li>结论：复写equals方法的时候一般都需要同时复写hashCode方法。<strong>通常参与计算hashCode的对象的属性也应该参与到equals中进行计算</strong>。</li>
</ul>
<h4 id="3-1-4-Eclipse-IDEA工具里hashCode的重写"><a href="#3-1-4-Eclipse-IDEA工具里hashCode的重写" class="headerlink" title="3.1.4 Eclipse/IDEA工具里hashCode的重写"></a>3.1.4 Eclipse/IDEA工具里hashCode的重写</h4><p>在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</p>
<p><img src="https://raw.githubusercontent.com/PengZong888/tuchuang/main/img/image-20211203092415291.png" alt="image-20211203092415291"></p>
<ul>
<li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的”冲突“就越少，查找起来效率也会提高。（减少冲突）</li>
<li>31只占用5bits（1 1111），相乘造成数据溢出的概率较小。</li>
<li>31可以由 <u>*i × 31 == (i &lt;&lt; 5) -1*</u> 来表示，现在很多虚拟机里面都有做相关优化。（提高算法效率）</li>
<li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数背身和被乘数还有1来整除！（减少冲突）</li>
</ul>
<h3 id="3-2-LinkedHashSet"><a href="#3-2-LinkedHashSet" class="headerlink" title="3.2 LinkedHashSet"></a>3.2 LinkedHashSet</h3><blockquote>
<ul>
<li>LinkedHashSet是HashSet的子类。</li>
<li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，但它同时使用双向链表维护元素的次序，这使得元素看起来是以**==插入顺序==**保存的。</li>
<li><strong>LinkedHashSet插入性能略低于HashSet</strong>，但在迭代访问Set里的全部元素时有很好的性能。</li>
<li>LinkedHashSet不允许集合元素重复</li>
</ul>
</blockquote>
<h3 id="3-3-TreeSet"><a href="#3-3-TreeSet" class="headerlink" title="3.3 TreeSet"></a>3.3 TreeSet</h3><blockquote>
<ul>
<li>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。</li>
<li>TreeSet底层使用<strong>红黑树</strong>结构存储数据。</li>
<li>新增的方法：<ul>
<li>Comparator comparator() </li>
<li>Object first() </li>
<li>Object last() </li>
<li>Object lower(Object e) </li>
<li>Object higher(Object e) </li>
<li>SortedSet subSet(fromElement, toElement) </li>
<li>SortedSet headSet(toElement) </li>
<li>SortedSet tailSet(fromElement)</li>
</ul>
</li>
<li>TreeSet两种排序方法：自然排序和定制排序。默认采用自然排序。</li>
<li>特点：有序，查询速度比List快。</li>
<li></li>
</ul>
</blockquote>
<h4 id="3-3-1-自然排序"><a href="#3-3-1-自然排序" class="headerlink" title="3.3.1 自然排序"></a>3.3.1 自然排序</h4><p>TreeSet会调用集合元素的compareTo(Object obj)方法来比较元素之间的大小关系，然后将集合元素按升序（默认情况）排列。</p>
<p>如果试图把一个对象添加到TreeSet时，则该对象的类必须实现Comparable接口，而实现了Comparable的类又必须实现compareTo方法，两个对象即通过compareTo方法的返回值来比较大小。</p>
<p>Comparable的典型实现：</p>
<ul>
<li>BigDecimal、BigInteger以及所有的数组型对应的包装类：按它们对应的数值大小进行比较。</li>
<li>Character：按字符的unicode值来进行比较。</li>
<li>Boolean：true对应的包装类实例大于false对应的包装类实例。</li>
<li>String：按字符串中字符的unicode值进行比较。</li>
<li>Date、Time：后边的时间、日期比前面的大。</li>
</ul>
<blockquote>
<ul>
<li>向TreeSet中添加元素时，只有第一个元素无须比较compareTo方法，后面添加的所有元素都会调用compareTo方法进行比较。</li>
<li>因为只有相同类的两个实例才会比较大小，所以向TreeSet中添加的应该是同一个类的对象。</li>
<li>对于TreeSet集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过compareTo方法比较返回值。</li>
<li>当需要把一个对象放入TreeSet中，重写该对象对应的equals方法时，应保证该方法与compareTo方法有一致的结果；如果两个对象通过equals方法比较返回true，则通过compareTo方法比较应返回0.否则，让人难以理解。</li>
</ul>
</blockquote>
<h4 id="3-3-2-定制排序"><a href="#3-3-2-定制排序" class="headerlink" title="3.3.2 定制排序"></a>3.3.2 定制排序</h4><p>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable即可，或不希望按照升序的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现，需要重写compare(T o1, T o2)方法。</p>
<p>利用int compare(T o1, T o2)方法，比较o1和o2大小，返回正整数，表示o1大；0表示相等；负整数表示o2大。</p>
<p>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Comparator comparator = (o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Customer &amp;&amp; o2 <span class="keyword">instanceof</span>  Customer) &#123;</span><br><span class="line">            Customer u1 = (Customer) o1;</span><br><span class="line">            Customer u2 = (Customer) o2;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(u1.getAge(), u2.getAge());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入类型不匹配！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TreeSet treeSet = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line">    treeSet.add(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
